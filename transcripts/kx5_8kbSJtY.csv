start,end,text
480,7600," hello and welcome to another soothing session how about that uh how about that i bet you didn't"
7600,13200," expect that to happen yet again it's every day pretty much so today we're going to continue"
13200,19520," working on the wank tile project that's right so yeah we've been working on this project for"
19520,25120," several days already and the more i work on this project the more i want to work on it even further"
25120,30960," because it's such an awesome thing i didn't expect that such a simple idea would yield such"
30960,36960," awesome results and it's like really really interesting to explore uh you can find the"
36960,42800," source code of the thing we're doing uh in here in the chat if you're watching on twitch if you're"
42800,52480," one of those youtube people you can find a source code in here so what is wank tiles well uh specifically"
52480,58400," we're talking about uh in in this in the scope of the project we're talking about two colored wank"
58400,67520," tiles so they have two colors so wank tile is a square tile right each side of which can have two"
67520,74400," different cores and what you need to do you need to basically tile an infinite grid um maintaining the"
74400,82720," following restrictions the tiles with the same color can be only placed uh um adjacent with the tile with"
82720,88080," the same color does make any sense right so uh basically like a domino game right but with the"
88080,97520," colors of the sides right and uh the cool thing is that uh you can actually make tiles look however you want"
97520,107600," for example we generated two uh kinds of tiles uh so and each tile on its side has one of two colors"
107600,113920," and if you use these style sets to produce the uh to tile the grid they will look like this so this is"
113920,120000," the result of the first one and this is the result of the second one right so they use the same principle"
120000,123360," they use the same principle of having two colors on the side and you can also place"
123360,132720," uh like the same color suggesting to each other so and um the idea of this specific project is to"
132720,141040," actually generate the uh wing tile grid based on the definition of a simple single function so this is"
141040,148880," the function this function accepts two parameters something called bltr and uv so bltr is a bit mask"
149440,159040," four bits beat mask uh each bit of which represents a side in the following order um bottom left top right"
159040,166560," and if the uh beat is zero that means that side has one color if that bit is one that means that side has"
166560,176960," a different color so basically a single four beat mask describes the whole tile uv is a coordinate on the"
176960,184080," texture of that tile and that coordinates a coordinate is normalized from zero to one right so and it's"
184080,188560," resolution independent because of that so you can make the tile of whatever resolution you want whatever"
188560,193600," ratio you want these coordinates are going to be normalized from zero to one so and what this"
193600,201280," thing does given these two parameters it produces the rgb color the pixel of this style at that specific"
201280,207760," coordinates so you can think of this thing as the fragment shader the fragment shader which generates"
207760,215360," the the tile given the tile description and the coordinates of the pixel on that tile so and as a"
215360,223040," matter of fact both of these style sets were generated from one single function like that seriously like"
223040,231200," both of these things were generated from that single uh shader function so and yeah uh the entire rendering"
231200,236880," we wrote the program that performs the entire rendering uh in three phases first we render the"
236880,244640," atlas basically the full wank tile set here are the atlases and then we generate the grid basically"
244640,252320," generating a sequence of these beat masks making sure that they um you know maintain the constraints"
252320,258400," how to say what's what's the verb uh comply to the constraints i suppose making sure that they comply"
258400,265680," to the constraints and once we have the um um you know the grid and the atlas we're using the both to"
265680,271760," to generate the final image in here all right so and this is basically what we were working on for"
271760,278560," the past like five or four days i don't remember for sure but on the youtube daily there is a playlist"
278560,286880," where you can watch the development of this project from scratch uh right so let's go sorting daily right"
288800,296960," and uh let's go so there is a playlist in here somewhere here is the wank tiles yeah so here is"
296960,304960," this stuff i'm gonna actually put the playlist in here wang tiles uh playlist right there we go so what"
304960,313360," i was talking about yeah we've been developing it for like several days already um so and one of the"
313360,318080," things we also implemented by the way this entire thing is rendered completely on the cpu"
318800,324480," so it's a very important it's rendered completely on the cpu we're not using opengl vulcan direct x"
324480,332480," anything we're just allocating the buffer of you know you know of bytes and we're just rendering"
332480,338400," everything in there and then we're using stp image to save it as a png image that's it it's entirely"
338400,348720," rendered on a cpu pixel by pixel uh completely handmade so and uh one of the things we did to"
348720,353440," speed up the whole process of rendering we actually started to use multi-threading"
353440,360640," uh with p threads and stuff like that so uh specifically the uh atlases uh each tile within"
360640,367520," the atlas is actually rendered is actually rendered uh in a separate thread right it is rendered in a"
367520,374480," separate thread and uh furthermore in the future i think i'm gonna do the grid rendering autumn also"
374480,380960," multi-threaded uh maybe i'm gonna even do that uh today so and one of the things we implemented while"
380960,388880," implementing the multi-threaded rendering is a simple profiler a simple embedded profiler i would even say"
388880,397200," so it's a single translation unit like 34 lines of code which allows you to start measuring the time"
397200,402880," and then stop measuring the time and just see like how much a particular phase of rendering took"
402880,410640," right so and this is how we use the entire thing so uh for example i can start measuring the atlas"
410640,416080," rendering then generate the atlas then print how much it took then i can start generating the grid"
416080,422960," uh then stop uh measuring generating the grid and print the summary and so on and so forth so you see i can"
422960,431840," split my code into these sections and profile their performance uh separately so and if i run my program"
431840,440400," uh right now right so you'll be able to see each individual face in here in seconds so uh for the"
440400,449280," tile of 64 beats by 64 beats uh atlas rendering took nine milliseconds so we go up to nanoseconds right we measure"
449280,456560," up to nanoseconds grid generation was actually the fastest it took like nine microseconds so um good"
456560,462240," generation is actually super super fast i don't think we can we'd even need to improve it right so the"
462240,469760," actual grid rendering took uh less than atlas rendering which is also very interesting but yeah you can see"
469760,475680," each individual face and also we have see we can see faders of generating the png input and so on and so"
475680,483760," forth and here is the png outputs uh that we produced right so and one of the goals of today"
483760,491360," is to actually improve this little like profiling tool that we implemented because one of the things i"
491360,498240," want to be able to do i want to be able to do nested measurements so essentially i want to be able to say"
498240,509280," something like begin clock uh total right so total and wrap all of these things into like a total thing"
509280,519200," and then end clock right so i want to be able to have nested sections uh and uh yeah being able to"
519200,526720," actually profile so here's the whole face took that but each individual sub phase took this amount of time"
526720,532560," and maybe even compute the percentages from the the whole phase right you see what i'm talking about"
532560,537520," so i want to be able to do these kind of things right and that's going to be the topic of today's"
537520,544240," stream um does it make sense does it sound interesting i hope it sounds interesting uh hello hello hello"
545520,564480," um so yeah so let me actually remove this entire step uh with the global state yes we're going to use the"
564480,572480," global state uh because uh the entire profiling tool has to be uh removable from the source code right so for"
572480,577360," instance uh you have all these functions uh you have all these functions but if you don't define"
577360,583680," the uh prof macro all of these calls like begin clock and end clock are going to be stripped off from"
583680,589840," the code completely and will never even appear in the final executable right so i want to design this"
589840,598160," thing uh to be here to be able to easily strip off or like um yeah this thing is designed to be easily"
598160,604240," stripped off from the code um so and that's why we're going to use global variables for that"
604240,609360," so the code itself is never aware that it's being profiled"
610880,621840," uh to to choose so let's go i suppose let's go um so i think we even have to do yeah nested time"
621840,629120," measuring nested time measuring uh let me remove that let me remove that and let's um"
629120,636960," let's create a branch called nested profiler right so this is going to be nested profiler and i just realized"
636960,643200," that we don't really need to have tp end the way it works by the way when you start a begin clock"
643200,651040," what it does it saves the current time to a global variable called tp begin right and then when you end"
651040,656480," the clock it saves the current time to tp end and finds the differences between them and just prints them"
656480,663600," to you so what i realized just now you don't need to keep tp end global because you only"
663600,671120," need it once uh in the end clock and that could be simply uh the local variable here so there's literally"
671120,676960," no reason to you know have it as a global variable and store anything in there you know what i'm talking"
676960,682800," about so you can just have only begin and a label and the label is basically the name of the phase you're"
682800,689040," currently measuring right so hello obj security humanity mn v2k glitch shirt hello hello"
702800,709440," okay so let's try to recompile the entire thing the music is actually quite good"
709440,720640," so here are all of the phases uh i don't think if you think about it like saying clock elapsed time"
720640,726800," like this prefix is not particularly useful i think i'm gonna remove it right so and without this prefix"
726800,735120," um so you just have timings right so this uh seconds on atlas rendering the seconds on that this seconds on"
735120,745440," that and so on and so forth so how can you enable nested uh time measuring uh if you have only one uh begin"
745440,753520," right so essentially you have begin clock right so total uh but if you start another clock"
754320,763760," uh this clock will overwrite tp begin and tp label and you won't be able to recover the previous one"
763760,774560," back this sounds like a job for a stack right so uh we need to actually have a stack of these clocks"
774560,782240," maybe we we're gonna even factor out this like pair begin and label into a structure that you could call"
782240,788000," something like clock right so it's gonna be struct and this is gonna be clock and the clock will be"
788000,796240," basically will consist basically from begin and a label there we go so you have a clock um and then"
796240,803600," you can have a stack of clocks so something like clock stack so and uh the clock stack is gonna have a"
803600,811280," limited capacity so you need the capacity equal to basically how much you want to nest those things"
811280,818400," right uh how much you want to nest those things um and i don't think you're gonna miss them too much"
818400,829280," uh so if i do clock stack capacity and that capacity is going to be equal to uh clock stack cap uh 256 right"
829280,836560," this is going to be more than enough i'm pretty sure 256 clocks is enough for everyone what do you guys think"
840160,844720," but what about multi-threaded environment uh we're not going to be using that within the multi-threaded"
844720,851200," environment the idea is going to be the following so you have a function that is multi-threaded so it's"
851200,861760," parallel uh parallel so this function speeds out a ton of threats right and after it's done it's gonna join"
861760,868160," all of these threats so the function itself uh sort of like a phase we can even call it parallel phase"
869040,873280," it's going to be single it's going to act like single threaded and it's going to block but it's"
873280,878400," going to spawn a bunch of threats and then wait on on these threats to finish so basically it will"
878400,884240," redistribute the work and we're going to measure uh only that specific phase we don't really need to"
884240,890720," measure like what's going on inside we just want to see with uh which amount of threats the uh we have"
890720,897920," the performance benefit if you know what i'm talking about so uh one of the caveats of this profile is going to be like"
897920,902160," like even though it's measures multi-threaded uh execution within multi-threaded environment"
902160,907040," it's better not to use this thing right and making such multi-threaded uh"
907040,912160," profiler is probably hell with synchronization and so yeah"
912160,920320," uh so 256 clocks is enough for everyone in fact uh yes"
924960,931120," so there we go and we need to keep track of the amount of clocks so this is going to be clock"
931120,935280," count initially we have a zero of them all right"
935280,942720," so maybe i wish the names were not as"
942720,952560," big i don't like that this is a such a long name i would like to call it cs but cs is too short clock stack"
952560,959600," is too long and cs is too short i guess i'll have to suffer okay so that sounds like a plan let's just"
959600,966640," keep suffering uh okay so i forgot the semicolon and uh in here when i get this entire thing"
970160,980720," so maybe i can do something like clock uh see and it's going to be equal to clock uh stack uh clock"
980720,987120," count plus plus there we go uh and this is where we're going to actually store everything so this is"
987120,991920," going to be the begin and then within that thing we're also going to store the label there we go"
992880,1001040," uh cool so that seems to be working that seems to be twerking so clock um incompatible yeah this has"
1001040,1009680," to be a pointer there we go so and once we uh reach the end i don't think i want to call it tp and there"
1009680,1016000," is no reason to call it like that so let's just call it end and in here i'll also have to get the"
1016800,1025440," the previous clock okay so this is going to be clock uh stack uh clock stack count but this time"
1025440,1035680," it's going to be something like this there we go um all right and in here if we encounter the begin"
1035680,1046160," it's going to be essentially c uh begin and then here we have a c uh label and we don't have any"
1046160,1052480," boundary checks in here we don't have any boundary checks in here because this is not rust right this"
1052480,1060320," language does not automatically generate uh any uh array boundary checks for us and this is why it is"
1060320,1068400," completely unethical completely immoral to program in such a horrible horrible language you're ruining"
1068400,1073760," the internet infrastructure for everyone if you program in c and that's precisely why i'm programming"
1073760,1079200," in it so since it doesn't generate any boundary checks we have to do that ourselves so essentially"
1079200,1085920," uh what we'll have to do is do that ourselves so we need to assert that the clock start is less"
1085920,1092960," than the clock stack uh capacity right and if it's not we're gonna actually crash telling the user that"
1092960,1100000," well we you don't have enough clock capacity you don't have enough cock capacity to to"
1100000,1107440," yeah to too many cocks uh and in here we also probably want to uh do something like uh when we're"
1107440,1114880," going to assert that clock start count is actually at least greater than zero right so you're trying to end"
1114880,1120720," clock that means you have at least something in there right so uh let's try to recompile the"
1120720,1126240," entire thing and that should be working that should be twerking there we go so everything seems to be"
1126240,1133200," working and now uh i can try to do the total thing right let's try to do the total thing"
1133200,1142560," what are we profiling exactly in the multi-threaded renderer we are profiling the time so my goal is to"
1142560,1151200," actually speed up the multi-threaded cpu renderer to the point where i can use it to generate the"
1151200,1161360," animations of the tiles at 60 fps right i want this renderer to be feasible in in used in full hd 60 fps"
1161360,1167920," rendering entirely on cpu that's my goal by the way i think i didn't mention the goal right i was saying"
1167920,1173520," that we're measuring the time but i didn't actually say uh well what's going to be the goal um eventually"
1173520,1182640," i want to animate this um right so we're generating things like uh grid right and for instance i want"
1182640,1189680," to be able to animate the radius of these things uh and with multi-threaded renderer we'll be able to do"
1189680,1196000," that completely on cpu at 60 fps and i think it's already kind of feasible to do at 60 fps"
1196000,1206480," um all right so uh just a second i need to do the total right so uh so let's actually measure the"
1206480,1214880," whole thing uh so it's going to be begin uh clock um total all right so here's the total and maybe i'm"
1214880,1220160," gonna even do something like this so here's the first phase here's the second phase here's the third"
1220160,1225680," phase and i'm gonna actually end it here all right because i don't want to include the png png is not"
1225680,1231600," going to be part of the animating animated renderer right so uh let's not even include i'm gonna even"
1231600,1238160," comment it out because uh let's not measure it at all all right so let's completely remove that"
1239920,1247680," uh okay so now we have the total phase we have the atlas rendering and so on and so forth"
1247680,1259040," uh 222 so the total is already by the way it's a tile 64 by 64 um and it also renders in"
1259040,1268800," let me see well it's almost full hd actually it's not quite there yet but it's kind of close we can try"
1268800,1278160," to make it full hd um so maybe we can like print more information about the sizes and whatnot right"
1278160,1286080," so here is the tile size it's a tile size in pixels right then we can have something like grid size in"
1286080,1296160," tiles right so it's a grid size and tiles grid width uh tl grid height uh tl and also grid size in pixels"
1296160,1304480," right i think it's also quite important uh this one is going to be uh px there we go so and i just want"
1304480,1311120," to see the entire thing so let's try to make it a little bit bigger now so if the full hd"
1311120,1322480," divided by 64 right so that means the size in tiles has to be 30 right if i divide this by 64 it has to be"
1322480,1332320," around let's say 17 so that's roughly like full hd or something right so roughly full hd and uh let's"
1332320,1342640," just try to run this entire thing uh so as you can see we have uh tile size 64 by 64 pixels grid size uh 30"
1342640,1349840," by 17 tiles and so the full grid size and pixels is basically full hd and the whole thing took to render"
1349840,1356800," 11 milliseconds right 11 milliseconds so we can actually try to run several times just to like"
1356800,1364400," you know get the feel sometimes it's five milliseconds six uh up to 12 sometimes it's 28 so sometimes it could"
1364400,1373120," be very slow uh but if you take one second if you take one second and divide it by 60 so this is how"
1373120,1380480," quickly you have to generate your time your uh frame to be to go 60 frames per second you also have to take"
1380480,1387120," into account some other things like sending that thing to some sort of a texture or to like bleed it to"
1387120,1394560," the screen or something like that so um this thing your renderer i think should not go over 16 but it also"
1394560,1399520," needs to have a little bit of room for additional stuff to be displayed actually on the screen and i think"
1399520,1407440," we're quite there actually so we generated like a full hd single frame in like five to seven milliseconds"
1407440,1415680," which fits well into 16 milliseconds which is needed for you know 30 60 fps does it make sense do i have"
1415680,1423520," any flaws in my logic i think this thing is quite usable for like 60 fps full hd rendering so that means i can modify"
1423520,1430400," i can modify the atlas i can modify the atlas i can animate the atlas and regenerate the full frame from"
1430400,1440080," scratch in 60 fps so that's the idea and that's why i need the profiler because without the profiler i"
1440080,1445920," wouldn't be able to make any of these kind of decisions right i didn't even know that it would be feasible to"
1445920,1452320," do like full hd 60 fps until i started measuring the time which individual face right because there's also"
1452320,1458640," a lot of time taken into account to generate the png and i don't know how much time it takes to generate"
1458640,1465520," png and how much time it takes to do that thing so it's actually rather interesting atlas rendering is run"
1465520,1473600," only once well i mean if i want to animate for instance the radius of these blobs i'll have to"
1473600,1478640," constantly regenerate the atlas right so we'll have to constantly regenerate that atlas"
1478640,1488960," do you know about quick fix list and vim no i don't use vim i'm sorry"
1491120,1496800," uh does the rendering happen on this gpu or the cpu completely on the cpu pixel by pixel"
1496800,1502240," with four loops and stuff so we're generating everything on cpu pixel by pixel"
1502240,1509040," why not uh 144 fps it's 2021 uh that's a good question thank you for asking it"
1509040,1520000," uh so all right so i hope i explained my goals well uh so let's continue i suppose"
1521520,1527680," so by the way so the main problem with this nested profile as you can see nested profile works quite"
1527680,1535200," well um but i don't think it's precisely the sum of the previous phases right so if we take these previous"
1535200,1543920," phases uh right so and we just sum them up uh yep plus"
1543920,1555360," uh right so this is the sum of these things but we've got uh the actual total right so this is the sum"
1555360,1563680," and this is the total right so the total is a little bit bigger because it also includes additional things"
1563680,1571040," like probably the profiler itself right so because profiler needs to uh you know push something on the"
1571040,1576080," stack or something like that but i think this kind of like discrepancy is negligible so i don't think it's"
1576080,1587040," that important right so it's like basically the cost of measuring right so i remember when i was in"
1587040,1593760," university when i was in university and i went to a pretty interesting university rather so it's um"
1593760,1601280," the specialization right in that university for me was computer science but it was a computer science in"
1601280,1607760," feral mythology and because of that we had uh subjects that are related to programming and computer science"
1607760,1615280," plus everything related to feral mythology chemistry materials measuring and shape like that and we were"
1615280,1622480," talking about different models for modeling the process of um you know decarbonization of the iron"
1622480,1629600," and stuff like that and all sorts of things and specifically we had a course on um measurement"
1630160,1636640," right on how to do measurement for the process and compare it with the mathematical models that you"
1636640,1641360," have right so and one example that they suggest is that you want to measure the"
1641360,1648320," the more you measure the system right the more you screw up with the system so this is basically"
1648320,1655760," this is basically what they were trying to tell us right you have a uh process of that emits the heat"
1655760,1662160," right and you want to measure uh at different points of this uh of this process where how much heat you"
1662160,1667360," have at different points right and you put start to put uh thermometers in different points of this"
1667360,1673360," thing and the more thermometers you put the more heat those thermometers themselves actually take from"
1673360,1680480," the system and screw up with the system so it's difficult to measure the system without affecting the system"
1680480,1686000," right so you need to uh basically choose the right amount of data points to actually gather"
1686000,1691600," a useful information and not screw up the system that you're actually measuring so this is literally"
1691600,1697360," the same situation the more phases of the profiler i put in there the more i slow down the program"
1697360,1704640," it's literally the same situation actually right i want to measure it but i can't really easily measure it"
1704640,1709920," without screwing up with this thing itself and this is basically the discrepancy of me screwing it uh"
1709920,1715920," screwing this thing up right so i did some profiling but it's also slowed it down so i have to like"
1715920,1720880," choose the right amount of data points to gather useful information and not screw up too much"
1720880,1724880," so it's like a temperature right um"
1726800,1727040," so"
1727040,1736320," so you were a rust expert before rust was i think yes it's a running joke in this channel that i have"
1736320,1740320," a degree in rust yes um okay"
1740320,1751280," the more you log the more you have to do yes exactly exactly so that's basically what it is it is what it"
1751280,1757840," is it isn't what it isn't uh so apparently getting the degree in pharma methodology was kind of useful"
1757840,1764160," for software development now because now i can do these kind of comparisons right so i don't know uh"
1764160,1770560," maybe maybe this maybe it is not who knows um so the thing is um"
1772480,1781440," i cannot see um the nestiness of the uh of these phases right i cannot really tell that these uh"
1781440,1787920," phases are children of those things all right so for me there is no really a way to tell that"
1787920,1796960," so one thing we can try to do i suppose we can try to indent them right the the more these things are"
1796960,1803920," nested um the more we can indent them all right so let's try to do that"
1803920,1812080," let's actually try to do that i think it's going to be interesting uh all right so essentially when"
1812080,1817840," we're printing the entire thing right when we're printing the entire thing we can use the clock stack"
1817840,1824880," count as the padding for these things right so and more the thing the more the thing nested the"
1824880,1831200," more padding it is going to have right so i think the padding is done like this so you add this thing"
1831200,1839760," right and then uh we take the current clock stack count uh right and it accepts integer we have to"
1839760,1845760," convert it to integer it's quite important uh and then uh i'm gonna add an empty string so basically"
1845760,1853120," what it does it renders the string with a specific width right so i'm saying render a string"
1853120,1858320," with the width of the uh clock stack count but since i'm running an empty string it's going to be"
1858320,1864400," basically filled up with the spaces so i think i'm also going to uh multiply it by two so it's actually"
1864400,1870160," a single uh you know indentation level is going to be two spaces right and let's see how it's going to"
1870160,1874640," look like and uh well i mean i didn't recompile everything i have to do no build run"
1878640,1886080," and there we go so here it is uh so the total is this and these are the children uh right and maybe"
1886080,1893280," i can do some interesting things where i would say total this is rendering right and then i can include"
1893280,1901280," things like uh you know png output and the png output is not going to screw up with the total sum"
1902000,1909360," right so i think that's pretty cool right so here are the phases in here right and then this is the"
1909360,1915200," sum and this is the rest of the things right uh they are not included in the total but they're still"
1915200,1921520," there just for me to know how much time it takes to like produce the png uh frame and whatnot so that's"
1921520,1927840," that's pretty cool so now we can have nested uh nested things in here maybe we can even go even"
1927840,1937120," further and measure some things for example uh in grid rendering grid generation we generate first"
1937120,1942720," row and first column separately and then the rest of the things we can measure those as sub faces as"
1942720,1948880," well just for shits and giggles just to test our profiler right so we can do something like uh first"
1948880,1956400," top row right so then it's going to be end clock right so to be fair right now i'm sticking too many"
1956400,1962640," thermometers into my system so it's probably not going to give me that much of the useful information"
1962640,1975040," but again i'm just testing uh testing the profiler right so begin cock uh first left cool right and uh and"
1975040,1987440," so and here we're gonna have begin uh clock uh the rest of the tiles uh and then we're gonna end clock"
1987440,1998160," right so and it starts to look like immediate ui you know it's like immediate ui but immediate profiler"
1998160,2004800," because in immediate ui you also begin the menu then begin the item of menu and so on and so forth and you"
2004800,2011440," you have a similar situation like begin clock and clock and oh then you you gather the summary or"
2011440,2017680," something like that right let's try to run this entire thing and let's see if it's gonna do anything"
2017680,2024000," okay so uh yes we have atlas rendering oh and this one is actually kind of"
2025360,2034480," so the problem with this thing is that it's upside down you see so this rendering encompasses like all"
2034480,2040400," of these phases and now you see atlas rendering and you would expect that these are the sub phases of"
2040400,2048320," the atlas rendering but no it is not actually these are sub phases of this one so it's inverted upside down"
2048320,2056080," so it's not particularly that convenient it would be kind of cool it would be kind of cool if we could"
2056080,2064560," invert them but we can't invert them immediately you know since we are spitting out right one of the"
2064560,2071200," things we're doing here we speed out the measurements immediately after end clock so there's literally no way"
2071200,2079200," for us to actually in like inverted upside down so what i'm thinking is that maybe in in end clock"
2079200,2085120," instead of spitting it out immediately we could collect it into some sort of like a summary"
2086160,2097200," right into some sort of summary and have um like a special function uh called print summary that will"
2097200,2103360," then print whatever data it collected through the measurements right so begin clock and end clock they"
2103360,2110160," don't print anything they only collect the data into the summary and then you at the end of all of the"
2110160,2117360," measurements you say print summary and it just dumps a nice table uh with nested sections and stuff like"
2117360,2123360," that and tells you uh you know what's going on in there and it actually inverted right it's not upside"
2123360,2128480," down so it should be readable does it sound good i think it sounds actually pretty good we can even"
2128480,2133360," render it as like a table of content in books and stuff like that if you know what i'm talking about"
2133920,2140640," so um so um so the the recent one that i worked with is i think x sleep manual right so this is the first"
2140640,2149440," thing that came to uh to my head right so here's the pdf uh right so where is the table of content"
2149440,2159760," uh i remember where was the table of content yeah so we can probably uh render the summary as these"
2159760,2165040," chapters because you can clearly see that they're nested then we can pad it with uh some sort of dots"
2165040,2170640," and the measurement could be like here so we could do something like this right so that would be kind"
2170640,2175520," of nice with this thing so this is basically what i have in my head right now and i kind of want to"
2175520,2189760," have that um so yes how much of the difference would it make to run this code on the gpu i have no idea"
2189760,2196080," because i haven't run this code on gpu yet but i presume it's going to be several magnitudes faster"
2196080,2202880," uh but the fact that i know it's going to be several magnitudes faster actually makes it kind of"
2202880,2212400," not interesting for me right so uh does it make any sense because the fact that i know yes it's going"
2212400,2218080," to be way faster than it is on cpu i already know that i already know that so i don't really have to"
2218080,2225600," do that but what's more interesting can i make it fast enough to render at 60 fps full hd on cpu"
2225600,2231200," and that is what i don't know and that's what makes it interesting for me right i know it's going to be"
2231200,2238080," fast on gpu like no doubt people do insane on gpu gpus are freaking fast i know that there's no mystery"
2238080,2247440," in here but on cpu hmm can we make it as fast as possible on cpu so we can render it at 60 fps"
2247440,2252480," like without opengl and shit like that that's what's interesting because i don't know the answer so we're"
2252480,2259680," just exploring so there's something to explore see there's a mist there's adventure awaiting us ahead"
2259680,2268560," um on an old as dual core even yeah but i don't really have a dual s cpu"
2271440,2273920," yeah we need a dual s cpu okay so"
2273920,2277600," old core dual s"
2277600,2281920," what is it so funny"
2281920,2285760," all right um"
2285760,2296720," so that's that's the idea essentially um okay um yeah i want to actually invert the entire thing"
2297280,2307600," uh so to invert the entire thing i probably need to have uh a summary right so i need a summary entry"
2307600,2316400," uh because i might try to actually show what how i want this entire thing to look like"
2317280,2323600," right um right um so i'll need to copy paste this entire thing uh huh so"
2323600,2335840," oh man uh this is completely unreadable for sure because it's upside down but not really it is not"
2335840,2343520," really upside down so if you just put this thing up there it's already more correct than it was so"
2343520,2348560," it's not entirely upside down and to make it fully correct we just need to take the last thing and"
2348560,2354320," put it here and now it is fully correct i didn't invert everything it's it's partially inverted which"
2354320,2360880," makes it even more difficult to read right uh it makes it even more difficult to read so if i just"
2360880,2368480," invert it like that it's already way more readable than it would than it was so i probably don't even need"
2368480,2374320," too much too much in here uh but maybe some of the things could be done in here i could bring the names"
2374320,2382000," to uh like swap out the names uh let's actually do that super quick i suppose um"
2382000,2392640," so if i go to the profiler first thing i'm gonna do i'm gonna just do uh something like this"
2393840,2396400," uh i'm just a bunch of things like so"
2396400,2409360," well well i suppose it's not gonna be oh yeah i i see what i needed to actually invert i need to"
2409360,2420160," invert elapsed and label right so and then i can just take that and then uh like this i think that should"
2420160,2426960," give me roughly the thing i wanted to have so we don't have a summary anymore uh all right and can"
2426960,2434080," i recompile the entire thing come on man all right so this is roughly what i wanted to have so now let's"
2434080,2438640," bring it to the to the view right"
2441040,2450400," this is this is so trippy uh all right grid generation there we go and then i want all of"
2450400,2457520," these things to be aligned accordingly somehow right so"
2462160,2464880," so all of that has to be aligned"
2464880,2482240," yeah this is roughly the output i want right you have the whole rendering and it's super easy to skip"
2482240,2488960," to the next step atlas png output and you can see the atlas png output is as fast as the whole rendering"
2488960,2493680," and then grid png output and it's even slower because the grid is huge and you can easily just"
2493680,2498800," ignore this thing then if you want to split the rendering here is three phases you can clearly see"
2498800,2503200," them atlas rendering grid generation and grid rendering and within grid generation you can have"
2503200,2510880," like this small thing is in here so there is like a split uh so this is the goal right and again with the"
2510880,2514880," approach we have the approach we have right now where we speed out things immediately it is not"
2514880,2520720," particularly feasible so we need to first collect this information into some sort of a buffer and have a"
2520720,2525040," separate function that uh you know produces this nice output"
2525040,2536240," time to change units why the units are nice we have seconds and it goes up to nanoseconds i think it's fine"
2536960,2543200," so because the rendering is so fast we need a resolution of microseconds and nine seconds to be"
2543200,2551040," fair i don't really need nanoseconds microseconds is fine i suppose i think microseconds is fine"
2551040,2554640," um each core is called the cheek"
2557680,2561600," uh sex yeah there's no reason to change sex sex is fine"
2561600,2574000," sex is a good resolution okay so um how are we gonna do that so in a profiler uh we're going to have um"
2574000,2585360," resolution isn't the issue but showing ms instead of s would probably be more readable i don't know"
2586320,2592160," so i prefer my bike shirts to be red i think it's a it's a pretty good bright and cheerful color"
2592160,2599520," so uh we need to introduce something called the summary right and basically i would presume that"
2599520,2607440," this each section right each section is going to be the summary so this is the summary and within that"
2607440,2614240," summary we have other summaries so now we have a tree structure right we have a tree you know what i'm"
2614240,2618480," talking about you know what i'm talking about and we're gonna actually store a label so here is the"
2618480,2625760," label of the summary and within that summary we'll also have elapsed uh and there we go but on top of"
2625760,2635280," that on top of that we also have children so that means we're going into a very weird territory of having"
2635280,2641760," something like summary children right because you can have a variable length you can you can have several"
2641760,2647040," children so that means you need some sort of an array right and then you have like a children count"
2647040,2652880," right so that means you need like a global dynamic array right so that means you need some sort of"
2652880,2659280," allocation and so on and so forth and this is in a profiler where you're supposed to measure performance"
2659280,2665600," and this doesn't really sound right for the performance so we need to like mess with the trees"
2667360,2673120," but at the same time we don't really want to mess with memory too much i don't want to write my own"
2673120,2677840," memory allocator and shit like like that and i certainly don't want to use malloc and free because"
2677840,2684400," they're slow as fuck uh so i'm pretty sure one single malloc could be as slow as rendering the whole"
2684400,2691680," fucking frame it's actually a pretty good question so how slow is a single malloc right so if i just perform"
2691680,2700800," uh if i just perform something like uh right so it's gonna be main two right"
2700800,2712480," uh and i'm gonna perform several of these things uh 10 i at least 10 of them so it's gonna begin clock"
2713440,2721280," uh malloc free right so this is malloc for free then we end this the entire thing and i just do void"
2721280,2729120," ptr malloc right and then i free that ptr how much time will it take i wonder is it gonna be fast or is"
2729120,2735680," it gonna be slow because i never actually did this kind of measurements so i'm really curious uh so okay"
2735680,2742320," so we don't have this entire thing in here and uh so what it complains about we don't have oh yeah so"
2742320,2748160," let's actually allocate how much do we want to allocate uh i think we could allocate kilobytes"
2748160,2751200," megabytes"
2751200,2760560," 69 megabytes okay so let's try to allocate 69 megabytes and free 69 megabytes"
2764240,2773680," all right all right and something went wrong here uh in function ld undefined reference to begin and begin and"
2773680,2785600," nice function begin and nice function bro okay come on uh and it feels like"
2787760,2792800," uh this is uh this is where i have to do that"
2792800,2796400," okay"
2796400,2804320," it's only need to be done 10 times it's actually relatively fast it's actually relatively fast"
2804320,2808800," but if you do this kind of thing several times per second right"
2810240,2818640," uh right so if i all right if i do a lot of allocations like 100 allocations and the allocations"
2818640,2824160," how much time it will take it's kind of interesting i never actually measured how slow malicon 3 are"
2824160,2832720," they're pretty pretty fast but to be fair i'm well i'm just allocating and delegating the same chunk of"
2832720,2838160," memory so it probably optimized something and now it allocates this one is way faster i don't know i"
2838160,2844480," don't think it's particularly useful a way of measuring the thing so but that's not the point of today's stream anyway"
2849040,2854320," so yeah measuring this kind of stuff performance is complicated because the allocator can be like a different thing"
2854320,2857360," hmm"
2857360,2870320," all right so what i want to do"
2870320,2872080," what i want to do"
2872080,2876720," uh we i want to um actually"
2879040,2886160," have the summary as an array somewhere right so it's going to be summary maybe in this thing should"
2886160,2891120," be called something like entry right so we're going to call it entry uh and"
2891120,2899920," yeah let's call summary and then we're going to have something like summary um stack maybe"
2899920,2907040," maybe just summary as well and how much we want to have a capacity in here so do we want to have a"
2907040,2913840," different capacity than this stack uh to be fair right since it's a tree"
2913840,2924480," um since it's a tree let me let me actually show you since it's a tree let's wait for my paint"
2924480,2934320," uh and there you go so you have something like this so this is the full section right so then you have a couple"
2934320,2941760," of subsections maybe three subsections and maybe you have two subsections in here right and maybe one"
2941760,2950480," subsection in here so you have a tree like that so how big of a stack do you need to safely traverse this"
2950480,2959040," tree well the biggest stack you'll need is the biggest path to the leaf so one uh two three so we have"
2959040,2965200," four elements in here so we need stack at least four elements but the summary is supposed to store each"
2965200,2974160," an individual node in here so you need a memory to store one two three four five six seven uh entries so"
2974160,2982000," the stack could be actually smaller than the memory to store the entire tree so it's a kind of like a"
2982000,2989840," different thing so we can't use the same number for the stack capacity and for the summary capacity"
2989840,2994400," summary capacity has to be bigger how much bigger that's a good question"
3000720,3010640," so essentially uh what i want to do um i want to store the children of the summary as some sort of"
3010640,3021120," like offsets within the summary itself right so uh that way i'm like i store the entire summary linearly"
3021120,3028320," right i store it linearly and you can see that visually in here this entire thing is already linear right so"
3028320,3033680," one two three four five six seven eight nine and so on and so forth and i can just like literally"
3033680,3041120," store them in memory like that and then i need some sort of indication that for example this amount of"
3041120,3051200," elements after this one this all of this in here is children of the rendering so one way i see that"
3051200,3063120," is to actually instead of offsets store the size of the section right so uh something like size right"
3063120,3070720," uh let me let oh my god where is the there we go so for instance here how many lines do we have we have"
3070720,3078240," seven lines so the size of this section is seven so if you know the the index of that section you know"
3078240,3084880," that if you add the seven to that thing you would skip to the next section all right so then within"
3084880,3092960," this thing um the size of this section is going to be one right uh the size of this section is going to"
3092960,3099120," be four as you can see there's four lines in here so this is four the sizes of these sections are ones"
3099680,3109680," right uh so and the size of this section is also one and this one is also one also one there we go and"
3109680,3116560," it makes it super easy for you to actually iterate through that tree so this is how i imagine we can do"
3116560,3126720," that right so i'm starting um rendering this entire section the next role after that section is the child then"
3126720,3132800," this is how much i have to add to get to the next child this is how much i have to add to get to the"
3132800,3138640," next child and as you can see this kind of approach allows me to not only dfs the tree"
3138640,3143840," right dfs in the tree is actually iterating top to bottom right so you just iterate this entire thing"
3143840,3150640," top to bottom and you already dfs in the tree but bfs in the tree is going to be just basically jumping by"
3150640,3157840," children like that so it allows you to store everything linearly easily dfs and bfs so i never"
3157840,3163440," actually use this kind of approach in uh storing the trees and i'm actually really curious how we can do"
3163440,3168080," that uh golden rage thank you so much for twitch prime subscription thank you thank you thank you and"
3168080,3173360," welcome to our epic section club i don't know what's that supposed to mean but thank you um"
3173360,3185520," all right so uh we can try to does it sound reasonable this is actually a very interesting"
3185520,3193280," approach i think right because you can store like a pretty branchy tree linearly in your memory"
3194000,3201280," that's actually super cool right so because yeah you have a variable amount of branches in here and"
3201280,3205760," we're not doing any memory location or anything like that we're just like stacking everything like on"
3205760,3210800," top and we're just maintaining the sizes of the section and the sizes of the sections actually tells"
3210800,3217040," us how nested this entire structure is you see what i'm talking about so that would be kind of cool"
3217040,3219280," no the way and this thing"
3219280,3229280," a graph theory may uh you can tell you the answer what is graph theory i never heard of it"
3229280,3231920," never heard of graph theory"
3231920,3239920," all right so um let's take a look at this entire stuff"
3242080,3248560," yep uh you'll have to build it depth wise to avoid having to shuffle entries around which is probably"
3248560,3256400," fine i'm not sure what you mean depth wise depth wise probably i think to understand how exactly we're"
3256400,3259920," going to approach that we need to actually start implementing because right now this is only"
3259920,3265520," like a high level view on the approach so the more we go into details the more it will be clear how to"
3265520,3271600," turn out into my net should the count include itself it does include itself isn't it so"
3271600,3275040," seven"
3275040,3284800," has seven lines it's already includes itself doesn't it maybe i made a mistake somewhere it looks like it"
3284800,3296640," in good itself no graph slew emote i'm never heard of this emote i have no idea what it is anyway so uh"
3296640,3302880," let's go ahead and uh implement all that so as i already said i think i'm uh the summary capacity has"
3302880,3310080," to be slightly different uh right so i'm gonna put this thing in here uh summary cap and let's make"
3310080,3316400," like a thousand of them right so it's way bigger than the whole stack all right and it's gonna be"
3316400,3325040," uh hector hsc thank you so much for 100 bits really appreciate it all right so and maybe we can also have"
3325040,3334080," something like summary count so how many entries in the summary do we have i i don't know i kind of feel"
3334080,3343280," like i want to rename this to entry um let's rename it to entry i don't know so"
3343280,3352720," yeah summary is a collection of entries right summary is a collection of entries"
3352720,3358160," all right so how are we going to be approaching all of that um so"
3362400,3367520," uh i think i want to make a small break and refill my cup of tea right because i'm already streaming"
3367520,3374880," for like one hour and i ran out of tea uh and uh after the break we're going to see how we can"
3374880,3383280," implement this entire structure all right let's go ahead and implement that uh so"
3383280,3392160," uh here's the summary and summary count and so on and so forth so what i'm thinking is that"
3392160,3400640," when i start the clock right so here is my clock and i'm adding that clock in there um so i think"
3400640,3414640," after i add the clock after i add the clock i need to be able to refer back to the summary so let me"
3414640,3421840," let me think a little bit okay i'm ending the rendering that's fine i'm uh i don't know the size"
3421840,3426800," of the rendering yet here's the interesting thing i don't know the size of the rendering yet so i'm"
3426800,3432560," going to set it to zero i'm adding the atlas rendering and then i finishing it and i know its"
3432560,3441360," size so and after i pop in off atlas rendering from the stack i need to go back to rendering and increment"
3441360,3448560," its size by the size of this section right so then after i finished with this section i also need to be able to"
3448560,3457520," go back uh to this section and uh also increment it so i think each individual clock each individual"
3457520,3465360," current clock should also store the pointer to the entry it is associated with so when the clock is"
3465360,3473840," popped uh we can update its size you know what i'm talking about uh pop the clock uh pop the clock"
3474880,3479440," so and how are we gonna start i think we're gonna start as an index right and usually when you store"
3479440,3486720," uh reference to something as an index use use uh ptr div um underscore t so have you heard about this type"
3487440,3495680," in c it's actually very interesting that um someone made tetris and bias which is amazing uh"
3495680,3500800," uh have you heard about"
3503040,3503760," this project"
3503760,3514720," so if anyone is interested uh i develop these things it's a it's actually break out like game"
3514720,3519360," in assembly that works without any operating system and it's built on top of bias"
3519360,3525920," so this thing works on top of bias without any operating system and we wrote this thing on stream"
3526560,3535520," um so yeah maybe it's not as amazing as tetris but it also fits into 512 bytes of bootloader so it doesn't"
3535520,3542400," have any additional stuff so uh and i'm gonna put that in the description just in case anyone is interested"
3543360,3552480," uh so pin poke right so maybe i'm gonna uh yeah i'm gonna put this as a description"
3552480,3565040," there we go anyways um so in the profiler in the profiler yeah i was about to explain what is a ptr diff"
3565600,3572720," right it's a point uh it's a index in an array but it's basically a difference between the pointers"
3572720,3577840," so it has a semantical meaning of of a difference between the pointers and to be fair the difference"
3577840,3583680," between pointers is a essentially an index in an array if you think about it right and that's why we have"
3583680,3594080," this type um so and uh we're gonna actually call it an entry so it refers to the entry"
3595600,3606320," um to be fair to be fair chat since we're never reallocating the uh the summary maybe it would make"
3606320,3613280," sense to actually store it as a pointer to the entry right because we're never reallocating it anyway"
3613280,3620720," right so maybe it would make sense to do it like that um yeah let's give it a try i think it would make"
3620720,3631600," sense uh i think it would make sense uh so now here is the clock and we also need to have an entry uh"
3631600,3644000," entry uh summary uh summary count right so here's a summary count uh and we take the the pointer in here"
3644000,3653280," right uh so we get the time we get the label and we also uh assigning the entry and entry is basically e"
3653280,3660960," uh so within the e i think uh we also need to do the association right so it's going to be e"
3660960,3666160," uh label is also going to be equal to the label right here is the label"
3670160,3679200," so and because of that since the label is always stored either in in an entry we probably never have"
3679200,3681200," to even store it in the clock"
3681200,3693440," that is very interesting think about it right so entry stores the label and styles and stuff like that"
3693440,3699920," and the clock only starts where when it was uh started to running and then we refer back to entry"
3699920,3705280," and this is if the clock needs uh like you know label it can just do that in from one level of indirection"
3705280,3712880," so that's pretty cool okay so that simplifies everything so we have label the size originally"
3712880,3720400," well size technically since it includes the uh the entry itself size has to be one right so size has to be"
3720400,3726160," one and elapsed uh yeah elapsed i'm gonna you know the fuck is that"
3726160,3735440," elapsed is gonna be a zero right so we're gonna initialize the the whole entry in here then uh right"
3735440,3740080," we're gonna get the clock we're gonna get its uh time and we're also gonna associate it with this"
3740080,3745520," specific entry there we go uh all right so when i end the clock"
3748880,3754000," when i end the clock uh i need to go back"
3754000,3758400," this one is actually very interesting"
3758400,3766320," so let's imagine"
3766320,3777360," let's imagine that we're ending the uh grid generation clock right we know its size we know its stuff and so"
3777360,3780240," so on and so forth right um"
3780240,3782640," i'm"
3782640,3794480," basically removing that clock from here then uh get the end time compute the elapsed"
3794480,3799440," right and funny enough i have to assign the elapsed to the clock"
3799440,3806800," entry there we go so i go into the clock i go into its entry and i'm assigning its elapsed and i don't really"
3806800,3810320," need to do anything else and on top of that um"
3810320,3816320," now i have to go to the previous"
3816320,3819600," entry right i have to go to the previous entry"
3819600,3825600," of the previous clock and update its size i need to add the size of this thing"
3825600,3830960," to that one but what's interesting is that sometimes you may not have the previous entry"
3830960,3836080," right so in case of the top level entry you just don't have a previous one so we have to first"
3836080,3843520," check if you have a previous entry right so if um so summary"
3843520,3853840," oh boy so it actually if you have a previous clock if the clock uh clock stack count is greater than zero"
3853840,3861680," right if something like this is greater than zero uh we can take the previous clock"
3861680,3867440," right so this is going to be pc right so previous clock we don't have to do minus minus but we have"
3867440,3874480," to do something like this right so within the previous clock we take the its entry and we"
3874480,3882560," take its size and we adding the size of the current clock entry size there we go so this is how we are"
3882560,3891280," accumulating the uh the sizes so if it's top level entry uh nothing needs to be done in here i presume so"
3891280,3898800," this is basically the entire thing this is basically this the entire thing uh and what's funny uh one in"
3898800,3907280," here is that we don't even print anything so that means the um the io is not even included in any"
3907280,3911600," measurements so yeah this is actually one of the cool things so the the problem with the previous"
3911600,3920160," profiler is that so it would do an io call in and clock and because of that it will actually include"
3920160,3925520," the io into the measurement so now we don't have any io we just work directly with the memory and these"
3925520,3929760," chunks of memory probably going to be in a cache so it's going to be super fast so we're not screwing"
3929760,3935760," up with the measurements too much if you know what i'm talking about so yeah i think that's that's"
3935760,3943360," okay and after we collected everything you're supposed to call print summary to print the summary so"
3943360,3949120," for now i'm going to just print the summary as as it is right so i'm going to just go through"
3949120,3954800," the entire summary count right so this is the entire summary count do we increment the summary count no"
3954800,3962320," we don't we forgot about that that's very important you have to increment it uh so then i'm going to"
3962320,3968720," just print so we're actually printing it to a specific output so it's going to be stream uh and in here we're"
3968720,3978160," we're going to have the label then uh something like this and it's going to be lf uh so i think it's like"
3978160,3984960," nine uh and there we go we're not going to have any indentation for now right so and in an entry so it's"
3984960,3993920," going to be summary i uh label right so this is the label and then we're also going to have a summary uh elapsed"
3993920,3999040," and on top of that i might as well also print the size of that section right so let's actually print"
3999040,4008880," the size of that section i think it's going to be fine uh i uh size and that should be it okay let's"
4008880,4014640," try to compile the entire thing and see if it compiles if we didn't make any mistakes so far"
4014640,4019280," first try first try how about that so now"
4021280,4030880," uh so after we're done with everything i'm going to do print uh summary and we're going to print that"
4030880,4039120," into the std out you know what i'm thinking actually after you printed summary after you printed summary"
4039120,4045360," it would make sense to clean the summary meaning that we can set the summary count to zero and that"
4045360,4052160," will clean the entire summary so basically you can collect the profiler information dump the summary"
4052160,4056560," and then you can start over with the absolutely clean summary every time you dump it it just cleans"
4056560,4064000," it up automatically um so yeah that's that's pretty cool i think i think is it cool i think i think it is"
4064000,4072640," um all right so maybe because of that it should be something like dump summary um right so dump summary"
4072640,4080800," and i almost forgot that uh you should be able to um to disable the whole profiler so and when you"
4080800,4087200," disable the whole profile we need to create like a dummy summary uh in here right so it will basically"
4087200,4094160," strip off all of the begin clock and clock and dump summary um dump summary calls right so in"
4094160,4101920," the entire thing is going to disappear from the entire code base all right so let me see if it's going"
4101920,4111120," gonna work is it gonna work is it gonna work is it gonna work now yo okay it did the thing okay so you"
4111120,4114560," have i think wait a second"
4114560,4124880," well it's literally like this so it's seven one four one i first tried this almost uh"
4125680,4132000," yeah so okay so it's seven that means if you go seven yeah there we go here is another one and here"
4132000,4139200," is separate things and then this is one there's then four yeah there we go this the sizes are actually"
4139200,4146560," on point look at that the sizes are on point um it's actually super cool so the idea that means the idea"
4146560,4154400," works works actually so we can store the tree as basically the sizes of the entry right uh this is"
4154400,4161360," actually pretty cool idea so essentially a single entry contains the size of itself right so that means"
4161360,4168720," uh seven means that the entry is this whole thing that includes seven lines that's a pretty cool way of"
4168720,4177440," starting tree is there any name for this trick because i literally come up with that trick myself"
4177440,4182400," because i was thinking how can you implement this kind of thing in a concise way which doesn't allocate"
4182400,4188000," too much memory and so on and so forth is there any name for this kind of trees or i don't know there"
4188000,4194640," must be because it's such a like i don't see any other idea on how to store this kind of thing uh cleanly i mean"
4194640,4202240," so it's a pretty clean way to store like a tree of entries i think"
4202240,4209520," so the reason i'm asking i know nothing about programming so maybe somebody who knows programming"
4209520,4213440," better than me can tell me what what what this thing is usually called but i don't know"
4214880,4220640," i don't really know oh and what's cool is that uh we are printing the summary when we're already done"
4220640,4228000," with the measurements right uh that means we can spend as time as much time as we want to make it"
4228000,4235840," pretty we can iterate it several times trying to find the uh the biggest width in here right so while"
4235840,4242640," knowing the biggest width will know how much we have to indent and so on and so forth when we dumping the"
4242640,4248400," uh the thing right uh we don't really care about performance anymore we can spend as much time as"
4248400,4255360," we want to prettify this entire thing because the data is already collected uh the data is already"
4255360,4266000," collected all right so the first thing uh we need to do is uh also put sex in here so sex is very"
4266000,4271040," important because without the sex we don't know what are the measure units right so that's why it is"
4271040,4277760," important uh okay so how can we indent those things that's a good question um"
4277760,4287840," like my boss is saying sometimes if you take too long should we hire some programmer to do"
4287840,4295120," that's a low key role thank you dips and gladi i think i'm gonna remember that so the next time i'm"
4295120,4299840," gonna be somebody's boss i'll use that on them this sounds pretty effective"
4299840,4308160," almost a full sex right almost full sex all right"
4308160,4317680," so i think if we want to do the indentations and we have to iterate not linearly"
4318640,4323920," right yeah we have to iterate not linearly we have to iterate it with some sort of like a pointer and"
4323920,4331520," treat that as some sort of a dfs maybe we even have to maintain the stack ourselves"
4334320,4339840," but if we don't want to maintain the stack ourselves we can usually probably we can probably use the"
4339840,4344640," recursion why not we can probably use the recursion to iterate this tree"
4358080,4370240," yep we can use the recursion uh so here is the thing here is the thing uh ptr diff t uh and this is going"
4370240,4378080," to be our entry so the entry is zero and we're doing all that while entry is less than the summary uh"
4378080,4386000," count right oh then the summary count and then we're going to have something like dump entry right and you"
4386000,4395120," provide the entry and then we can also provide the level uh at which uh we're printing everything so"
4395120,4405200," and what's cool in here is that uh the dump entry is a recursive function right it takes ptr diff uh t so"
4405200,4411760," here's the entry and also it accepts the level right it accepts the level um"
4415680,4426640," so that means what do we do we need to know the size of the entry so we're gonna have a size"
4426640,4438480," and we're gonna take that size uh from the entry like this right and while size is greater than zero"
4438480,4465920," what we're gonna do so this is the this is rather the root entry right this is the root entry then we're"
4465920,4474880," we're gonna have something like uh child entry which is basically root plus one so that's the thing"
4474880,4486560," about it uh and uh yeah here is the size then we do dump entry child at the level plus one so to go to the"
4486560,4495600," next child to go to the next child to go to the next child we have to do child plus summary child size and we also"
4495600,4505440," have to uh subtract that child size from the the whole size so this is the way we step through all of the"
4505440,4513040," children right so this is how we step through all the children uh and that should be it that should be it"
4513040,4519760," and um yeah well as we we also need to print the label right so we also need to print the label how"
4519760,4525920," we're gonna be printing the label so um oh yeah this entire thing should probably accept the stream there"
4525920,4540400," we go um so and because of that this is the stream all right there we go uh uh f printf stream so we need to"
4540400,4549440," pad everything in here then we have to provide the label then something like this and then uh you know lf uh do we need the size"
4549440,4552480," size in here i don't think we need the size in here so this is going to be just a new line"
4552480,4559280," okay so the level is going to be multiplied by two but also converted to integer and this is going to"
4559280,4570080," be empty think then um we have to do summary root um label all right so this is the label and then summary"
4570720,4580640," uh root elapsed elapsed elapsed there we go so that's basically it uh and let's try to compile the"
4580640,4586080," entire thing and see if it's going to compile it does not compile because it doesn't know about ptr diff"
4586080,4595360," this is because it's located in std depth okay so let's include std depth dot h uh all right so what do we have"
4595360,4602480," in here this is not a pointer of course uh silly me this is not a pointer uh all right so what do we"
4602480,4608800," have in here this is the child and the uh yeah you have to provide the stream so do we have anything else"
4608800,4616880," this is not a pointer yet again let's remove that and i think it kind of worked so summary count um"
4617440,4625040," yeah they're unsigned but i know for sure that entry is not going to be um oh okay this one is"
4625040,4637120," interesting actually um so i need to sort of repeat this same process in here so essentially the entry is"
4637120,4644000," going to be plus summary entry the size and because of that i might as well probably call it"
4645360,4650480," yeah i think this is basically the roots we are iterating through the roots because you can have"
4650480,4656320," several of those roots right right right so that's what we're doing here all right so do we have in"
4656320,4665840," here uh a root uh so because of that i might convert it to here uh so this is the root and we compile"
4665840,4671200," everything so what we try we're trying to achieve we are trying to achieve the padding uh the corresponding"
4671200,4677360," between the uh you know parents and children so the more nested the entry the more it should have"
4677360,4683120," the padding so let's see if it's going to work now hopefully it's not going to overflow or anything or go"
4683120,4688880," into the infinite thingy well i mean it went into an infinite thingy all right so that was interesting um"
4688880,4698560," okay so try to do the rendering so then it went into the atlas rendering and it didn't really stop properly"
4698560,4709120," unfortunately i don't know why um so i suppose maybe the sizes went over the chart yeah i think there's"
4709120,4719120," something wrong with the sizes there there is something wrong with the sizes so one of the things we can try to do"
4720560,4731520," is actually uh never do any recursion on the entries so let's just check if we're doing the root uh"
4731520,4736480," iteration correctly if we're iterating through the roots correctly so what we uh try to do we're going"
4736480,4743040," to try to iterate through this this and this so if i don't do any recursion in here what you're supposed"
4743040,4749600," to see in here is just three entries here rendering uh atlas png output and grid png output so this is the"
4749600,4755680," only thing i supposed to see if i did everything correctly let's see uh all right all right all right is it doing"
4755680,4763600," things okay so i have rendering atlas and png output as as already mentioned everything is okay in here"
4764160,4771680," don't see any problems okay so that means the bug is uh not in this function it's somewhere here all right"
4771680,4778480," so here's the root um we take the size of the root so it's supposed to be something like this"
4779600,4787920," and uh interestingly enough then i switch to the next child oh i see what's wrong in here so the size"
4787920,4798000," of the entry also includes itself right it also includes itself so that means the whole size should be"
4798000,4808000," minus one right so then while we still have something in here right uh well still have something in here"
4808000,4815200," we print that child then we uh jump to the next child and decrement the size of the child so that should now work"
4815200,4820320," right uh and let's just try to run the entire thing and see if it's gonna do the trick"
4820320,4828000," and it did there we go so we have a proper indentation when it comes to rendering but i don't see any sex"
4828000,4832400," oh because i forgot to put it the second time every time"
4833120,4841440," i uh write this print app i always forget about this sex don't let me forget about it don't let me"
4841440,4845680," forget about it it's very important because uh without it we don't even know what are the measure"
4845680,4852160," means you know what i'm talking about okay so here is the proper indentation right so the whole section"
4852160,4860000," is rendering then the next one and the next one and yeah we have a nested structure chat chat isn't that"
4860000,4868800," cool we have a nested structure that is stored in a linear array right without any anything so a"
4868800,4876480," naive way to store such a structure would be to have dynamic arrays like uh pointers to the beginning the"
4876480,4882480," sizes or anything like that here we have just a linear array of entries and the size of the section of the"
4882480,4889760," entries and that is already enough to store this tree in a very clean way and very efficiently without"
4889760,4894720," allocations or anything like that it's just like yeah this is how we store the tree isn't it cool i think"
4894720,4900640," it's pretty pretty pretty cool i really like that"
4900640,4913600," um how this i have no idea i i just came up with it myself and i asked the chat does anyone know how"
4913600,4920000," this technique is called do we have any professional uh you know computer scientists that know how this"
4920000,4925680," representation of a tree is called uh does anyone know um because i personally don't know it's just"
4925680,4934080," like this is the only way i see to keep it like clean if you know what i mean um so i don't know so i'm"
4934080,4938960," still waiting for somebody to tell me maybe somebody on youtube would tell me right because this entire"
4938960,4946480," thing will go to youtube so if you know the name of this technique just leave the comment and um if you"
4946480,4953520," you want to you know watch this thing in recording on youtube here is the channel right all right so now"
4953520,4962160," this is only one uh step right uh we we still want to actually prettify it even further and i want to"
4962160,4972640," sort of align everything like this so to align everything like this i must know i must know the size of a"
4974240,4982400," max of the longest line in here right once i know the size of the longest line in here i would know"
4982400,4989920," enough information to actually pad the rest of the things so to know the the length of the maximum line"
4989920,4997440," in here i'll have to do another iteration over the whole tree right i'll need to perform another iteration"
4997440,5004480," of the whole tree uh which is fine because we already gathered all of the profiling information so as i"
5004480,5012320," already said we can spend as much um you know as much time as we want to prettifying the final results"
5012320,5017040," right so it just doesn't matter right if we're going to do several iterations"
5019200,5031680," um all right so let me let me see uh so this is going to be the profiler right and uh how can we compute"
5031680,5035440," the maximum size uh so we dump in the summary"
5038720,5049120," so maybe the dump entry by the way could accept the width of the of the line right something like uh"
5049120,5058240," line width right and we could pass them that line width somewhere here so uh what would be what's"
5058240,5064880," going to be the line width uh specifically in here for instance um 25 characters maybe we could say that it's"
5064880,5069280," it's going to be it's going to be it's going to be 30 right so this is going to be the the line"
5069280,5079040," so let's actually make it to work like that um i don't remember how you do that right so you wanna"
5079040,5088640," say that your string in here uh is going to be aligned like this right it is going to be aligned like this"
5089200,5098400," uh that means i need to put the line width like that right i think that's how we want to do that"
5098400,5106960," uh okay so in the dump entry this one is a line uh line width all right so we have anything in here"
5106960,5113360," is it gonna work is it gonna work now yo no it didn't fucking work uh because it actually aligned"
5113360,5123440," everything in a different yeah it aligned everything in a different order so it's yeah i see i see what's"
5123440,5136640," going on in here um so i don't know how to use that print tab uh pad string string padding in c how to"
5136640,5144080," uh to uh to write pad the zeros using yeah yeah yeah yeah program how to write pad with not really a"
5144080,5151920," right pad um so it's more of a left pad string"
5151920,5162160," it may be helpful to know that printf does not uh does padding for you using as the formats okay so you"
5162160,5172000," can put like minus in here and it will pad it from a different side uh so if i put minus in here would"
5172000,5181840," it pad it from a different side i wonder uh holy shit it will okay that's very interesting uh but it's"
5181840,5189520," kind of didn't really do what i would expect it to do oh i know what the fuck is going on because it"
5189520,5194960," doesn't take into account into account this thing so that means what i have to do in here is i have"
5194960,5203600," to subtract uh this entire thing right so i have to subtract that uh okay i see and only then it will"
5203600,5209360," actually pad it accordingly right so let's see let's see and there we go look at that beautiful beautiful"
5209360,5215920," summary holy sh*t this is a work of art uh so"
5228960,5240000," um um hi i'm cenobite of sec a magical wizard from beyond check out my channel okay do you have a good"
5240000,5253120," channel let's see so let me take a look at your channel let's see so let me take a look at your"
5253120,5255920," channel i'm gonna review your channel"
5258720,5273360," all right so i don't see any particular monka tos sh*t in here so let's actually let's actually see"
5273360,5284560," all right so what what did you got my name is alex been interested in tech since a young age uh"
5285360,5289840," elementary school young experienced in system administration networking web programming"
5289840,5292800," focused on html js and php"
5292800,5299440," oof oof okay done an internship for nba and cisco"
5299440,5306400," uh terminating cables and setting up the endpoint devices find me on tryhackme.com"
5306400,5310720," i don't even know what the track happening but i also worked for cisco by the way but i work for cisco"
5310720,5318640," as a software engineer i actually wrote code for them so yeah uh tryhackme random rooms website and"
5318640,5327760," system pen testing um so what is it tryhackme never heard of it tryhackme uh what is this"
5328720,5340960," it's a cyber security training cyber security training okay uh people also ask is tryhackme good"
5340960,5346720," overall i enjoyed using this platform to enhance my cyber security skill it sounds like a"
5346720,5354560," you know this this ad enhance your cyber security skills with one single pill uh so"
5355360,5359920," there is cisco in russia no there's not much cisco in russia but i work remotely for them"
5359920,5363680," uh so i don't know"
5363680,5373520," you you may want to actually add more things into your channel right if you you know if you want to"
5373520,5379600," like gather more followers or something like that some panels in here that link to a profile on github"
5379600,5385600," for instance you have a tryhackme profile uh so i'm not sure if i want to go to that website so"
5385600,5392240," i'm actually kind of scared to go there because what if the hackers will hack me so there's not that"
5392240,5399040," much information in here so it's kind of you can probably follow that person they're trying really"
5399040,5406480," really hard to promote themselves but i don't know so i guess there's more things you can do to promote"
5406480,5414080," yourself rather than spamming someone's channels for instance do make something good um i don't know i"
5414080,5426160," don't know man i don't know anyways uh so let me let me see was code quality good enough in cisco of"
5426160,5436640," course not it was that's the point uh they actually paid uh quite well they paid quite well and when the"
5436640,5445520," company pays quite well their code is so and that's the reason why they pay quite well so nobody pays for"
5445520,5453280," a good code because it's easy to maintain uh so um that's kind of the point that's kind of the point"
5453760,5462000," um cyber enhancing spills yeah exactly uh anyways so do i want to actually put some dots in there"
5462000,5470320," like is there any way for me to customize how exactly uh you know ipad everything um so let's"
5470320,5485680," actually do printf uh pad string so stream formatting pad left um with zeros using printf so they already"
5485680,5493520," discussed it but um i want to do that with a specific character if you know what i'm talking about so you"
5493520,5499040," can put a specific character so this is like a okay padding uh"
5499040,5507440," oh they're just okay they're probably using like different things in here"
5507440,5514640," um you know what i'm thinking you know what i'm thinking i think i'm not gonna bother because spaces"
5514640,5523760," look all right so what do you guys think i think spaces look fine um right so they look fine i can see"
5523760,5529280," anything wrong with that so it would be even cooler to put some sort of like a total thing in here"
5530960,5541600," um begin clock uh total uh right so this is something like this and here we're gonna do"
5542400,5551360," and clock right and clock and then we dump the summary uh do we need to generate dreams here let's remember that"
5551360,5554000," all right so let's take a look so it's gonna have more information now"
5555200,5566720," uh okay uh that was really interesting but okay oh"
5566720,5574640," shit bruh why did it happen i have no idea um so let's take a look uh it actually went"
5574640,5578480," yeah it went off the charts so that's really strange"
5580800,5587120," hmm so that means there is a bug in there somewhere and i wonder why didn't we see the bug before"
5587120,5591920," uh it had more information for sure yeah that's true"
5591920,5607600," kind of kind of sus not gonna lie truly truly sus uh so let me see yet again i'm gonna disable this"
5607600,5616640," entire thing right we want to catch as many bugs as we can uh yep yep yep and it only printed the total"
5616640,5626080," right so that should be fine all right and then i do plus size and this entire thing should eventually go"
5626080,5628560," over the summary count um"
5632160,5640880," and that was fine as well so i'm not quite sure why it actually went over the roof"
5640880,5644400," no it's kind of it's kind of strange"
5644400,5653440," because now um we can also print the size of the section just in case for the uh you know for the"
5653440,5658800," for the debugging purposes uh right for the debugging purposes this is going to be something like"
5659600,5665280," summary root size of the section all right and let's just let's just go"
5665280,5676160," let's just go so there's a 10 of them right which kind of makes sense right probably does it make sense"
5682640,5691440," so let's actually go into the debugger you know what i think the time has come the time has come to go"
5691440,5694800," into the debugger waga uh debugger"
5694800,5703360," uh so this is going to be how is it called it's called wang tiles right so this is the wang tiles i'm"
5703360,5711360," going to build the gdb right it will automatically drop into the debugger then we're going to uh break"
5711360,5717920," on dump uh summary right so breaking in here we're running the entire thing so that created a bunch of"
5717920,5724800," threads and there we go we have that so if i take a look at the clocks uh actually clock stack right so"
5724800,5730240," here's a clock stack we have some in here but the clock stack count is supposed to be"
5730240,5736320," empty it's supposed to be a zero there we go so then we can have a summary count and in summary"
5736320,5744480," count we have precisely 10 of them uh all right so and if i take a look at the summary itself we have"
5744480,5750960," a lot of things in here right so here's the total rendering atlas uh here are different uh things in"
5750960,5758720," there in there in there and um everything seems to be fine all right so uh let's actually go into the"
5758720,5763840," dump entry uh i think i stepped and"
5763840,5774320," all right so uh that looks fine so here's the root uh right so then we took the size might might as well"
5774320,5783600," actually display the root then display the size and then uh display the child so child has been optimized"
5783600,5795280," the way oh uh so i wonder if that's gonna affect anything huh that is really really interesting so"
5795280,5802800," maybe it's now stored somewhere in the register or something like that but yeah huh uh okay so let's"
5802800,5809520," actually go ahead oh well i mean right now it is not optimized the way okay size is fine um"
5809520,5818800," so we dump the whole section in here so here is the rendering right and then here is the child and the size is"
5818800,5835440," so let's see if we subtract that well i already see the bug so we're supposed to be taking the size of the"
5835440,5839520," current child so but we updated the child first and then okay"
5844240,5850400," what does optimize doubt mean so the compiler can perform all sorts of optimizations on your code it"
5850400,5857360," can rearrange the code it can remove some of the variables and stuff like that uh so the whole point"
5857360,5865040," is that the compiler tries to make your program go as fast as possible uh without changing its behavior"
5865040,5870560," right and uh by rearranging the code it tries to maintain the same behavior the same outcome"
5871520,5878400," but it will go faster sometimes it would move some of the variables from the memory to a cpu register"
5878400,5882640," so it doesn't try to read and write into the memory so it's a little bit faster like that"
5882640,5886720," and since the compiler done that so for the debugger there is no information about that"
5886720,5895840," variable anymore so the debugger will tell it's optimized out uh so yeah that's basically what's"
5895840,5900640," going on uh but i found the bug by the way so it was actually a good idea to actually step through that"
5901520,5910320," uh okay because the first thing we want to do we want to subtract the size yeah so the bug was"
5910320,5915840," actually a different order of these things right so first we subtracting the size and only then we"
5915840,5919520," change in the child because after we change the child the child is going to be completely different"
5919520,5924720," so that was the bug that was essentially the bug and you have to be super super careful when you're"
5924720,5933600," working with this kind of shite right so uh you have to be super careful um so something went wrong let's"
5933600,5939120," take a look so um so probably want to remove that thing"
5939120,5950320," all right look at that so now we have a total time uh total time took 26 but it doesn't really matter"
5950320,5956240," because the only thing i care about is the rendering and the rendering in this particular case was eight"
5956240,5962800," milliseconds right it was eight milliseconds which is still less than 16 milliseconds and that's precisely"
5962800,5969040," what i want to see in here that's precisely what i want to see in here this profiler is awesome"
5969040,5971920," i'm telling you this is so awesome i really like it"
5971920,5985600," so um but the thing is uh i just guessed the line width of the entry i just guessed it i just set it"
5985600,5994000," to 30. if i set it to twice as that it's going to actually screw up everything right uh yeah so as you"
5994000,5999200," can see it doesn't work even properly so the thing i want to do now i want to do two iterations"
5999200,6005440," right so the first iteration will go through all of the entries and figure out the size of the"
6005440,6013600," maximum uh you know maximum line and uh then uh we're going to use the maximum line to render the actual thing"
6013600,6020640," png out is taking almost all of that exactly because it needs to compress the pngs and"
6020640,6026320," shit like that you see how useful it is to have this kind of thing right if i never actually wrote"
6026320,6032480," this profile i would never know how fast my renderer is and since i didn't know how fast my render is i"
6032480,6039520," won't be able to make interesting decisions like an attempt to maybe uh render this thing at 60 fps now"
6039520,6046960," i know that it fits precisely into 60 fps frame uh time frame uh and the most of the time in here is just"
6046960,6051600," saving png right and if i'm going to render that in real time i'm definitely not going to have a png in"
6051600,6057600," here so it's quite important to have that so pinch out is a single thread probably but it doesn't matter"
6057600,6065280," because png is only used to just uh tell us what the renderer did so we just want to see the result"
6065280,6070800," of the renderer and here it is right so it's not really part of the like a renderer itself it's just"
6070800,6077280," the output of the renderer right so we don't really need to speed it up right it's just a debug"
6077280,6083600," information right the png dumping is just like a debug right so that's why the performance of this"
6083600,6090880," entire thing doesn't really matter all right and so also disk io is very slow so but just to emphasize"
6090880,6096480," that it takes a lot of time i just put it into the measurement anyway so but now i can just skip all of"
6096480,6104080," that and see what's the rendering rendering is actually super fast uh relatively fast um actually"
6104080,6109920," the smaller you make the uh the tiles and stuff like that the faster it is going it's going to be"
6109920,6119040," right if you have like very small tiles 16 by 16 and the grid is just five by five right"
6119920,6125440," it's going to be even faster so the rendering is probably going to be yeah one millisecond look at"
6125440,6132560," that so but the image it's rendering is actually so yeah that that's the final image we're rendering"
6132560,6142320," look at that so it rendered this this final image in one millisecond super fast uh right so"
6142320,6147840," well it's still well i mean here's the rendering is this so we have to look at the rendering"
6148480,6155760," uh so we definitely can do that at 60 fps sometimes it even below one millisecond look at that sometimes"
6155760,6161200," it even below and by the way so we can remove probably this thing like first top row is not"
6161200,6168160," really that that useful i just put it in here just to you know um test the profiler or something like"
6169840,6177600," brand that's right that's a very cool thing i really like that it's very useful"
6177600,6190560," it would be nice if it's sorted in desk time uh it's sorted in execution time right so"
6190560,6197760," yeah so first we executed the rendering then atlas png and then uh grid png out"
6198400,6204560," in my case i kind of want to see them in the order of execution right because that's you can go top"
6204560,6212720," down and this is exactly how it was executed in here right so then you can see what parts do you want to"
6212720,6221840," optimize the fastest part of the rendering by the way is grid generation so it's like very very fast oh"
6223040,6228800," grid rendering here is also fast by the way so this is uh let's go back to uh you know full hd"
6228800,6231760," right"
6231760,6241200," okay so in full hd uh it takes a little bit more time than usual yeah"
6241200,6248320," uh but i think we can still try to optimize also keep in mind that i'm streaming when i'm not streaming it's"
6248320,6256320," actually way faster again so i need to finish the profiling uh pretty fine because um we don't"
6256320,6261920," calculate the uh width of the lines properly we don't calculate them but we need to calculate them"
6262800,6272640," uh so how can we do that um i can do something like render uh render summary right which will accept"
6272640,6280560," file stream but it also will accept line width right so and essentially this entire thing becomes the"
6280560,6289440," render summary and uh this is the line width uh okay so this is line width there we go so and what i want to"
6289440,6298960," have in here is essentially something like estimate line width right uh so this is going to be size t"
6298960,6309520," size t estimate uh line width and what we're going to accept in here i think we're not going to accept"
6309520,6314240," anything in here but we can accept actually the root ptr dpa i think it will"
6315280,6318640," what if we have several roots okay so we're going to accept nothing in here"
6318640,6327840," so and the first thing we're doing here is uh estimating the line width here's the line width"
6327840,6335680," estimate line width and after that we render the summary into this uh stream with the estimated line"
6335680,6341840," width there we go so we have two phases we have first iteration we uh trying to measure how big this"
6341840,6346560," thing is going to be and then we're using that size to render finally render the entire thing"
6346560,6351680," so the way we're going to be estimating we're going to be again iterating over the roots right so this is"
6351680,6358240," going to be the root uh and uh so i might as well actually copy paste the entire thing because the"
6358240,6368960," iteration is rather similar uh so line width initially is going to be zero right then we call estimate"
6369840,6378080," estimate entry line width where i provide the entry so what is zero i think it's a level yeah we do need"
6378080,6385200," to provide the level and i think that is it right and it will return you a new line width so we can call"
6385200,6398240," it something like entry line width uh right and if that entry entry line width is um greater than our line"
6398240,6404640," width we're going to be assigning it back to entry line width so we do another it uh recursive iteration"
6404640,6410800," of all the things and we're just collecting the maximum of all of this stuff so uh estimate entry"
6410800,6419760," line width uh is going to return size t as well but here it will accept the uh root and the level at which"
6419760,6427920," it's doing all of that and we're going to mirror the uh dump entry so since i have render summary maybe this"
6427920,6436320," one should be called uh renders a render entry right render entry i think that makes sense uh okay so in"
6436320,6444640," here we do a very similar thing i'm going to even copy paste the entire stuff right so i'm starting with that"
6444640,6457360," then i'm starting with that um i suppose the line width that we expect in here right the line width"
6457360,6471120," is going to be essentially level uh multiplied by two plus this summary root label the size of that label"
6471760,6480160," there we go the size of that label um okay after that uh we do"
6480160,6489760," entry line width yet again and if that entry line width is greater than the line width we have in here"
6489760,6499360," we are going to be setting line width to the entry line width and then we'll have to return the final"
6500320,6505600," line width from here there we go so in here we also have to return the line width"
6505600,6511920," uh there we go so i hope i didn't make any mistakes in here let's try to compile"
6511920,6521040," uh okay so we did uh some mistake in here so this is the render entry uh anything else so here is the stream"
6521040,6528320," uh okay so when i'm estimating right i don't need to call any of this stuff i need to call only this"
6528880,6535440," and this and this and this is basically estimate uh entry line width"
6535440,6543680," uh-huh so it's gonna compile i hope it's gonna compile and let's just try to run the entire thing"
6543680,6554160," hopefully it's not gonna do too much okay it kind of worked uh so but it actually yeah so it would be nice"
6554160,6559680," to have like a couple of characters of padding uh in here if you know what i'm talking about"
6559680,6565360," right so it precisely calculated as it should be so it's it's totally fine it actually did really really"
6565360,6570480," well uh but i suppose now it would be nice after we estimated this entire thing let's actually add a"
6570480,6575440," couple of characters for the line width in here you know what i'm talking about right so it just doesn't"
6575440,6585600," stick with the uh with the final time in here right so and uh for the compilation oh i should probably do"
6585600,6593040," something like this um so let's go in here and let's just run the entire thing and hopefully it will"
6593040,6601520," look fine hopefully there we go so now it looks fine and now it's independent from the exact uh"
6601520,6607600," length because if if we have different lengths it will adjust everything accordingly if you know what"
6607600,6614960," i'm talking about right it will try to adjust things accordingly um so now i can try to get rid of the"
6614960,6622160," useless measurements like for example computer computing first top row uh we don't need that the only reason"
6622160,6628400," i added that is just i wanted to test our profiler uh right so i'm gonna remove that and i'm gonna remove"
6628400,6635120," that and it's not gonna be included in the final thing right and let's see and as you can see it"
6635120,6642800," actually competed properly now so everything looks okay so that's pretty cool um yeah we have nested"
6642800,6650160," computations and uh they look quite nice they look quite nice i really like this profile i'm not gonna lie"
6650160,6657760," i think it's pretty cool and the fact that it's so simple right so it's just like 139 lines of code"
6657760,6664880," right it's super simple and at any time by the way uh in your build you can just simply disable that"
6664880,6670880," right so when we build the thing uh yeah i might just disable the whole profiling process"
6670880,6677200," right so here we go so if i try to run the entire thing uh the entire code for the profiler should be"
6677200,6682000," stripped off now there we go so there's no profile anymore it was literally stripped off from the source"
6682000,6687280," code uh so if you take a look at it right so if this thing is not defined"
6687280,6693040," this is what you're calling so every begin clock end code dump summary they're basically stripped"
6693040,6702240," off and they don't exist anymore um that's basically how it works yep so but then you can enable all of"
6702240,6713920," that and we'll start measuring things uh right so"
6713920,6723760," okay and that's pretty pogo that's pretty pogo uh so let me let me do a committee committee so we don't need"
6723760,6731520," that stuff uh do i have the to do for the for the thing i'm doing right now so i think yeah nasty time measuring and i"
6732080,6737440," literally implemented it now uh another interesting thing i think i forgot to"
6737440,6744320," also do boundary check for the summary in here uh so i think i need to assert that"
6744320,6751840," the summary count is less than the summary capacity right so it's quite important so if you have too many"
6751840,6761280," clocks and summary overflows you're not gonna have a good time that's for sure for sure um all right so let me test"
6761280,6769520," it one more time um and i'm gonna create the pull request oh nice it's sick faulted the"
6769520,6775040," fuck oh i know why it's sick faulted okay copy pasted by the way"
6777120,6789600," all right um so uh let's do a committee committee um implement uh nested um i don't even know how to"
6789600,6804560," how to say that improve improve uh time profiler so nested uh clocks um readable readable"
6805760,6811920," summary uh and that's pretty much it so this is basically the things we implemented i'm gonna push"
6811920,6821040," that right into the repo uh i think i don't even have a ci she i don't have a ci god damn bro"
6821040,6829280," all right so i'm gonna do i'm gonna go through my process uh anyway so um yeah so i just need to merge it"
6830320,6840480," uh cool so now we have a pretty powerful tool to make our renderer faster and uh make it also real"
6840480,6847600," time so i think i'm gonna end the stream here right on the next episode what we're gonna do we're gonna"
6847600,6853600," use this profiler to speed up uh each individual part of the renderer as much as possible like and we're"
6853600,6858880," also gonna add more control over how much threads we allocate and stuff like that and after we've done"
6858880,6866080," that we're gonna try to hook up our renderer to something that can actually display the frames since"
6866080,6871520," i'm doing everything on cpu i want to actually use as little dependencies as possible initially i wanted"
6871520,6877920," to use sdl but sdl still uses opengl under the hood so i was thinking that i could probably send"
6877920,6884960," those frames into sdl texture but sdl on my machine literally uses opengl texture so it would be nice to"
6884960,6891040," actually do everything on cpu so my idea is that on the next stream i'm going to actually render"
6891040,6900240," into x11 pixmap so the idea is going to be using x11 pixmap uh right an excellent pixmap is basically"
6900240,6906480," like some sort of a back buffer into which you can push the uh the pixels and this is precisely the"
6906480,6912640," mechanism that we're going to try to use to render this thing in real time and animate in real time"
6912640,6918160," so that way we for sure not using any hardware acceleration or anything like that so"
6918160,6927200," uh yeah so that's going to be the plan uh x11 like specifically xlib is a rather pain in the ass to"
6927200,6933920," work with uh but i actually researched a little bit how to do this kind of stuff so uh i think that should"
6933920,6940320," smooth out the uh the pain a little bit all right that's it for the day thanks everyone who's watching"
6940320,6945760," right now i really appreciate it uh have a good one and i'll see you all next time on the next episode"
6945760,6949920," check out the source code of the project you can find it in here if you're watching it on youtube"
6949920,6957200," check out the description here is the source code here is the playlist of the entire series and if you"
6957200,6961520," are watching on twitch check out the youtube channel where we have an archive of all of these"
6961520,6968000," streams right so yes that's it thanks everyone for watching i hope it was interesting it was definitely"
6968000,6972320," interesting for me i tried out a new data structure that i never tried before and it was actually kind of"
6972320,6991040," pogue so yeah thanks everyone for watching i love you you"
