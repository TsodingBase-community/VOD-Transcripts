start,end,text
0,4000," Thank you so much for being here!"
4000,13220," Would you look at that looks like we're live how about that hello everyone and welcome"
13220,18480," to yet another Tzodding session how about that so let's make a little bit of an announcement"
18480,27760," in our discord server and let's continue development live on twitch right so and what"
27760,36320," we're doing today is making a compiler specifically making compiler without LEDVM in 2021 keg w"
36320,42960," that's the topic of today's stream and let's ping everyone who's interested in this specific"
42960,52880," session and yeah hello hello hello so let's take a look at what we've been developing for"
52880,57760," for the past several streams i would say we've been developing this wacky language called"
57760,63920," port um you can find the source code in the description if you're watching on youtube so i"
63920,70720," usually maintain uh things to put in the description so yeah you can find it in here uh hello iguduk"
70720,76480," welcome welcome to the stream so you can find this thing in here and i think i've made a little"
76480,81600," bit of changes off screen i've been coding off screen a little bit i'm really sorry about that"
82640,89760," so uh merge origin master so yeah i actually implemented a little bit better like test system"
89760,96480," now we have a bunch of tests and stuff like that and um yeah the language is stack based"
96480,103120," it's a stack based language and it kind of looks like fourth if you ever heard of fourth you may find"
103120,111600," this language a rather interesting so uh fourth so fourth programming language um just in case you're"
111600,117760," interested in this kind of stuff i'm going to put it in the description um fourth programming language"
117760,123440," it's kind of like that but it's not really it's not a re-implementation of fourth it's more of like"
123440,130080," it's inspired by fourth plus some other things that i've seen in other languages and systems so it's that's"
130080,136880," roughly the idea right it's not really fourth but it's heavily inspired by it worth hello sofian69"
136880,143040," um hello hello everyone how are you guys doing um so and yeah this is basically a simple program"
143040,150800," that uh prints numbers from 0 to 99 right so yeah every time you see a number it pushes that number"
150800,157120," on a data stack there's a thing called data stack and uh then consequent operations do some different"
157120,163280," things on that data stack and this is the uh construction that basically loops uh until um"
163280,169760," this number becomes equal or greater than this one and constantly prints the current number so and what's"
169760,177440," cool about this language is that it's interpreted you can go ahead and just simulate uh the example uh let"
177440,184400," me try to do that it doesn't fit in in the screen but anyway uh here is the simulation right of our nation"
184400,190560," and at any point you can go ahead and compile it it's compiled and it compiles to native code"
190560,197360," uh right if i go to here uh as you can see uh so here is the source code but here is assembly that was"
197360,202720," generated by our compiler and if we take a look at the assembly file right uh you will see that it's a"
202720,211520," legitimate assembly that got generated by our compiler so and then uh it got compiled into the executable file"
211520,217200," as you can see it's l64-bit executable statically linked by the way it doesn't depend on anything"
217200,225520," at all right and if you try to run this executable it um well it's not set it's sec it will print uh 100"
225520,232720," numbers so as you can see it works it's uh you know compiled it's not statically typed yet uh but we're"
232720,240880," planning to make it statically typed um so hello hello everyone who just joined so and what's interesting"
240880,248480," is that i think on a previous stream we added support for um arbitrary access to the memory i think that's"
248480,255360," what we did hello shot run hello hello hello adc snakes hello hello welcome everyone how are you guys doing"
255360,268880," hello uh so yeah i i maintain a playlist of all of the series of these uh ports development so you can find"
268880,275280," it on sorting daily channel searching daily and if you're watching on twitch you can find this channel in"
275280,282720," here in the chat is it written in python yes the compiler and interpreter is written in python completely"
282720,290480," uh and the reason is because why not right the the choice of language uh is completely arbitrary"
290480,296800," because i do plan to make this language self-hosted right so there are some plans to make this entire thing"
296800,302160," completely self-hosted and self-hosted means that the language is implemented in itself"
302800,308320," so what i want to do i want to implement uh like enough functionality of this language in python"
308320,313680," so then later i can re-implement the language in itself and get rid of python so eventually we're"
313680,318480," going to get rid of python and the only reminder about this thing written in python would be the name"
318480,323520," of the languages which is port right so the reason why it's called port it's basically forced but in"
323520,327200," python right so that's basically the idea right"
327200,337200," two two two cheers by the way"
337200,345680," and yeah so i'm maintaining a playlist of the development of this language uh you can find it"
345680,352560," on this channel and uh yeah here's the playlist i'm going to put it in the description uh so where is my"
352560,361280," description um fourth development playlist you can find it in here if you're interested in a previous"
361280,366880," stream in the previous stream we added support for arbitrary memory access right so now you can access"
366880,372240," memory arbitrarily so i think there are some tests to test this ability to do so"
373200,379920," so essentially we have a special uh work called mem which pushes the pointer to the beginning of the"
379920,387280," memory pool or rather like a memory heap to um yeah pointer to the beginning of the memory heap to the"
387280,392640," stack and then you can do manipulations on that pointer and you can write and read from that memory"
392640,398320," and do some different things and we also added support for sys calls so you can interact with the operating"
398320,402400," system through this language so essentially what we're doing in here we're just filling up the"
402400,408960," memory with characters like a b c right so this thing uh puts a into the beginning of the memory this"
408960,414160," thing puts b to the next cell after the beginning and so on and so forth and then this thing just"
414160,420480," prints a b c and then we iterate through a b c and increment and making a b c d and also print it"
420480,425760," right so this is what our language is capable of and i think that should be enough to make language"
425760,432800," turing complete um hello parademi hello beat stream hello calvary hello hello welcome everyone"
432800,438560," so and if you don't know what is a turing completeness personally i don't know what is turing completeness"
438560,445600," either uh so but i heard that turing completeness makes language a proper programming language right"
445600,450320," so if your language is not turing complete it's not a proper programming language that's usually"
450960,457040," um how people understand turing completeness i suppose uh turing completeness"
457040,464160," uh so turing completeness if you're interested about turing completeness you can google it up"
464160,469520," there's all the videos on youtube by the way from a computer file that explain turing completeness"
469520,476160," uh so maybe i'm gonna leave the the link in to this thing in the description and the way i usually"
476160,483600," demonstrate the turing completeness of my languages or my systems is by implementing a thing called rule"
483600,493680," 110 right rule 110 and rule 11 or a cellular automaton uh right so it's a one-dimensional cellular automaton"
493680,500720," um that is proven to be turing complete is known to be turing complete and if you can implement a rule"
500720,506960," 110 in your language you sort of demonstrated that uh your language is turing complete"
506960,511040," right it's that's the easiest way to demonstrate that and i think this is precisely what we're going"
511040,517760," to be doing today we're going to try to see if it is possible to implement rule 110 in our language"
517760,526480," right so this is a rule 110 that's what we're doing today uh yeah obligatory rules 34 joke yes yes we're"
526480,531440," going to implement rule 34 in um in port of course that's what we're going to be doing today"
531440,540320," so rule 110 how i usually implement rule 11 okay so here's the thing this is how it starts"
540320,549040," so you have a bunch of cells right and uh cells could be in two different states they can be uh a life or"
549040,556720," dead right and uh you have a row of these cells uh which is the current generation and you compute"
556720,562880," the next generation by iterating through uh through the entire row uh with the window of three cells you"
562880,570080," see here is the rolling window right and it rolls through the entire row uh by three and uh basically"
570080,577680," what it does it looks up different patterns right if uh the row of three cells matches a particular pattern"
577680,582800," the next cell in the in the in the center is going to be that one right you see so there's like a look"
582800,588080," up substitution table and you iterate through the entire row making the substitution and you computed"
588080,596640," uh the next generation of rows uh and uh that will eventually generate uh the patterns that look like"
596640,604240," this i was actually taking a closer look i wonder uh if we can do that so each individual row of pixel here is"
604240,610640," a one generation and it should generate this like triangular patterns and stuff like that so and"
610640,618480," it starts from the top and it just grows downwards right so and the encoding is probably completely"
618480,624400," broken because of that so i really apologize for the encoding uh i saw you rule 11 all stream for me"
624400,630640," yeah yeah so i already like developed a programming language before uh which is called bang uh i actually"
630640,638320," reposed the development of that thing and i think uh i also used rule 110 to demonstrate its turing completeness"
638320,645600," uh so sorting daily turing complete i think you can find yeah prove that my language is turing complete"
645600,651680," so i've demonstrated turing completeness uh of bang um in this video"
653920,665600," right and you can find find it in here uh turing completeness for bang right and the usual way i"
665600,674320," implement the um rule 110 is by having a table right so i have some sort of substitution table uh which"
674320,681360," consists of like eight um eight cells for each individual pattern and as you can see this pattern can be"
681360,690400," represented as um a bit mask right and this set of beat masks is full meaning that uh there's all"
690400,696320," possible combinations of zeros and ones in here so you can basically encode the single mask as an index"
696320,707280," within this table right so uh specifically pattern 000 can be stored right can be stored at index zero right so"
707280,716880," pattern 001 can be stored at index one and this is one uh pattern uh 010 it can be stored at index two"
716880,723280," and so on and so forth you see so since it's a full set of um you know of bit masks you can treat them as"
723280,730640," indices so i usually initialize the table like this and then i have two sets of boards right i have some sort"
730640,737680," of like a board capacity so this is the maximum length of the board and essentially i treat one"
737680,744080," board as the current one and another one the opposite one as the next one and i iterate for"
744080,750640," uh through the current board and compute the next one and on the next iteration i swap them out"
750640,754160," and continue iterating and computing next generations and just printing them"
755040,762320," so what's interesting is is that i feel like um having two boards is kind of redundant because i"
762320,768880," feel like since you're maintaining like a small window you can basically get rid of one board and"
768880,775360," only maintain the state of the current window uh to save up some memory and simplify implementation"
775360,780480," and i do really want to simplify implementation because i'm going to be implemented that in a very scuffed"
780480,788480," unfinished language so i want to you know simplify myself uh my life right so i want to make it as"
788480,794160," simple as possible so it's easy to implement in ports and still demonstrate that it's too incomplete"
794160,802720," so and because of that i want to try to implement rule 110 in c as i usually implement it and then see"
802720,807520," how i can get rid of the second board if you know what i'm talking about uh get rid of the second"
807520,814000," board and see if i can like simplify the entire thing and then once i uh nail it down uh we can go ahead"
814000,823520," and uh you know um implement it in post sounds good sounds good sounds too much um there's no link in"
823520,832480," discord somebody says um okay so i guess i forgot the link okay let's actually quickly fix that uh to to"
835200,841680," okay so this is gonna be https twitch.tv don't forget to follow me there if you're"
841680,845280," watching that on youtube if you want to see this kind of stuff for life"
845280,850880," all right so let's go ahead and implement this entire uh"
855760,861760," so this is going to be port and you know what i think i'm going to be uh changing my um"
861760,872640," you know title right so i'm going to change it to uh rule uh 110 in c right or 110 in c and then after"
872640,877520," we're done with the one in c we're going to change it back right because i don't want to confuse people"
877520,882720," people will be coming to uh compile a stream and they will see me implementing rule 110 that is confusing"
882720,887280," that is frustrating we don't want to frustrate people uh all right so let's implement this"
887280,896480," shit on c so this is going to be c and um this is going to be a return and let's implement the hello"
896480,904640," world right so here is hello world uh so do i want to have a make file i think i do want to have a make"
904640,909760," file because i want to enable shit ton of different flags so the flags we're going to put in there is going to be"
909760,917200," w all w extra uh so the standard is going to be c11 we're going to be pedantic about the standard and"
917200,922640," we're going to enable all of the debug uh debugging information just in case so leaps we don't really"
922640,933440," need any leaps uh okay so this is going to be main main c cc c flags oh uh main main dot c leaves i think"
934400,940160," this should be enough uh so let's try to compile this entire thing and we implemented hello world"
940160,946560," it's nothing much but we already set ourselves for the success so we already have a working program it"
946560,951920," doesn't do what we want but we already have something now we can start pushing it towards"
951920,957360," what we want it to do right so you can't push anything towards what you wanted to do if you have"
957360,963200," nothing to push if you know what i'm talking about membrillo amarillo thank you so much for"
963200,969360," hello hello thank you so much for eight months of tier one subscription thank you thank you thank you"
969360,975440," and welcome to our epic hello club here uh hello cheers by the way"
975440,986480," it compiles and it even runs exactly uh that's already better than 99.99 of the projects"
986480,993200," uh so that's pretty good that's pretty good okay so let's implement the substitution table right so we're"
993200,997680," going to have a bunch of patterns and we're going to put them in in the table right so this is going to"
997680,1004160," be a table and there will be eight patterns right we're going to be using uh designated initialization"
1004160,1014160," so zero is going to be zero if i remember correctly zero one one one zero one one zero okay so it starts"
1014160,1019520," with zero then three ones then zero then two ones and then zero i think i can remember that so this one"
1019520,1029600," is going to be uh one uh one one this one is going to be zero this one is going to be one another one and"
1029600,1037680," this one is going to be uh zero there we go so we have a substitution table so then we need to define a"
1037680,1043760," bunch of boards so uh we're going to have two of them and we're going to have some sort of a board capacity"
1043760,1051120," right so and board capacity is going to be equal to something like 30 right um okay so all of that"
1051120,1057520," is going to be static uh the table i think i also want to make it static const because i don't plan to"
1057520,1063680," change it uh over the execution and the board is supposed to be zero initialized i think if you mark"
1063680,1070560," something as static it automatically makes it zero initialized all right so let's make a couple of uh"
1070560,1077040," iteration right so we're going to be doing it like this uh right so we're going to have 10 iterations"
1077040,1082880," and on each iteration we first need to print the current board we're going to keep track of the"
1082880,1089760," current board uh through a variable something like current board and initially it's going to be zero"
1090560,1097760," and um what i want to do actually uh so in the board i'm going to be storing values zero and one zero"
1097760,1102800," indicating that the cell is dead and one indicated that the cell is alive but i want to print this"
1102800,1112240," entire stuff as um you know as characters right so i want to denote the dead cell as space and a live cell as"
1112880,1119280," asterisks or something right and uh the easiest way to do that would be maybe put it into some sort of a"
1119280,1124880," buffer but we can just iterate the current board if you know what i'm talking about so something like"
1124880,1136880," this so this is a board capacity right iterating the current board and uh if uh board current board j so the"
1136880,1147120," jth character of the current board is equal to zero we're going to do f put c uh space to std out"
1147120,1155040," otherwise it's going to be f put c uh star and then at the end of this entire thing we're going to do f put"
1155040,1163120," c new line to separate the generations okay so if i understand correctly now if i try to recompile this"
1163120,1168160," the entire thing and bring it it will print a bunch of spaces so we can't even see anything so it"
1168160,1174960," complains that a table is not used but that's totally fine that is totally fine uh so maybe it would be"
1174960,1183920," nice to initialize this entire thing with something uh let's do um uh board current board uh and let's put"
1183920,1191040," um i don't know at zero something like one right so this is going to be one uh and maybe at the end of"
1191040,1196240," this entire thing so this is going to be board capacity minus one and uh there we go so as you"
1196240,1204240," can see here are the spaces and it just printed this entire thing like 10 times cool i think we can simplify"
1204240,1211040," this entire stuff if you know what i'm talking about because if it's zero it's one thing if it's one it's"
1211040,1217920," another we can use it as an index in some sort of like a character table if you know what i'm talking about"
1217920,1226480," right so we can do something like static const and uh this could be i don't know display table right"
1226480,1230720," display table and there will be two characters in here the first one is going to be space the second"
1230720,1236880," one is going to be that and uh what essentially i can do i can get rid of the branching completely"
1237760,1248720," and just do display table um board current board like so and that should be enough actually right"
1248720,1255360," so we have a substitution table in here um okay that's pretty cool and you know what i think we can"
1255360,1263360," even uh let's actually make it like a const char we can make it some sort of like a string i think"
1263360,1271040," we can even make it like that yeah and another interesting thing can can i just like you know in"
1271040,1277920," line this string in here is that something i can do i can do that okay so we just didn't line the"
1277920,1287200," string in here all right so i still have memories of my upskate it upskate it hello words right so"
1287200,1296000," yeah that's pretty cool quote obfuscation is it too obfuscated i don't know uh maybe maybe it is too"
1296000,1305120," obfuscated hello rdb 42 hello jenny most flasher hello hello hello hello everyone so we're just"
1305120,1317040," upskating code as usual all right so uh we know how to print the current thing right we know how to print"
1317040,1325920," the current thing and now what i want to do i want to compute the next state um the next state of the"
1325920,1336160," the board so i'm thinking how what would be the best way to do that uh because at the beginning right"
1336160,1345440," you have to so we have a bunch of things and you iterate with a window of three right and the window"
1345440,1352480," of three actually substitutes uh sort of the middle one right it substitutes the middle one right so for"
1352480,1360400," these three i decide this one but what if i want to decide for this one i only have two to work with"
1360400,1367920," right so i need to decide what we're doing on the edges uh the easiest solution is to actually maybe"
1367920,1376320," ignore the edges and only iterate basically ignore this cell right so only iterate by three and this one"
1376320,1382080," one is going to be sort of like a dead zone uh right and correspondingly this one uh is also going to be"
1382080,1388880," like a dead zone because you don't have three in here right we only have three in here um so this is"
1388880,1395120," one of the ways to do that so this is the dead zone and because of that uh i think we can iterate"
1395120,1405760," starting from one and less than board capacity minus one something like this uh i usually do it like"
1405760,1415040," that because it's just like easier to work with um okay so now we need to get the three um characters"
1415040,1423680," right to the three characters so the first character is j minus one the second one is j and the third one"
1423680,1431520," is j plus one and we need to turn them into um into an index in the table right so we need to turn it"
1431520,1441600," into the index in this table so uh let's actually assign them to uh some sort of variables a b and c and the"
1441600,1456160," index in index let's call it pattern is going to be something like a uh or b uh yeah or c c is implicitly"
1456160,1463040," sort of shifted by zero right so and this is how we combine everything into into like a pattern and then"
1463040,1470160," we can look up that pattern in the table and this is precisely what we have to put into the next board"
1470160,1477360," right into the next board for the gth j for the jth character so the problem here is that we don't know"
1477360,1484160," what is the next board right so here's the thing if the current board is zero the next board has to be"
1484160,1490160," one if the current board is one the next one is has to be zero so the easiest way to compute that is just"
1490160,1495920," take one and subtract current board so that way if current board is zero the next one is going to be one"
1495920,1501280," if the current board is one the next one is going to be zero so you see we're always like competing for"
1501280,1508480," the opposite boards um all right and uh this is how we compute the next generation and then after we"
1508480,1512720," were done we're saying that the current board is the next board and we sort of like flip-flopping"
1512720,1519120," between the ports uh so that's essentially what we're doing and let's see if it's doing anything uh"
1519120,1526880," uh that's already looks like you know the triangular pattern of rule one one oh uh so because of the"
1526880,1532400," dead zone it kind of like creates that flip-flop thinking and as far as i know the usual implementation"
1532400,1541920," of rule one one oh grows from right to left for whatever reason uh michael chef hi i hope i"
1541920,1546480," pronounce your name correctly thank you so much for two months of tier one subscription hello hello hi"
1546480,1553120," uh hi michael uh thank you thank you so much and welcome to our epic rule one one oh club"
1553120,1557600," how you guys did cheers by the way so we almost implemented rule one one oh"
1557600,1575760," so all righty um usually it grows from right to left so it is better to just like seed this entire thing"
1576320,1583440," like here and it will generate like this triangle okay so we can actually put a little bit like more"
1583440,1590080," uh generations in here like 100 of them and as you can see it grows um and then it starts like repeating"
1590080,1596400," itself and it just goes into a case of some sort uh so we can actually make the amount of iterations"
1596400,1602160," equal to the board capacity so that way it will always it's kind of interesting i would expect it to be"
1602160,1608800," like a proper triangle but there's two extra rows oh they're extra rows because we have two dead zones"
1608800,1615200," on the left and the right so that means we have to iterate like minus two i see i see and now it's it's"
1615200,1622320," a proper proper triangle and that way if we increase the size of the board uh we're gonna have like bigger"
1622320,1627120," uh you know rule one one oh like pattern there we go so that's pretty cool actually"
1629200,1633600," um prove that c is steering complete yeah we just proved that c is steering complete who would have"
1633600,1639840," thought uh that's actually pretty cool uh i really like that so it's kind of funny like for some"
1639840,1648000," reason rule one one oh specifically grows from right to left right it specifically grows from right to left"
1648000,1655520," and if you try to seed it from let's say uh one right if you put like a character like at the beginning"
1655520,1662560," format it's not gonna grow uh right there we go it's just like stands still uh so if you want your"
1662560,1668880," rule one one to grow um you have to do that from right to left for whatever reason and even in wikipedia"
1668880,1675200," it also grows from right to left uh so maybe you can make it grow from left to right by changing the"
1675200,1683600," substitution table um somehow i don't know how though um maybe by making it sort of like this i wonder"
1683600,1691520," uh nah it doesn't really change it much but i mean i don't really care much sorry uh so yeah"
1691520,1697200," that seems to be working that seems to be twerking okay so uh what we can do"
1701840,1714240," so first thing we can do by the way we can replace this table um we can replace this table with a single"
1714240,1722640," number you see we have eight bits in here and that fits into one byte so the entire table actually fits"
1722640,1731280," into entire bytes and maybe we can use the pattern as an amount of beat sheets that we have to make to"
1731280,1736800," find the next part so this is one of the simplification that i can see for this entire stuff"
1736800,1742480," so let's actually try to do that it's kind of interesting uh if i go to the python and so the entire"
1742480,1754160," table is zero one one one zero um okay so that's kind of oh we have to actually do that in a different"
1754160,1761600," order right so it starts because we can only access the the right most bits so the actual table has to be"
1761600,1771920," something like um zero one one zero one one one zero okay so this is the table and even in decimal it"
1771920,1778800," kind of looks like binary which is kind of interesting right so um yeah so we can try to replace this"
1778800,1786800," entire thing with just uh that right so this is going to be our table and in here we can replace this entire"
1786800,1797440," i think like so uh so um so this is the pattern right so this is the pattern i shift this that pattern"
1797440,1807920," and i suppose after that uh i have to take like one bit out of it right and that way uh nothing changed"
1807920,1814560," i think oh yeah okay so that's really interesting so we we managed to comprise the whole table into a single"
1814560,1820800," number and since we're using the table only in a single place i think i can just straight up in line"
1820800,1830320," this table can i okay so you don't need any array for the table that already simplifies a lot of stuff"
1830320,1837840," so this is actually quite cool because now i don't need to allocate memory for that table in the portth"
1837840,1843120," program right so i want to implement this stuff in portth and now i don't have to worry about allocating"
1843120,1848640," the memory for the uh for this entire table which is kind of nice right so if we manage to get rid of"
1848640,1855440," one word in here it will become even simpler uh given we don't have bit shifts right we don't really"
1855440,1862880," have bit shifts uh but we can implement bit shifts for uh for the for the portth right so um essentially if"
1862880,1868720," we don't have some operations for the for portth we can just implement them and then implement uh rule 110"
1870000,1876320," um so the next one is gonna be what we need to have some sort of like a rolling window um"
1876560,1898000," uh so we can basically use uh this as a window all right let's actually imagine uh that we don't"
1898000,1903040," have two boards anymore right we don't have two boards anymore and let's just try to compile the entire"
1903040,1908320," thing so yeah there's no such thing as a current board remove that and of course we're gonna remove"
1908320,1913440," that now maybe we don't even need this comment anymore uh so there's no such thing as a current"
1913440,1920560," board that and uh there's no such thing as the next board but instead of the next board we're gonna have a"
1920560,1928080," window of three elements and inside of that window we're gonna be um"
1928080,1936080," let me see let me see or maybe you know what since it's only three elements i can do the following thing"
1936080,1945600," i can just put abc in here right and the first one is going to be zero one uh and two okay so zero one and two"
1946320,1953120," and then i prepare a pattern out of it out of that and then i shift everything and the next thing i need"
1953120,1962880," to do i need to sort of shift um the abc buffer so abc buffer becomes the the ring buffer or some of some"
1962880,1977280," sort right so essentially a will become b uh right b will become c and c will become board um"
1977280,1987280," we don't i don't have the next word anymore so we have uh j minus one j j plus one and we need to do j plus"
1987280,1995920," two right we need to do j plus two uh so that way we sort of have this window rolling window in abc"
1995920,2003120," and we keep rolling and keep computing the next state uh so that should kind of work and that simplifies"
2003120,2009200," this stuff even further uh right so we don't have the big well yeah so we don't have to keep track of"
2009200,2016480," that stuff is that the same thing by the way it looks the same but i'm not sure if that's the same"
2016480,2022320," thing um i should have actually saved the output of the previous one let me actually do that single"
2022320,2032080," uh buffer txt so here is a single buffer i saved it into a file and then i'm gonna let me actually do"
2032080,2037840," that a little bit like this there we go and i'm gonna actually go back in my implementation right"
2037840,2045120," i'm gonna actually get rid of all of that uh luckily i have an infinite history right so i can just"
2045120,2054240," literally go back in history uh and just bring it back i think that is it uh and there we go so this"
2054240,2061520," has to be uh so this is a single buffer and this is the double buffer txt uh there we go so we have"
2061520,2065520," a single buffer and double buffer and i want to take a look at the difference between them so a single"
2065520,2077440," buffer and double buffer and there is no div between them um uh to to accessing board uh when j is board"
2077440,2084720," minus one is a bit sus are you sure about that uh are you sure about it it's actually less than board"
2084720,2094960," minus one right so that means j uh can be at max equal to board cap minus two and when you do plus"
2094960,2101200," two right you accessing board well yeah you're accessing something like this so it's kind of dangerous"
2101200,2106640," actually uh it is in fact kind of dangerous so we'll have to do something about that"
2107440,2114080," on the last iteration thank you thank you so much you see this is the uh unsafe a very unsafe language"
2114080,2120800," right so uh we have to be super careful with this kind of stuff so uh okay let's let's go back to"
2120800,2129120," uh a single buffer right let's go back to a single buffer and uh apparently yeah we can actually replace"
2129120,2137040," this stuff with um you know with a single buffer and rolling window uh which is actually kind of cool"
2137040,2147040," really like that um so this is going to be something like this this is another one another one and um"
2147040,2155760," okay so we already established that we want to put this thing in here uh uh-huh and so i'm going to"
2155760,2166640," actually put it like that this is going to be zero one uh two uh word next is uh like this and uh"
2166640,2178320," uh what do we have a become b uh b becomes c and c becomes board j plus two right and that is very"
2178320,2186560," dangerous uh the only way we should do that if um i don't know j plus two is less than board capacity"
2186560,2192080," right so only then we want to do this kind of stuff because it's kind of dangerous"
2192080,2198080," it is in fact kind of dangerous uh already"
2198080,2207280," let's try to recompile the entire thing uh and we don't have a next board anymore and it complains"
2207280,2217440," about something yeah we don't have a current board and yep it does do rule one one oh all right and here is"
2217440,2228800," another interesting thing a b and c they actually store either zero or one which means can we maintain"
2228800,2237920," this window as a bit mask i think i think we should be able to so uh can you do something like uh board"
2237920,2245680," um like one two um it's actually not one that's gonna be two or"
2248240,2258720," uh board one or board two right so here is the window all right and that way this is literally"
2258720,2268480," pattern actually so okay uh we don't have to compute that anymore and now what we have to do we have to"
2268480,2278160," shift that pattern um to the right and merge it with the next board in here okay that's pretty cool um so"
2278160,2285360," i do pattern uh move it to the to the right but here's the interesting thing we need to uh basically"
2285360,2293680," mask it with the last three bits right with the last three bits and uh so what is one one one uh let me see"
2293680,2301040," zero b one one one one it's actually seven which is nice so i can do uh i shift it to the right then i do"
2301040,2313200," end seven and then uh i merge it with the board plus one right and this is the next pattern this is the next"
2313200,2319360," part there we go so i think we can do do it like that uh"
2319360,2328480," all right so and it doesn't compile because the semicolon and it works"
2328480,2337520," that's very interesting so we got rid of the table and we get rid of the second board and we just like"
2337520,2344560," use beat operations so that sounds like something that is relatively easy to implement in our language"
2344560,2346320," i think a good thing"
2346320,2357120," so i would like to also somehow get rid of g plus two thinking i think it's kind of annoying"
2358560,2364080," but it is who it is and it isn't who it isn't um to to to to"
2364080,2370720," top tier manipulation skills maybe"
2370720,2374240," uh to to the two"
2374240,2384160," so what i'm thinking is that you can get rid of this condition if you move pattern shifting to the"
2384160,2389280," beginning of the iteration so essentially um we're gonna only start"
2389280,2399840," from this right we only take first two uh right zero and one right so this is the zero and this is a one"
2399840,2408720," and then uh instead of doing j plus two we can do j plus one but at the beginning of the iteration"
2408720,2413360," that way we don't have to check this condition you see so the next bit is going to be rolled in"
2414320,2421680," on the beginning of the next iteration and yeah so since the board capacity at max can be minus two"
2421680,2427200," uh we're going to add plus one is going to be at max board minus one which is within the range"
2427200,2435200," so yep i think that way we can get rid of that condition i think that's a pretty good solution to this"
2438800,2446960," i really like that actually really good thing is that a good solution so this is as simple as i can"
2446960,2453600," get it like can you get it even simpler i don't think so uh so yeah that's pretty cool"
2453600,2460880," okay and it seems to be working still i hope i recompile so let me actually double check that i'm"
2460880,2468880," recompile in my uh my application and uh there we go so that should be relatively easy to implement in"
2468880,2478480," port okay that's pretty cool um so do you guys want this source code for for anything uh i can upload it"
2478480,2486640," to gist or something if you want to play with it so um looks like a pretty good thing i'm gonna upload it"
2486640,2490480," also for for people on youtube maybe somebody who's watching on youtube want to play with this thing as"
2490480,2492800," well"
2492800,2502560," all right so the rule 110 dot c"
2502560,2513680," so and here is my implementation of rule 110 in c a simplified like sort of version of it and unfortunately i"
2513680,2519920," i cannot see the submit button because it's behind my camera right so i have to do something like this"
2519920,2528240," and now i can see create uh gist that's great secret just and here is the implementation of the rule 110"
2528240,2535280," that takes only one you know buffer which contains the board uh you can find it here in the chat if you're"
2535280,2541520," watching live or if you're watching on youtube i'm going to put it in the description all right so uh rule"
2541520,2551360," one one one all in a c there we go okay so that's pretty cool so i should have actually tried to"
2551360,2558400," simplify this thing uh way back when i was doing rule of all for bang because for bank i implemented that"
2558400,2563520," cucumber some implementation with the table with the double boards and stuff like that this one is actually"
2563520,2574640," super easy so this is kind of cool i like this unfortunately in uh in port we don't have this"
2574640,2579200," kind of things we don't have what constants and we'll have to hard code and copy paste a lot of stuff"
2579200,2589200," but it is what it is and it isn't what it isn't uh all right so uh i think we're done with the uh c"
2589200,2595120," programming and i need to go back to the port programming right making component without a little"
2595120,2603760," vm and there we go all right let's take a look at this stuff uh do you guys have any questions maybe"
2603760,2610880," uh so far is everything clear what we're trying to achieve today and you know as usual um"
2612320,2621280," so we have a couple of examples in here i'm thinking so let's actually remove some stuff uh double buffer"
2621280,2634640," rule one one all ports uh okay so recently i implemented uh a couple of um operations for ports off screen"
2635200,2642080," one of them is too dupe right the thing about dupe is that it duplicates whatever it has on the stack"
2642080,2647280," right if you have like 69 on the stack you can duplicate that thing and you can print it twice"
2647280,2652400," right because dump takes whatever at the top of the stack and it prints it and removes it from the stack"
2652400,2659040," right so if you want to print 69 two times you you have to duplicate it right before you print it so and"
2659040,2664320," if you try to interpret this entire thing uh let's simulate room one one oh there we go it printed it"
2664320,2669280," uh two times if you don't duplicate it i think you're going to have a stack underflow right so uh we're"
2669280,2675040," doing simulation that's why it it throws um an exception in python we can try to do compilation i think"
2675040,2681600," in case of a compilation it will basically suck fault it didn't even suck fault right it printed one"
2681600,2687760," essentially meaning that it was basically printing garbage from the stack yeah it it literally printed"
2687760,2694480," garbage from the stack uh so this language is unsafe by the way right so uh people who program in rust"
2694480,2700160," please look away this is unsafe language yet we're gonna make it safe in the future don't worry about it"
2700160,2715200," um argument counter yeah it could be an argument counter we're literally using the uh the stack uh of the"
2715200,2723040," application you know the actual stack so and as far as i know the arguments of the program are passed via"
2723040,2729200," the stack so this could be the argument uh the argument counter this is actually very interesting"
2729200,2734720," so what if we do dump dump the first thing has to be argument counter and the second thing should be a"
2734720,2742480," pointer to the beginning of the argv right so let's actually try to do that uh this does in fact look like a"
2742480,2750320," pointer oh my god i was thinking how can i have an access to the uh to the command line arguments and"
2750320,2754800," ports and i was thinking how i'm going to be implementing all of that maybe i don't even have"
2754800,2760320," to implement that it's already implemented accidentally to be named your genius holy"
2760320,2772640," oh wait a second if i provide more arguments to this thing so this is a rule 110 right full"
2772640,2779040," there we go it yeah it is actually the counter holy this is so cool"
2782720,2787120," i really love that we don't have to implement anything it just works like i mean it doesn't"
2787120,2792560," work in a in a simulation mode because simulation mode is not aware of that uh but"
2792560,2799840," yeah i'll think about it yeah it's unintended feature right so that's the beauty of unsaved"
2799840,2805840," languages you get this awesome unintended features isn't that exciting i think it's goddamn exciting"
2807600,2811520," who needs to program in rust am i right you don't have any accidental features"
2811520,2817920," it's actually pretty cool so this is a pointer"
2817920,2825920," this is a point uh anyway so what i was talking about oh yeah so we have dupe and it duplicates the"
2825920,2834000," thing on the top of the stack right so n2 dupe uh actually duplicates a pair of the elements on top of the"
2834000,2841760," stack right if you have 69 for 20 uh right you two you do two dupe and it will literally take these two"
2841760,2850400," pairs right uh and just duplicate it like that which makes one thing super convenient imagine that you have"
2850400,2857520," an upper bound for a counter like 30 and the counter which starts from zero and then you want to organize"
2857520,2865600," the the loop from zero to 30 you do while you duplicate pair of the elements and you say while zero is less"
2865600,2875680," than 30 and you do duplicate dump uh right duplicate dump and uh there you go you organized sort of like"
2875680,2881920," a for loop sort of speak um you also have to you know uh increment uh whatever you have at the top of the"
2881920,2889840," stack of course uh you sort of organize the for loop from zero to 13 quite easily so and if we try to uh"
2889840,2897600," just run this entire thing so it's uh worth simulate uh there we go let's bring it from from zero to like"
2897600,2904720," 13. so this is actually kind of convenient and this could be our like outer loop of the generation right"
2905680,2913920," um so if you take a look at a rule one one oh where is main dot c so this could be our outer loop"
2913920,2923760," this one okay cool um so then we need to organize the inner loop right we need to organize the inner loop"
2923760,2933360," an inner loop is going to be iterating i suppose the memory right"
2935680,2943760," um"
2943760,2955120," okay so let's also organize this kind of thing so while uh to dupe like this uh and this is going to be the"
2955120,2962640," end um so what i need to do i need to duplicate whatever we have on top of the stack so this is a zero"
2962640,2969520," index and then i want to add it to the beginning of the memory so i have a pointer to the current"
2969520,2976800," sort of cell the next thing i want to do i want to read a character from that pointer right so and"
2976800,2986160," what's interesting is that it can be either zero or one which i then can use as a condition right so if it is"
2986160,2993200," uh true uh i want to print asterisk right i want to print the asterisk and what's the ascii code of the"
2993200,3000640," asterisk that's a good question uh so i cannot just print a character unfortunately this is so"
3000640,3012640," sag uh one thing i can do is i can put the character somewhere in the memory maybe after the board and just call"
3012640,3019040," the c skull right on that character so this is one of the things i can do or maybe i can fill up the"
3019040,3023280," whole buffer but filling up the whole buffer you have to juggle with the pointers and stuff like"
3023280,3030320," that so i'm not sure if i want to do that um so i'm not sure if i want to do that so let's take a look"
3030320,3039680," at the ascii code for the asterisk right uh asking so we don't have a character literals yet uh so that's"
3039680,3046960," why i have to work with the um you know with the direct ascii codes so here's an interesting thing"
3046960,3053200," like i try to not over complicate the language and implement too many features because the more features"
3053200,3059040," i implement the more difficult it will be to reimplement the language in itself if you know"
3059040,3064720," what i'm talking about it's kind of an interesting dilemma it's kind of interesting dilemma i think i"
3064720,3072000," want to draw that just a second um all right so you can implement more features and make the language"
3072000,3076480," more comfortable to use but the more complex you make the language the more difficult it is to"
3076480,3080560," reimplement the language in itself if you don't implement too many features right if you don't"
3080560,3085040," implement too many features you end up with a simpler language but you end up re-implementing"
3085040,3090960," a simpler language as well right so you kind of need to find the middle ground of the amount of"
3090960,3095760," features you want to have if you want to do self-hosting right and i want to implement like a minimal"
3095760,3101280," language that is self-hosting language uh for the sake of being self-hosted because i never implemented"
3101280,3107600," self-hosted language before um yeah so that's what i wanted to do yeah a paradox it it kind of feels"
3107600,3114560," like implementing a quine in some sense right so a quine is a problem that prints itself right so"
3114560,3121840," if you try to print itself well the you go sort of into like a infinite recursion so to speak"
3121840,3128240," um right anyways um so this is the duplication and"
3132000,3135040," so where is the star so where is the star so this is a 42."
3135040,3143200," okay so and what i need to do i probably need to go to the memory 30 uh right so the size of the"
3143200,3150720," buffer is going to be 30 and uh i add this into i think and i add 48 so here's the address and here is"
3150720,3159680," the 48 and i save it here uh right i save it here uh otherwise uh i need to do"
3159680,3178240," mem 13 plus 48 uh action with 48 where is the space uh space is 32 uh and there we go"
3179120,3185360," uh and then i need to write a sys call here is an interesting thing i think i can extract this thing"
3185360,3191840," outside of the loop um i think it should be possible to do that all right so this is going to be something"
3191840,3198320," like this"
3198320,3200320," uh"
3200320,3206560," no no no you cannot do that because you're okay so you're duplicating the current uh thing in here so"
3206560,3215760," you can't just do that unfortunately anyway um asterisk is 42 oh yeah it is it's not 48 it's zero okay thank you"
3217760,3227040," 42 cool um so now i need to do a sys call so for the sys call we start with the counter right so the"
3227040,3234080," counter is one then we start with the buffer so this is going to be mem 30 plus this is where it's located"
3234080,3243040," and then we are doing um the output the output is standard output and then we do syscall three"
3243760,3253680," all right so that's pretty pog not gonna lie uh to the two okay so and that should just you know print"
3253680,3259600," one line but at the end of that line right at the end of that line what we want to do is to print the"
3259600,3268480," new line so this is going to be uh mem 30 plus uh new line new line new line new line uh i think it's um"
3269120,3278800," i think it's a 10 yeah so it's it's a 10 uh to the two 10 like this and then uh we're going to print"
3278800,3286960," that single character in here uh what's interesting is that uh we need to increment uh this plus one"
3286960,3295120," right because we're incrementing this thing and at the end of this loop we have two um two characters"
3295120,3303120," we have two characters at the top of the stack so we have to do drop drop uh and that should be fine"
3303120,3309520," i think i think that should be fine so if i try to simulate this entire thing should it work it does"
3309520,3321360," not work a non-file descriptor uh fd oh yeah i know why because i forgot the the number of the syscall oh"
3321360,3324160," shit okay"
3324160,3330080," that didn't work well uh i wonder why"
3330080,3347680," i wonder why i wonder why um does making a compiler mean you're making a new programming language not"
3347680,3351920," necessarily but in my specific case i do make a programming language a new programming language"
3351920,3362800," um okay so that's really strange so what is wrong in here while that i duplicate the current thing"
3362800,3371520," and i uh add this to the memory and i actually read it i think uh i think i made a wacky wacky i supposed to"
3371520,3377360," write it into the memory so it's supposed to be a dot right this is supposed to be a dot and this is"
3377360,3388240," supposed to be a dot uh and i think that should do the trick unknown file descriptor uh count memory um"
3388240,3394560," that one and why does it say that it's unknown file descriptor is that because"
3395280,3403520," i think std out isn't it zero isn't it just zero ah yeah i forgot to put it here there we go"
3403520,3415040," all right it printed some i think it did it i think it did it uh so this is the spaces"
3415920,3422000," so we can try to put something in the beginning of the buffer or maybe like seed it the same way we"
3422000,3429520," did it for the for the c program so basically memory uh 28 plus and what we want to put in there we want"
3429520,3436240," to put one in here and just like save that so basically we see in it and uh if i take a look at what we've got"
3440720,3449520," just works what the why is this so easy wait wait a second why is this so easy to implement i don't"
3449520,3460560," understand like the the final code is not more complex than a c version if you know what i'm talking"
3460560,3469040," about so this is the equivalent loop okay so here is the uh equivalent in c this is how it looks like"
3469840,3478880," literally this is equivalent in c it's like more complex but it's not that much complex um if you"
3478880,3489200," know what i'm talking about so yeah that's kind of strange like and implementing such language wasn't"
3489200,3496000," even difficult yeah stack based is actually really great like i don't know why more people don't program"
3496000,3500320," like this because it's actually super easy to implement and you get as powerful of a system as"
3500320,3508160," like infix uh system um i don't know something probably something cultural but we can already"
3508160,3514240," print the the generation we can compute the next generation but we can already print the generation which"
3514240,3522000," is which is great um so it's pretty cool i guess"
3524400,3530400," um so now we probably need to organize this thing uh so the question is where are we gonna be storing"
3530400,3535920," the pattern so that's the good question where are we gonna store the pattern we can try to store the"
3535920,3542240," pattern in the same place as we stored the character right so this is one of the things we can do"
3542240,3549440," we can store the pattern here or we can store the pattern uh on the stack"
3551600,3556560," we can store it there or on the stack but i don't know uh we'll probably have to implement a lot of"
3556560,3562000," operations uh one of the things we need to implement in here right we need to implement shift right we need"
3562000,3571600," to implement shifts uh or and end so that's the things we need to implement we need to implement at least like"
3571600,3580000," three of these things and once we implemented them i think we should be able to implement the entire algorithm"
3580000,3586400," in here so should we go ahead and do that i think we should go ahead and do that"
3586400,3593440," is your program tiering complete uh we're about to find out we're about to find out if it is"
3593440,3600320," all righty so we need to implement a couple of new operations so the first one is going to be i"
3600320,3611120," i suppose shift left um so we have both shift left and shift right so we need at least like four of them"
3612560,3629520," um so let's do it like this so uh stack manipulation comparison arithmetics uh i think i'm gonna stick"
3629520,3637360," something like beat uh wise uh in here right so we're gonna have a beat wise operation so the first"
3637360,3648400," operation we're gonna have is um shift to the right or maybe we should call it uh shr uh does anyone know"
3648400,3656320," how she like beat shift is called in fourth so lately i actually started to like slowly read the fourth"
3656320,3664160," standard so maybe we can download the fourth standard and just see uh how it is called there do we have any uh"
3664160,3670800," you know professional um a professional fourth developers in the chat who can tell me so this is"
3670800,3680560," not a fourth standard uh i think it's yeah so there was a pdf that you could download i do remember that"
3680560,3686160," download uh you can be part of it sign up or sit back and watch it on twitch"
3687760,3690080," so there's a europe fourth conference"
3690080,3697840," it's actually oh okay it's already too late but they were streaming like that's very interesting so"
3697840,3705040," they were streaming that on twitch do you guys know that did anyone know that there was like a fourth"
3705040,3710320," conference on twitch and stuff like that i didn't know that holy it's actually super cool"
3711520,3715200," hmm are they streaming right now maybe you should actually follow them"
3715200,3729200," uh forther who's author uh so you're a fourth conference okay so i'm gonna just go to the chat"
3730320,3740080," and uh twitch is so slow i just want to follow them there we go let me be following them all right cool uh"
3740080,3745440," so where can i download the standard okay i can here's the dpdf i just want you to download the pdf"
3747520,3764000," uh okay so let's actually go here and it's gonna be documents and i'm gonna just download the entire thing"
3764000,3775360," and unable to follow from through third-party apps it's really strange new pdf"
3777520,3783440," okay so here's the standard of fourth and as far as i know there is like a list of uh all of the"
3783440,3794640," words alphabetical list of words um so maybe there is a shift somewhere there uh shift uh so there is a l"
3794640,3802480," shift right they call it l shift uh to perform a logical left shift of u beats places so the fourth"
3802480,3808720," itself calls it just l shift uh so but we are not really trying to reimplement fourth if you know what"
3808720,3815840," i'm talking about so we're only using fourth as an inspiration so you you know what i want to do uh"
3815840,3821840," maybe i wanna i need to decide on the color of the bike shed so what we get what's going to be the color"
3821840,3831440," of the back shed uh i think i'm gonna stick with shr shl right so this is gonna be this shl shr um so and"
3831440,3847760," shift left shift right and i need to decide on uh things like uh beat or and byte or so"
3849600,3855040," uh i could use or but i would probably plan for the logical or and for the logical end right so i need"
3855040,3864960," to uh indicate that it's a bit so maybe for beat wise or it's gonna be bore and band so i think this is"
3864960,3874560," actually pretty cool um so i think this is actually pretty cool shift uh shift right shift left beat or and"
3874560,3888320," beat and bore and band um hello how's language coming it's it's like billy harrington it's coming"
3888320,3894080," i see you're getting fourth trying to learn to it to make uh parts better yeah i'm using fourth as an"
3894080,3903840," inspiration primarily uh would there be a reason to flip a bite uh yes uh there is a lot of reasons to flip a"
3903840,3920160," bite to be fair okay so um so i don't really know how to explain but the main idea for this entire thing"
3920160,3933680," is going to be uh so a pop right so then b pop and i suppose we're gonna push back uh a slash b"
3934240,3940960," right a is the first one and that means if you want to shift something by uh that amount um"
3940960,3949360," you would do 31 and just shift and that should work okay so this is going to be shift shift right i'm"
3949360,3956800," sorry this is a shift left right like this uh by the way in python uh can i do it like that okay so in"
3956800,3965840," python it's the popular shit okay cool uh all right so uh i'm trying to get into the habit of uh you know"
3965840,3972560," documenting first the operation that i add and then adding them uh right so then i have a full"
3972560,3977760," documentation of what's supported and what's not right it's always nice to have especially for if people"
3977760,3985040," want to see what what's in the language uh you have a reference essentially you have essentially a"
3985040,3996560," reference okay so if i do something like this uh seems to be working um"
3996560,4011600," a b and band pop pop pop uh push there we go so this is what we got"
4011600,4020800," ddd documentation driven development as far as i know ddd traditionally stands for the main"
4020800,4035680," drawing development isn't so um all right so do i want to put any documentation in here and i think so"
4035680,4043840," so the next thing i want to do maybe uh i want to add some tests right so we have a bunch of tests in"
4043840,4050240," here like for arithmetics actually there's a lot of stuff in here i'm not sure how much of this stuff is"
4050240,4056800," needed uh but the first one is a stack then comparison then arithmetics uh so after arithmetics"
4056800,4064400," we're gonna have like a bitwise um so i have like a numbering system here and i'm realizing that it's"
4064400,4072320," kind of dumb uh so i want to get rid of it but i think it's too late so i'm gonna do 06 uh bitwise"
4072320,4079440," and for each of this thing i'm gonna create like some tests uh if you don't mind right"
4080160,4089040," so we're gonna have two um um three and we're gonna shift to the left right so this is the first"
4089040,4096240," thing and then after that maybe i want to dump the final result just to see uh so then i'm gonna"
4096240,4106880," do 128 24 right and uh i don't know maybe 32 and basically shifted to the right and also dump the entire"
4106880,4123280," thing uh right so shift left uh shift right then uh beat or um so it's gonna be one two bore dump"
4125920,4133120," and then beat end and this one is interesting because a one two band should be equal to zero"
4133120,4139680," right it should be equal to zero uh so this is gonna be like eight and so on and so forth so this is a"
4139680,4145920," bunch of tests in here um is this kind of a polish intention yes it is kind of a polish intention"
4145920,4152880," because we're uh inspired by fourth right so you can find more information about this kind of stuff in"
4152880,4160320," yeah thank you thank you so much for issuing the link um okay so let me let me see if i try to run or"
4160320,4167760," simulate that test uh all right so it's gonna be zero six bitwise as you can see we have unknown word uh"
4167760,4174240," shl right so this is shl word we we don't know anything about it so we're gonna go into the port and"
4174240,4182560," uh we're gonna start adding that stuff maybe we're gonna add everything at once um so this is this stuff"
4182560,4198240," in here dump equal op shift right uh shift right shift left uh bore and bend okay so that will break the code in all"
4198240,4203120," all sorts of places we'll have to add uh all sorts of places and we'll have to add uh the parsing for"
4203120,4210960," it so we added four of them so this is gonna be 29 um and let me see where i can add all of that so this is equal"
4213680,4227680," um so i'm gonna add it somewhere maybe here shift right uh shift left uh and bend so i'm basically"
4227680,4233840," implementing all of them at once uh okay so here cross-referencing the blocks so it doesn't affect any"
4233840,4240000," blocks i can just move on and here is the implementation in the simulation okay that's cool"
4241200,4252800," uh first one i need to implement uh shift right uh so that looks all right uh to the two so in the"
4252800,4262240," implementation um in the implementation uh uh so this is the first one and we're shifting it to the right"
4262240,4269600," okay so this is gonna be straight up like this so this is a shift right then uh we have shift left"
4271520,4279440," so this is a shift left and then bore uh i'm not sure if i need to actually cast it to in but i do that in"
4279440,4286960," just in case at any point i can just remove that it's not for the one uh okay i think we implemented"
4286960,4293600," everything so that should be supported now uh i only need to update this entire thing and okay so let's take"
4293600,4300720," a look at the final results and see if they look reasonable to some extent um so that doesn't"
4300720,4306960," particularly look reasonable i think this there's too much output and i'm not really sure why um"
4306960,4315120," so there should be only four elements in here and for some reason we have uh eight of them"
4316320,4323120," um oh yeah okay so i forgot to change the dump okay thank you so much uh to the two in the parsing right"
4323120,4326640," somewhere in the parsing uh"
4328640,4341680," so this will this is what you get for copy pasting by the way"
4341680,4349120," this is the danger of the copy paste okay so we got something and this is completely incorrect uh i can"
4349120,4360160," already see that uh okay let me let me see kind of uh because when i shift one three times i would"
4360160,4365280," expect it to be eight but for some reason it's six if you know what i'm talking about that's kind"
4365280,4371760," of sus so it means the order of the arguments is kind of like uh fucked up right"
4371760,4380640," the order of the arguments is fucked up uh but i would expect it to be like this because i want it"
4380640,4386320," to be basically you mentally put this thing in here and it just acts like you would you would expect it"
4387760,4397680," so that means so uh hr like this okay so the first one has to be the one that we're using okay so it"
4397680,4404880," has to be something like this it has to be inversed and in the readme did i no it's actually not"
4404880,4412800," inversed right so it has to be like this it has to be like this like everywhere uh for or and and it"
4412800,4418960," doesn't really matter uh but i'm gonna inverse it anyway uh okay so let's take a look it's still six"
4418960,4422400," what the uh why is it still six"
4422400,4426560," uh am i crazy"
4426560,4432400," ah yes i am crazy i'm just like using it incorrectly"
4440240,4450160," shift left uh so the first one is the one that you're moving the second one uh uh-huh"
4450160,4461840," okay i think i'm getting tired finally holy okay so eight four three and zero"
4461840,4470080," uh i think this looks reasonable i think right if we can take a look at this stuff one more time"
4471120,4479760," right so one to the two to the power of three is eight that looks fine 32 is essentially two to the"
4479760,4485040," power of five right and you subtract three you get two to the power of two and two to the power of two"
4485040,4493280," is four looks correct to me so one is one in binary notation two is one zero in binary notation if you"
4493280,4499520," combine them together you get one one which is three so this looks correct uh the same thing and they"
4499520,4504800," cancel out because once match with the zeros and you get zero so all of that seems to be correct"
4504800,4510240," so this is the correct output this is what you would expect from these operations right so looks"
4510240,4516800," reasonable to me so uh also let me double check the documentation so everything seems to be all right"
4516800,4524560," and uh the thing i'm gonna do uh right i'm gonna do tests uh record right so this entire thing will"
4524560,4532800," basically remember uh what is the correct output uh what is the expected output for the bitwise you see"
4532800,4539600," we created bitwise uh dot port and on top of that we have bitwise.txt so basically now in this file it"
4539600,4547360," keeps everything that is expected right and then it will use this file in uh in testing right so and if"
4547360,4551920," if something changes or it will basically fail uh the entire like build and whatnot"
4551920,4559440," all right but this is not enough uh because we only implemented that for the simulation we also need to"
4559440,4565360," implement this thing for the compilation right so and for the compilation we'll have to actually generate"
4565360,4572960," assembly instructions for these things and i have no idea how to do that so we'll have to look up how you do"
4572960,4583120," these like binary operations and whatnot uh okay so 25 uh this one is gonna be rather interesting not gonna lie"
4583120,4592720," op uh type equal op shr uh out right"
4595760,4602480," uh uh like so uh like so uh and maybe i can also assert that this entire thing is not implemented"
4602480,4608320," just in case uh so this is gonna be the left left"
4608320,4614800," this one is gonna be the bore bore and this one is gonna be the band"
4616480,4626160," uh band so the first thing we need to do i'm pretty sure uh we'll need to pop uh racks and rbx"
4626160,4633120," but i'm not 100 sure because it depends on what's the uh shift uh instruction is exit 664"
4633120,4643200," access to x86 64 shift right uh because i literally don't know um so shift and rotate oh they literally call"
4643200,4652640," SHR and SHL there's also SAR and SEL oh this is probably depending on whether it's signed or unsigned"
4652640,4660880," holy shit i didn't think about that do i want to care about signed unsigned shift right now i really don't"
4660880,4673120," want to care about that fuck uh anyway so let me see uh this is too much text uh so in a logical shift in"
4673120,4681600," instruction also referred as unsigned shift the bits that uh slide of the end disappear except for the um"
4681600,4687600," the right one arithmetical shift versus logical one yeah yeah so i think this is going to be logical"
4687600,4694480," one for now um and the spaces are always filled with zeros logical shift are best used with unsigned"
4694480,4710560," numbers uh so the intel syntax uh dst logical shift to the right by src bits okay that looks nice so shift"
4710560,4724400," dst by uh-huh so this is gonna be pop racks right so we have pop racks and pop rbx then uh we need to do sihr and"
4724400,4734160," the destination in our case we already established that in a simulation op a shr so the destination is"
4734160,4741840," b that means i need to do rbx racks uh and after that i need to push it back all right i push rbx back"
4741840,4749200," surprisingly the assembly implementation is kind of similar to the uh to the simulation so that's pretty"
4749200,4757600," cool cool right we even use the same names like racks rbx ab and yeah that's pretty straightforward um okay"
4757600,4762640," so shift left i'm pretty sure shift left is gonna be the same shit uh so i'm gonna just like put it like"
4762640,4768800," this and this is gonna be shift left all right so we already implemented compilation for two or for two new"
4768800,4782080," operations so bore um let's see uh to do to she ld double precision shift uh so the names of double"
4782080,4788560," precision somewhat misleading because they're listed in extended shifts uh they're available for use with 16"
4788560,4797600," institute uh okay so it's like a legacy stuff okay nobody cares about that um so uh logical or uh"
4799600,4812640," inclusive or logical inclusive or so operation destination or src i guess"
4812640,4824000," uh-huh so it's literally called or isn't it i think it's literally called or so if i go to uh here right"
4824000,4833840," and uh switch to nazem mode do you have or okay it highlights or do you have and it highlights and i"
4833840,4841280," would presume that maybe or and and could be implemented similarly um so i can only assume"
4841280,4846000," it would be actually kind of cool if the the entire implementation is just like that"
4847520,4854480," uh right so this is going to be or can you just copy paste it as well uh that would be kind of cool if"
4854480,4861440," i could copy paste it so this is the band all right so is that it is that it can i compile the entire thing"
4861440,4870160," uh okay so i forgot to update my thing in here uh all right so instruction expected um oh it's not banned i'm"
4870160,4884320," sorry um so it has to be uh invalid combination of opcode and operands okay that's cool um it's very interesting so"
4884320,4887520," really"
4887520,4897760," uh to shift left so it just doesn't work like that uh is that because you cannot use like two"
4898960,4903440," things in here"
4903440,4911680," so let's go back i wonder shift and rotate so destination"
4911680,4923040," i'm afraid that there is no variant of shift left and shift right with two registers like i'm really"
4923040,4927600," really really afraid that that is the case so if i go to shift left"
4927600,4935360," do we have uh yeah so did you mean i mean i meant that uh register memory"
4941920,4947120," what is the cl what is the cl hello deep singularity hello hello"
4947120,4953520," multiple by cl times"
4953520,4959360," what is the cl i'm not sure what is the cl"
4962720,4977200," what is cl register is that like literally the name of the register oh okay so it's okay i see i see"
4977200,4996560," for some reason like i didn't expect it to be called like that i thought maybe it's a category of a"
4996560,5002560," register okay so i see so i have to put that into rcx and stuff like that so you can't shift more than"
5004320,5011520," 255 time like beats which is like i guess fine because you don't really need to shift that far"
5011520,5018160," anyway right so 255 is already bigger than 64 right and 64 like after that it doesn't make any sense"
5018160,5023760," oh all right so i just didn't expect that you are given such a small amount to shift"
5027440,5032560," i would be afraid to do and seal register somehow well i need to because i don't know what what are"
5032560,5038720," those registers uh all right so i suppose what i have to do in here okay i guess we'll learn"
5038720,5048000," something um when i do shl and shr right instead of rex i have to do rcx right i have to do rcx"
5048560,5057280," and just hope that the lower bit of rcx will contain the right value uh right so this is gonna do that"
5057280,5064320," and because of that i'll have to put cl in here uh right oh it's not it's not the right thing i'm doing"
5064320,5079280," the wrong thing uh damn uh so this is rcx uh cl uh rcx cl hopefully that will uh okay cool thank you"
5079280,5088080," thank you so much of course um so yeah that thing compiles at least now that thing at least compiles"
5088080,5092800," so let's try to run it as well and see if it produces it produces the same output so as you can"
5092800,5100480," see uh it produces the same output as the simulation right so yep we successfully implemented that that's"
5100480,5109840," pretty cool uh so i wonder if i can run the tests uh and just like see if there's no discrepancy between"
5109840,5115920," these things and if i take a look at zero six bitwise as you can see there's no discrepancy in here"
5115920,5121520," we can try to introduce some discrepancy just to see uh that something is incorrect for example for"
5121520,5127760," shl we can replace it with r and obviously that is incorrect and just see if our tests will catch that"
5127760,5136160," and they indeed like uh catch that uh so yeah unexpected compilation output so expected that thing"
5136160,5143280," but the actual was this thing uh right so that's pretty cool so our tests actually catch this kind of"
5143280,5148960," stuff all right we implemented four new operations that we can use for rule 110"
5148960,5157280," and that is very exciting that is in fact pretty exciting uh so let's do what let's do a committee"
5157280,5160160," committee and maybe even a pushy pushy what do we need"
5160160,5170640," so this is going to be txt this is going to be forth uh i recently actually set up a ci continuous integration"
5170640,5176480," right so i run this test on ci and one thing i want to do i think i'm going to create a separate branch"
5176480,5184480," and make a pull request so it double checks everything uh so rule 110 so this is going to be the new branch"
5184480,5200960," and uh let's do a committee committee implement uh for new operations uh shr shl bore uh band"
5200960,5210960," is it logical i think it's uh i don't remember what yeah i think it's a logical shift logical shift"
5211760,5225840," right logical uh shift left uh bitwise or bitwise and right so that's basically the things we're"
5225840,5233440," implementing i'm going to push that right into the repo all righty so we have everything um for"
5234160,5244640," to implement this thing we have everything to implement that stuff so the question is um i'll need to"
5244640,5251600," organize this loop so this is some sort of like a for loop right this is some sort of a for loop and"
5251600,5260640," oh boy um that means i need two elements on top of the stack right i have two elements on top of the stack"
5260640,5267440," and i also need to keep a pattern somewhere the question is do i want to keep the pattern on the stack"
5267440,5273600," along with like counter and upper value or do i want to keep it somewhere else"
5273600,5285360," to be fair i know uh the board uh like the upper value so i can actually re-implement this entire loop"
5285360,5299840," slightly differently um let me let me see so here is so i implemented this style of loop right while to"
5299840,5310960," dupe less uh do duplicate print one plus and then i ended everything right if i do fourth simulation full"
5310960,5322800," forth um so it did a strange thing it's actually done okay so this is this this is the style of loop so"
5322800,5329600," this style of loop makes sense when you want to know this value at runtime but i kind of know it at"
5329600,5337440," compile time if i hard code it like so uh what i can do essentially i can do 30 i can actually do dupe"
5338160,5348320," 30 and maybe like move it to the uh to the different thing uh and yeah so that way i only maintain one"
5348320,5357680," element on the stack uh which means i have some space for the pattern i can keep the pattern on the stack as"
5357680,5367200," well so that sounds pretty reasonable i would say um so this is how we can organize that loop and we can"
5367200,5376000," reorganize other loops like this as well so this could be reorganized like that um this could be"
5376000,5380800," reorganized like that there's no reason to to make it like that maybe i can do it right away so it's gonna"
5380800,5395360," be this dupe 30 less right uh and it's gonna be like a drop in here this is gonna be zero dupe 30 uh less and that will"
5395360,5401840," require a single drop in here as well um so yeah that's actually a little bit easier um"
5401840,5411360," okay so if i try to uh run the entire thing uh okay so that didn't break anything this is actually nice"
5411360,5417520," uh that didn't break anything and can we compile the entire thing and also it compiles cool"
5420080,5431840," all right so let's go um so we're gonna be iterating starting from one while dupe 28 less do and this is"
5431840,5439360," gonna be the end so this is the second loop in here this is the second loop and where are we gonna have a"
5439360,5450880," pattern where are we gonna have a pattern"
5450880,5456320," so first i want to read the first element from the board right so this is going to be the first element"
5456320,5464080," from the board uh then i want to shift it by one to the left and read the second one and also order it"
5465280,5473760," okay let's try to uh code this thing so this is essentially just memory we read that thing and we"
5473760,5481200," have the character on top of the stack then i do one and i shift it to the left right so that gives me"
5481760,5491760," uh this value right so that gives me this value then i do memory um one plus so this is the next one and"
5491760,5500400," i read it right so then i read it like that uh and i don't really need to shift the entire thing right"
5500400,5506960," so the only thing i need to do i need to just do bore and there we go so this is equivalent of uh this stuff"
5508160,5514320," uh so i think to be able to separate the comments i'm going to do something like this uh okay so we're"
5514320,5520320," going to use the c as a highlighting i can also use pascal mode i suppose uh yeah let's use pascal mode"
5520320,5529280," because it also highlights and as well um all right so that gives me the pattern uh and shift left"
5529280,5535920," shift right so this is a bore and we start the iteration all right and this is going to be plus one"
5536640,5542080," so after that after the loop i need to drop the index and i also need to drop the pattern"
5542080,5550320," right so i drop two values and then we continue uh iterating over and over again um okay so this is just"
5550320,5562320," the pattern uh so we're almost there by the way we're almost there so then uh i need to sort of repeat"
5562320,5576720," the entire thing somehow uh i need to repeat the entire thing uh huh so at here um so here's the stack"
5576720,5584400," i have a pattern and an index right so what i need to do i need to get the pattern so i'm going to do swap"
5585040,5591600," swap in this entire thing puts the pattern in here right so it's uh puts it in here the next thing i"
5591600,5598400," want to do i want to shift it by one to the left right so as you can see i'm shifted uh to the left"
5598400,5606480," by one so it's going to be one uh shl there we go so we have pattern uh shifted by one right so this is"
5606480,5618400," what we got then i need to read the board j plus one right so that means i need to swap the index back"
5618400,5622000," right i need to swap the index back so this is going to be small"
5624080,5634880," then i need to duplicate that index that gives me the index then i need to get a memory by that index"
5634880,5642000," so i put a memory in here and i sum it up so that results in this entire thing right that results in"
5642000,5649440," this entire thing and i think we're already starting to get a problem in here because if i try to read the"
5649440,5657440," memory uh from here right here is the character and i already lost the pattern right i already lost the"
5657440,5665280," pattern i cannot do anything with this entire thing unfortunately unfortunately i need to sort of"
5665280,5674080," get this entire thing like swap these two elements right somehow and that's already kind of a problem"
5674080,5678640," it's already kind of a problem so i need to reorganize this entire stuff somehow"
5679440,5688080," otherwise i won't be able to do that hello hello everyone how are you guys doing"
5688080,5699200," so i think i'm a little bit tired so i'm going to make a small break and after the break we're going"
5699200,5709200," to continue doing this thing um all right so um let's continue um so i think the storing pattern"
5709200,5718240," on the stack was rather a bad idea or maybe we can still salvaged it by maybe rearranging some of the"
5718240,5730400," operations maybe we'll be able to do that i'm not sure um so i can duplicate some stuff i can duplicate"
5730400,5740400," indices indices i don't think it is possible unless we implement some operations from fourth i kind of"
5740400,5745680," want to implement operations from fourth like stack operation from fourth because they were designed by"
5745680,5752400," people who used fourth for quite some time so they figured out what are the most like common operations"
5752400,5758400," that you want to do in a stack based language so um when i follow the fourth standard i'm specifically"
5758400,5763760," following it for the stack operations right because i think that particular part of the language is"
5763760,5768560," developed well so there's there are some things that i would like to change about fourth specifically"
5768560,5774080," i would like my language to be statically typed uh because fourth as far as i know it's more of like"
5774080,5780000," a dynamically typed thingy right but mine i wanted to be like statically typed and verified just like"
5780000,5786400," web assembly uh web assembly uh so we'll see so web assembly has a very interesting step of verification"
5786400,5793280," which like um checks that you can perform operations that you're trying to perform all right"
5793280,5800000," um all right so what i wanted to do i want you to take a look at the standard of fourth and just like"
5800000,5807440," see what kind of stack operations that we can find useful and just implement them uh so new pdf"
5807440,5818640," and let me take a look at the stuff uh so where is the uh alphabetical list of words"
5819760,5827360," so there's a two dupe uh maybe you can use two dupe actually if you think about it"
5827360,5839200," well yeah i could have just used to dupe could i could i not probably not so there's two or um"
5841280,5849840," two over copy cell pair one two to the top okay so this is a two over so there is probably a thing"
5849840,5854960," called over then uh all right so let me find uh"
5854960,5864320," two two two if there is a two over there must be one over and that could be a thing that we want to have"
5865600,5874880," that might be the thing that we want to have so all what it's not over till it's over there is such"
5874880,5883760," thing as over so is a bit by bit inclusive or of x and oh that's i'm reading the wrong thing uh place"
5883760,5888960," a copy of x1 on top of this stack okay so it's like over i'm sorry sir remote"
5888960,5894800," i'm so sorry um i know that you're allergic to cringe i didn't mean to"
5895600,5901040," um um all right anyway um"
5901040,5912480," uh where is my stuff where is my stuff uh so we have pattern and"
5912480,5923840," pattern and an index right so i swap this thing uh so here's the pattern then i put this and then i do"
5923840,5932480," shift left right so this is a shift left and there we go uh after that the thing i want to do i'm swapping"
5932480,5940720," this back um well so instead of swap i can do over uh all right and that will give me an index right"
5940720,5948560," after that we want to put memory um we don't even need to duplicate we can just do over uh then we do"
5948560,5959440," plus uh plus uh right then plus um and then this entire stuff gives us the character the essentially"
5959440,5966720," the cell okay this is actually perfect this is actually absolutely perfect because now uh the thing i"
5966720,5976400," want to do right uh is essentially just or this entire thing together perfect this is precisely"
5976400,5983600," what i was talking about they perfected the set of the data stack operation uh over the years right"
5983600,5988160," because they've been programming that language and that's why i'm trying to you know like reinvent stack"
5988160,5994960," operations because i know that people who uh made force they actually thought the set of stack operations"
5994960,6003200," through really really well um so that's pretty cool but after i um shifted to the right by one i forgot"
6003200,6009200," that i need to order it with seven right i need to order it with seven so let's actually do it like this"
6010160,6020720," uh two two two two so this is a shift left uh right so this is a shift left um and i want to put seven"
6020720,6027120," seven seven seven seven and it's not really or it's a band right and that's i think is going to be"
6027120,6038160," essentially seven uh then cool then we copy the index add memory right and memory plus then we read the cell"
6038160,6049040," all right read the cell and then uh i do bore which basically combines this entire stuff and there we go"
6049040,6058480," here is the pattern here is our pattern that's pretty cool uh this is more of like a more like a new"
6058480,6065920," pattern if you know what i'm talking about uh so maybe we can even rename it to like a new pattern so here it is"
6065920,6072240," so it's just like a shortcut for for the new pattern in here uh the next thing we want to do all right we"
6072240,6088000," want to look up the new thing by that pattern so essentially um i need to push 110 right and that pushes 110 like this"
6089680,6098560," uh it pushes 110 like this and the next thing i want to do i want to do over over is such a perfect operation"
6098560,6107280," yeah this is precisely what i want to do i do over right i do over uh what the fuck is going on right i do over"
6107280,6116000," that copies the pattern that copies the pattern in here and then i do s h r right i do s h r uh and that"
6116000,6128880," makes it like this okay and then i need to put uh one in here and do band and that will turn it into like that"
6129760,6140720," so this is uh the new cell that i need to save into the board right so i think i need to open like two"
6140720,6146400," things together so here is the stack that i'm maintaining here is the uh reference and here is"
6146400,6153520," the actual implementation okay uh and now right i need to save that into the board so that means i need to"
6153760,6160960," get the index somehow i need to get the index somehow and we lost the index"
6160960,6166240," fuck shit fuck damn"
6166240,6173440," so everything is so complicated"
6173440,6177200," yeah we lost the index"
6181120,6187760," so maybe we want to start over maybe we want to start over because like there's no way i can"
6187760,6191360," get the index from here like there's no way i can do that"
6191360,6194240," shit"
6194240,6200480," so maybe if we go back right if we go back"
6209360,6212560," what i want to do here is essentially"
6212560,6223840," maybe i want to duplicate these two things right i want to duplicate these two things"
6223840,6234960," uh and that way i do two dupe right i do two dupe and that gives me this step right and after that i push"
6236960,6242480," then antonio thank you so much for uh seven months of two one subscription thank you thank you thank you"
6242480,6246080," uh and welcome to epic dupe club"
6246080,6254880," uh all right so this is what we have and now i suppose"
6254880,6261040," um also i think i fucked up uh because this is supposed to be"
6262480,6270880," uh memory plus and one plus right so because we're taking j plus one right so uh over we're copying the"
6270880,6279680," index over memory plus one plus and only then we do uh the bore on that thing anyway so this is the new"
6279680,6288640," pattern and i need to push uh 110 in here one one i think i'm starting to understand why it is called 110"
6290000,6296800," uh i think i'm starting to understand anyway so after that i need to swap these two things right we're"
6296800,6306720," swapping it and making it like that then we need to do shift right which makes it like so right so this is a shift right"
6309280,6323440," uh after that we do uh one band uh one and so this is what we have and that's pretty cool so this is the new value"
6323440,6335760," after that we need to swap the entire thing so that will give us uh this index then i do memory plus uh memory plus"
6337440,6347520," like so uh and this is essentially the address where we have to write this entire thing so we swap it back"
6347520,6364160," uh we swap it back uh like so and writing into there right and we end up in here so and after that i swap the new pattern back"
6365440,6371840," right and then we're gonna have uh one plus so index plus one and we repeat the cycle"
6371840,6380880," we repeat the cycle so i encoded this monstrosity in here and it's actually not that more complex"
6380880,6387040," right it's kind of difficult to follow through but it's not that much complex if you know what i'm talking"
6387040,6397440," about uh right so that looks fine but i would like to actually go through the entire thing one more time"
6397440,6403120," just in case um right just to ensure that everything's fine if you know what i'm talking about"
6403120,6409440," okay so let's go ahead and just like uh go through the entire stuff okay"
6409440,6419200," uh two to the two so first we we push memory so we're starting from here so we have memory then we read"
6419200,6427280," uh a cell from the memory then we push one and we shift that cell right so it's a uh it's more of"
6427280,6432400," like a memory zero right uh it's more like a memory zero so this is the first element that we've got"
6432400,6440880," then we push mem one uh plus one and we're reading from it and we get memory one and we or"
6440880,6448560," this entire stuff and this becomes our pattern right so this looks correct then we push one"
6449120,6456320," and that becomes our index right and we constantly check it we duplicate the index right we uh check"
6456320,6462960," that it's less than 28 and if it's uh if it's greater or equal that means we're gonna stop the"
6462960,6472560," entire thing okay so here we swap this entire thing we put uh one and shift left right so this is a shift"
6472560,6479040," left is it shift left in the original one it is in fact shift left okay then i put seven and i do"
6479040,6491360," this thing uh there we go after that i copy index over here i add the memory i add one then i read"
6491360,6500000," a memory uh essentially by that index so this is a memory plus one and i do or uh between those things"
6500000,6508960," right and this becomes my new pattern okay cool so then i duplicate these two things one one all"
6508960,6520080," swap this stuff around uh shift right then one and end uh right and that's the um the new the next"
6520080,6534480," value then i swap this stuff around one more time uh plus memory uh plus memory uh plus memory then swap this stuff"
6534480,6544400," uh back back and essentially i save this value into this address like so and then i swap these two things"
6544400,6549760," and the cycle repeats uh and essentially also index is going to be possible okay so that should be it"
6549760,6556400," so i went through all the operations and they seem to be reasonable uh the only problem is that we don't have"
6556400,6567520," this is how it looks in port right so uh hello mk mxkwl hello hello so yeah everything seems to be reasonable"
6567520,6576160," uh and this is how it looks in porth right so this is the entire implementation in port and this is the"
6576160,6585360," entire implementation in c not that much complex for such a low level language um so some of this stuff"
6585360,6590080," it's even thinner right so some of these things could be probably put on the on the same line"
6590080,6599120," and you could yeah so you can stretch it up but i just decided to not to stretch it up um so it's not that much more complex um"
6599120,6611840," um so hi just wanted to ask how is it called when you write define something implementation when using"
6611840,6619520," some header on the library so i suppose what you're referring to uh craftwork is um a trend started by"
6619520,6626480," sean barrett in his stb libraries i think i pronounced his name correctly just a second uh sean barrett right"
6626480,6633760," so he started that trend in his stb libraries and essentially the idea of that thing is that"
6633760,6642320," a header on the library acts like both header and a c file right and essentially when you include that"
6642320,6648720," header it by default acts like a header and if you want it to also act like a c file you have to define"
6648720,6655360," uh something implementation in front of it i'm not sure if this technique has any name"
6656080,6662800," right and this technique as far as i know it's described in docs in here so stb how to right so"
6662800,6668160," define implementation use a symbol like the above to control creating the implementation i use a far"
6668160,6672880," less clear name in my first blah blah include a header on the section with the header file guards and"
6672880,6679280," inclusion for all of the files but only guard the implementation with a library implementation right so"
6680160,6687200," i don't think there is a name for that right so the first instance of mentioning this technique i saw is"
6687200,6695920," in this specific section um i don't know so maybe like define like implementation guard or something i"
6695920,6702880," don't think there is any name for this kind of stuff but yeah so i think it was popularized by sean barrett"
6703600,6713600," okay i'm gonna also put this entire thing in the description uh so stb how to text"
6713600,6715600," um"
6715600,6724720," all right so let's try to run this entire thing i'm a little bit nervous because what if i"
6724720,6731200," fucked up something um well i don't even know how to troubleshoot this entire thing we don't really have"
6731200,6737680," a debugger for this entire stuff and uh so let's see uh unknown word over okay so we also need to"
6737680,6745600," implement over of course i'm i'm using non-existing word of course uh to the two so let's go ahead and"
6746640,6751760," do it like that so where is the stack operations where is the stack"
6751760,6759760," uh comparison stack manipulations swap"
6759760,6772160," over um can i just use like place a copy of uh on top of the stack this is such a cool notation maybe i"
6772160,6776880," should start using this notation as well uh but i'm not sure i'm using slightly different notation"
6776880,6794000," so a pop uh b so this is the top then uh pop b right then i push kind of b back and a back and also a"
6794000,6801200," and also b yeah there we go so this is the top this is this thing below the top i push it back i push a"
6801200,6805760," back and i push this thing on top i think okay so this is basically the the implementation"
6805760,6816640," all right so this is going to be over uh and let's go ahead and uh just implement this into operation"
6816640,6820560," so there's a dumb band um"
6822480,6835760," two dupes swap drop op over uh i alter um so maybe it also makes sense to add it right away to the stack"
6835760,6847280," stack tests uh right so i didn't have a way to print a line a separation line in the output so i printed like"
6847280,6853360," one one one one one one one one and this is my separation line in output at least for now right"
6853360,6865520," at least for now 69 42 uh over and um dump right over and dump and then we can do drop drop maybe it"
6865520,6872960," doesn't even matter right so essentially it should print 69 right because it copies uh 69 over and just dumps it"
6872960,6886720," okay okay so uh let's go and i'm gonna do simulate uh tests uh zero one stack forth all right so it"
6886720,6891680," complains about this thing let's do setting let's find the place where um"
6894000,6899760," uh where we need to parse this into i think so we have swap and drop and this one is going to be over"
6899760,6908720," and this one is going to be over okay so here is another one nothing is required to be changed in here"
6908720,6921120," uh huh and this is this simulation this simulation of our nation where is the drop okay uh op"
6922880,6928800," type op over uh a stack pop"
6928800,6931680," b stack pop"
6931680,6936880," uh stack push b"
6936880,6938960," a"
6938960,6943120," b okay and then we also implement plus one"
6943120,6952000," uh 11 this is called implementation by the way which one simulation or compilation so in simulation we literally"
6952000,6956080," simulate specific things and in the compilation uh"
6956080,6960720," yeah so we have syscall one two three and four five"
6960720,6966720," i mean it's for now all right right so it was like the easiest way to implement for now later we're gonna"
6966720,6971120," make it a little bit better right so it's this entire thing is still proof of concept"
6972160,6979120," right right okay so push there's no such thing as push and let me do append"
6979120,6989520," uh there we go so it's supposed to be 69 cool and let me capture the outputs right so record"
6991760,6996080," so and this is the new expected output for the new test"
6996080,7005760," and let's go ahead and try to to compile the entire thing so it's going to be compile tests"
7006400,7012160," there we go there one stack forth and there we go so it's going to be setting"
7012160,7027600," uh to to drop okay oh if op type op over out right one two three four over like this"
7031040,7043280," pop uh racks rbx push rbx push rbx it again so do over so it could be probably implemented way"
7043280,7050720," more efficient by directly taking the element over the entire thing but optimization is outside of the"
7050720,7061520," scope right now um all right so let's continue okay this seems to be compiling and if i try to run the"
7061520,7067920," entire thing it actually brings a 69 okay that's cool so let's run the tests and confirm that everything"
7067920,7073680," is okay so everything is passing as far as you can tell which is cool uh and we have all of the necessary"
7073680,7079680," operations to run the rule 110 implementation and i'm not sure if it's going to work or not right so i"
7079680,7088640," i never tried it i went manually it theoretically should work but again you never know ah the moment of"
7088640,7097920," truth the culmination of today's stream right will rule 110 work uh let's try to simulate this into"
7097920,7100800," anything and see if it's going to work well"
7104320,7115280," ggs ggs port is officially turing complete there we go at least in the simulation at least"
7115280,7120880," in the simulation it is turing complete right so we can remove this thing so it looks more like this"
7120880,7129920," all right and maybe i want to actually do 28 so it like it's like a perfect triangle and whatnot uh so it"
7129920,7135600," works in the simulation let's try to compile it right let's try to compile it it seems to be compiling"
7135600,7144800," and uh here we have assembly of rule 110 uh right generated from force and we also have an executable"
7144800,7150880," right we also have an executable which we can see that it's uh uh you know it seems to be working so that"
7150880,7160960," was kind of sus wait a second so there's something sus uh something is running here i don't understand"
7160960,7168080," what is running uh anyway so this is rule 110 and there we go so the compiled version works as well"
7169200,7176320," the compiled version works as well that's pretty cool unfortunately we don't have any ways of"
7176320,7181680," obstructing things all right so it's kind of difficult to increase the amount of elements"
7181680,7192000," uh one thing you can do if you want to have like 100 elements instead of 30 you could replace 30 with 100"
7192000,7203280," right and you could replace 28 with uh 98 there we go so that way uh you're going to have uh 100 elements"
7203280,7212240," holy look how slow simulation is this is the simulation using python you can literally see how it prints"
7212240,7224320," everything and it takes 1.5 seconds to actually simulate this entire stuff right so look how slow it is in"
7224320,7237200," simulation but if i try to compile this entire thing right uh it takes 20 milliseconds it takes like okay so up"
7237200,7244880," to like 30 milliseconds so if you compile it into into native code it's way fast like magnitudes even"
7244880,7249760," though it's kind of slow for this entire thing because if you take a look at the c version right"
7249760,7255680," so do we have a c version uh so let's actually put like 100 in here"
7255680,7266800," all right uh okay and now if i take a look at the time yeah the c version is actually"
7267200,7271840," three milliseconds so we're slower than c unfortunately but we don't do any optimizations"
7271840,7277440," though right so uh the code that is generated assembly that is generated is actually pretty dumb"
7277440,7284240," so uh i think it's forgivable and we are only at the um we're only at the early stage of the development"
7284240,7289920," right so it's 30 times slower than c but we're gonna work on that i'm gonna improve that in the future"
7289920,7296240," that's for sure but this entire ship is already turing complete and i'm super happy about that like"
7296240,7304480," holy fucking shit uh so i already prepared the loop uh for debugging the entire thing because i didn't"
7304480,7312240," know if it's gonna work first try but it worked first try so and i think i'm proudly going to place"
7312240,7325360," a rule 110 into the folder with examples right and here is the thing uh so we have uh turing complete right"
7325360,7334400," all right so i'm gonna remove this part and i'm gonna redirect to examples rule 110 uh force"
7334400,7343200," rule 110 force and officially say that this entire thing is done our language is finally turing complete"
7343200,7350240," it's compiled native stake based just like forth and turing complete and here is the proof that it is in"
7350240,7356320," fact turing complete so the next thing is going to be statically typed but i'm not sure if i want to"
7356320,7362640," implement statically type static typing before i made it self-hosted because again implementing more features"
7362640,7369040," means that implementing uh this thing in itself is going to be more complicated so i think i'm going to"
7369040,7377840," first try to go for self-hosting and after we rewrote rewrite rewrite the compiler in itself right we can try"
7377840,7387440," to think about static typing similar to a buzz and validation step so yeah uh that's pretty cool okay uh"
7388560,7397600," one two two two two two two so we have this thing so this is the fourth uh uh so we have a like a bunch"
7397600,7405360," of garbage in here that is not really neat uh so here is that this is three incomplete rule one one oh"
7409680,7424080," uh all right i'm gonna push that right into the repo and we're gonna make a pull request"
7424080,7434960," uh so let me see it's gonna be sodding fourth there we go there we go so of course you can find the source"
7434960,7440080," code of this thing in the description if you're watching on youtube if you're watching on twitch"
7440080,7452720," you can find the repo in here actually in here i mean can you elaborate about how you envision functions"
7452720,7463200," in ports uh i don't really have any particular vision but i want the functions to be compatible with c"
7463200,7469520," meaning that uh whatever function you make in port is going to be callable from c and whatever function"
7469520,7474480," you have in c it's going to be callable from port so i want to have that for easier"
7474480,7481200," re-usage of existing libraries because i want to try to use different libraries in port specifically"
7481200,7487280," i want to try to write an opengl application in port some sort of a simple game that uses gpu and whatnot"
7488160,7493760," so i have plans like that uh how exactly am i going to implement that i don't know yet we'll see"
7493760,7502160," uh i have a couple of ideas but i'm not sure about any of them um"
7506800,7517200," all right so uh let's make the uh pull request uh to implement rule 110 and forth and since we have"
7517200,7527680," a ci uh it should check uh this stuff on ci hopefully uh 222 173 changes which is kind of nice"
7530240,7534000," so this is the interpretation i'm really glad that rule 111 actually turned out so"
7534000,7541840," simple uh relatively it could have been more readable more simple um leap port and what it's"
7541840,7548240," okay leap ports coming anytime soon uh i'm not sure what leap port is supposed to do to be fair"
7549200,7561760," um all right so here are all of the changes here are all the changes and so let's wait for ci okay"
7561760,7567200," so i seems to be passing so i'm going to merge this thing uh right into the repo and we're going to delete"
7567200,7576400," the branch so the thing i want to do also i want to get rid of all of this garbage get clean fdx uh and then"
7576400,7586560," go so no more garbage the repo is clean and here in the examples we have uh rule 110 implemented so this"
7586560,7594800," is going to be uh fourth compile and also run examples rule one one all fourth and there we go we have rule"
7594800,7602320," one one all all right so today was a pretty productive stream not gonna lie thanks everyone who's watching"
7602320,7608080," me right now i really appreciate it have a good one and i see you all next time i don't know where i don't"
7608080,7614560," know when uh check out uh the all of the stuff in the description if you're watching on youtube if you're"
7614560,7619840," watching on twitch check out the youtube channel where i'm gonna upload this entire thing and it is"
7619840,7626480," time for me to go it is time for me to go so the next time we're gonna try to start implementing a self-hosting"
7626480,7631600," for this compiler right i want to implement self-hosting for it as early as possible until the"
7631600,7636640," compiler becomes too complex uh and uh you re-implementing it in itself is going to be too"
7636640,7640800," too painful right we'll see how it will go we'll see how it will go we'll see how it will go"
7640800,7644800," right thanks everyone for watching love you"
