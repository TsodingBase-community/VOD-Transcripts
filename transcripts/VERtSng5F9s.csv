start,end,text
720,7280," What's going to be the next feature that we implement for our language?"
7280,16080," Well, one of the interesting features that we will need for self-hosting is an ability"
16080,23680," to access command line arguments, right? Because compiler has one input, right? It's the file,"
23680,27840," the source code, and the second input of the compiler is all the command line arguments that"
27840,33280," you can give it. Right, in fact, if we take a look at the command line arguments of our language,"
33280,38640," right, so there's like a usage function, right, so this is going to be def usage,"
38640,45280," so we have a lot of stuff and all of that is provided via the command line arguments."
45280,53360," What's interesting is that we already discussed that in the past, we already have a support for"
53360,59200," command line arguments by accident, completely by accident. So I'm going to demonstrate that one"
59200,68960," more time. So let me do the following thing, full ports, right? So what you can do in language,"
68960,74720," you can push some numbers onto the stack, and then you can drop those numbers from the stack. So this"
74720,79520," is a completely useless program. It pushes two numbers in the stack, and it just drops them,"
79520,84480," right? And it will literally print nothing. If I try to simulate this program, right, so this is going"
84480,89760," to be full ports, it printed nothing. If I try to compile it and run it, it will also do nothing."
89760,97520," But if you try to drop something that is not on the stack, so the stack is empty, and you try to drop"
97520,102800," something from there, if you do that in the simulation, right, if you do that in the simulation,"
102800,108880," you will get a stack under flow and Python runtime will basically throw an exception. But what's"
108880,114320," interesting is that if you compile it, right, the port is unsafe language, by the way, so you can do a"
114320,121440," lot of nasty stuff in it. It will not fail, but it will actually print something. Well, instead of drop,"
121440,127760," you have to do print. Print is like drop, but on top of dropping thing, it also prints what it dropped."
127760,134000," So let's take a look at what's going to happen, right? It will print one, right? It will print one."
134000,140640," And if you try to print one more time, if you try to drop another frame, it will also print a very big"
140640,148000," number. It will also print a very big number. If you provide more arguments for the program, right,"
148960,160720," the first number will increase. So, and this is because we use the actual like x8664 stack. We actually"
160720,168000," use the call stack as the stack for our program. And here's the interesting thing about Linux and x8664."
168000,175360," The command line arguments, the argc and argv are passed by the stack. So what we're observing in here,"
175360,185040," we're observing argc and argv. So technically we already have a support for command line arguments,"
185040,192160," but it's undefined behavior. That's the problem with this thing. It's an undefined behavior. So what I was"
192160,199040," thinking is that let's actually go ahead and take this undefined behavior and make it defined. How about"
199040,206000," that? Does it sound cool? But to make it defined, we need to add support for this kind of thing for"
206000,214720," the simulation mode, right? So we want to be able to have that in the simulation mode as well. And only"
214720,222720," after that, it will become a defined behavior. So this is how we turn bugs into features. That's pretty cool."
222720,228160," Right. So we found the bug, but it turned out to be features. So yeah, that's what we're doing. That's"
228160,233760," what we're doing. All right. But the first thing I want to do, actually, I want to write a program that"
233760,239200," iterates through command line arguments, right? And just prints all of them, right?"
241920,252880," Is that portable though? A portable across what? Right now we support Linux and exit on x8664. So right now"
252880,260000," the compiler supports only one platform. And I would say that this is portable across all of the supported"
260000,269040," platforms. So yeah, so it was just like you support one platform and it's portable across all the supported"
269040,275520," platforms. That's easy. Okay. So, uh, we're going to do something like argv and porth, right?"
275520,283040," So let's actually write, um, a simple program, uh, that basically iterates through all of the arguments"
283040,291360," and just to print them. Uh, this could be a problem. I think, I think this could be a problem because the argv"
292160,299760," are null terminated. So, and we have no way to print null terminated strings, unfortunately."
299760,309920," Uh, to, to, to, to, uh, so I'm not even sure. So is there any easy way for us to do that?"
309920,317840," Uh, maybe we can have a macro. Um, that calculates the size of the new terminated string."
319120,322640," Yeah. Let's create a macro that calculates the size of the null terminated string."
322640,334720," So, uh, std dot porth, um, okay. So this is going to be a macro std len, right? And, uh, here, uh,"
334720,341680," the input of this macro is going to be the pointer, right? Um, this is going to be the pointer and, uh,"
341680,351680," we're going to have, uh, a counter in here. So we push zero and there we go. Uh, so maybe,"
351680,358800," maybe, maybe, maybe, maybe, uh, I'm going to do actually swap, right? So that means the counter"
358800,369120," is going to be somewhere here. Uh, and we're going to have a loop while dupe, uh, and then"
369120,376320," we're going to read the byte, right? So reading is actually, uh, a comma, right? We read the byte,"
376320,382880," uh, right? And we compare it with, uh, zero, right? While this entire thing is not zero,"
382880,388800," we're going to keep iterating, right? We're going to keep iterating. So, and what we have in here is"
388800,394720," essentially, uh, pointer, and I suppose we need to increment the pointer. So we need to swap and"
394720,403600," actually we need to do one plus. So that will increment this entire thing, uh, one plus, then we need to"
403600,412160," swap, uh, which will give us this thing. And then we have to do one plus one more time and then swap one"
412160,422560," more time. There we go. So, uh, that's pretty much it, uh, I think. So after that, uh, we just need to"
422560,430000," drop the pointer, right? We just need to drop this pointer and that way we essentially transformed, uh,"
430000,439840," we essentially transformed the pointer to the string to the size of the string. Not bad, I gotta say, uh, not bad."
441360,446880," It's not a std len, it's actually str len. So let's actually test this entire thing. So if we have a"
446880,454640," hello, uh, world and, uh, we also put, uh, like a zero in here, uh, here's an interesting thing. Uh, string literal"
454640,464720," puts, um, I think it puts the size of the string and the pointer. So if I do str len, uh, I'm gonna have,"
464720,472000," yeah. So if I print it two times, uh, first thing is going to be the calculated length. And the second"
472000,478720," thing is going to be the length of the whole thing, including the zero. Yes. Including the zero. So the"
478720,484640," first length is going to be, uh, this one, uh, 12 characters. And the second one is going to be 13"
484640,491760," characters. So this is what, what I would expect in here. So if I do porth, uh, simulate, uh, argv, uh,"
491760,495600," there we go, there we go. So this is precisely what I said. The first one is going to be 12 and"
495600,501280," the second one is going to be 13. So we have a macro for calculating the length of the new terminated"
501280,507200," strings. Now, isn't that cool? Uh, so it's actually so cool that I think I'm going to add"
507200,511600," this macro to the standard library, right? So this is how we develop a standard library,"
511600,516400," right? Every time we need something, we just implement that. And, uh, if it sounds useful"
516400,520320," enough, we're going to add it to the standard library. So we already have a couple of things"
520320,525280," in here and also syscalls and stuff like that. And the standard library is only growing."
526320,539840," It is only growing. Okay. So, uh, to, to, to, to, uh, to, to, to, to, to, to, to, to, so argv. Um, now,"
539840,552000," so the first thing on the stack, uh, is argv, right? So we know that for a fact, uh, the second thing,"
552000,559600," and, uh, argc, I'm sorry, argc. The second thing is argv, right? And, uh, we need to turn that into,"
559600,564800," uh, into something useful. Um,"
564800,574480," uh, so did we F, uh, I didn't see any FH to be fair. Everything seems to be okay. Okay. So let's"
574480,584400," do the following thing. Uh, duplicate like while dupe, uh, uh, greater than zero, right?"
584400,590640," A while argc is greater than zero. Uh, we're going to do this thing and how are we going to be doing all"
590640,598160," of that? Well, I think we need to swap this entire thing, right? And just extract the next stuff from it."
598160,603360," And I suppose we'll have to swap it back, but, uh, we'll see. Uh, okay. So we've swapped this."
603360,612640," Then I need to, I suppose I need to duplicate this argv, right? I want to duplicate it. And after that,"
612640,621120," I want to dereference it. Um, so it points at another pointer. That means I need to dereference"
621120,629520," it as a 64-bit number, right? There we go. So I got that. Uh, so after that, I need to compute the"
629520,635920," length of this entire thing, right? Uh, so that means I will need to duplicate it, right? I need to"
635920,646000," duplicate it and do str len. And that will give me this thing. So, and I want to feed this entire stuff"
646000,654320," into, um, uh, coma 64. Yeah, coma 64 was actually recently introduced by, uh, I forgot their nickname."
654320,660960," Just a second. So, uh, people are actively contributing to, uh, to the compiler, uh, intrinsics"
660960,668480," followed in store 64. Um, so they were implemented by ZRTH-XN. I hope I pronounced their nickname correctly."
668480,677200," So, yeah. Uh, so we implemented those things, um, as essentially as macros, uh, and now they are"
677200,683840," intrinsics, the internal intrinsics. So they should work correctly. Um, okay. So we have a sterling. Uh,"
683840,693360," after that, I want to swap this entire thing. Right. And this stuff already becomes, uh, feedable into,"
694000,701840," um, into write syscall. Right. So now I can do something std out and write, and it will basically"
701840,708720," put it, uh, you know, print it in a standard output. So unfortunately it doesn't, uh, print the new line."
708720,712640," So we'll have to print the new line ourselves. Right. So we'll have to do something like that."
712640,718880," So after that, I need to increment this counter. Right. So we'll probably have to do something like,"
718880,724240," like this. Uh, so one plus, so that increments this thing. Um,"
724240,738320," one plus only makes sense for the, um, for the C where we have a proper pointer arithmetics."
738320,745200," Uh, my brain still thinks in C, right? In C, if you do plus one, it will increment it by eight bytes."
745200,750560," Right. But in here you have to increment it by like directly by eight bytes. Uh, so"
750560,760560," now, uh, after that, I'm going to swap this entire thing. Uh, right. I'm going to solve this entire thing."
760560,767840," And I'll have to decrement the amount of arguments by one. Uh, and there we go. We finished a single"
767840,775440," iteration of the, of the loop. Oh, camel subscribed with tier one. Thank you. Thank you so much for,"
775440,781200," uh, tier one subscription, your first subscription, by the way, and welcome to epic, uh, not a camel club,"
781200,789040," but fourth club. Uh, so we have our own programming language. Uh, all right. So this program theoretically"
789040,795600," should, um, basically print all of the command line arguments, right? That's what it should do. It should"
795600,801280," print all of the command line arguments, uh, and also separate them with, uh, new ones."
801280,810960," Alrighty. So let's see if it's even compilable. So I'm going to just try to compile it and everything's"
810960,819600," compiling and let's just go ahead and run it. And it's sec faulted. Isn't that cool? Isn't that epic?"
819600,824960," I think it's pretty cool. I really like that. So if I provide additional arguments, it, uh, yeah,"
824960,832080," it doesn't work at all. It doesn't work at all. Uh, yeah. Okay. So people in the chat already noticed."
832080,837280," So the problem here is that I didn't provide like a std out to the right. So this could be prevented by,"
837280,844400," uh, like a very simple static, uh, checking. And the static checking would be if you consumed all of the"
844400,850000," arguments and you didn't underflow or overflow, all of that could be checked at compile time because"
850000,855680," the amount of inputs and outputs of all of these things are known in compile time. If we had such, uh,"
855680,862800," check, uh, I think it would have coded. Um, so, but we're going to implement that after we finish the"
862800,872240," command line arguments. Okay. So, um, let's recompile the entire thing and, uh, two, two, two, two, two,"
872240,877040," and it's still sick false. Yeah. Fucking damn it. Uh, all right. So let's actually try to understand"
877040,885520," what the hell is going on. So, uh, arg C arg V, right. So this is what we have. Uh, I want to just"
885520,891360," go through this entire thing one more time. So I swap this stuff, right? I swap this stuff. I duplicate"
891360,900320," arg V, uh, duplicate arg V and then I read eight bytes by arg V. Effectively I'm dereferencing it,"
900320,906160," right? So I'm just dereferencing this entire thing. Uh, after that I'm duplicating it, right? I'm duplicating"
906160,915760," it and, uh, uh, then I'm doing, uh, str len, right? So this is str len. Um, so after that I just need to"
915760,926240," swap, uh, this entire stuff, uh, right? Uh, swap this entire stuff and, uh, I should just do std out right,"
926240,933280," right? Because it has the, uh, the count and this entire thing, right? So that should be fine. And then"
933280,940160," we print the new line, then we increment this thing by eight, right? So we increment this thing by eight,"
940160,953440," uh, then we swap it, right? Then we swap it. Uh, and then we decrement arc C by one, uh, to, to the two"
953440,962720," arc C by one. So this is rather strange. Um, it's rather strange."
974720,984640," Uh, I think I'm an idiot. I keep forgetting that write returns the, uh, the code, right? Again,"
984640,990480," all of that could have been caught by, uh, simple static checking, right? That we dropped and checked"
990480,997040," all of the art. Oh my God. Okay. So that should work now. Uh, okay. So now if I try to do that,"
997600,1025680," still sick falls god damn it uh so maybe there's a problem with the uh the str len macro um"
1026800,1033120," don't think so i think it's fine uh does it at least simulate no that's the point"
1033120,1054000," uh that's kind of the point it does not simulate uh maybe there is a problem with i6 like 64 thing"
1056000,1068880," all right so if i do something like exiting here and uh i want to do print and print twice right so"
1068880,1075840," this is what we're gonna have in here uh and also i want to just basically print this entire thing so"
1075840,1088720," the first thing at the top is argc and then the argv okay uh so uh then uh if i drop this entire stuff"
1088720,1098400," right and then i do uh u64 uh and i'm gonna print this thing uh this does it look like a pointer let's"
1098400,1107120," actually uh take a look uh is that a correct pointer if i do a hex um so maybe it is more or less correct"
1107120,1119920," pointer okay so and after that if i do uh this um right um all right it exited abnormally"
1122720,1128720," i should have not printed it okay so i should have printed it in here okay and all right it couldn't"
1128720,1137200," print from there so we like this thing did not dereference it properly is that a bug within this"
1137200,1144400," instruction so that's the question is that a bug within this instruction okay let's actually find out"
1144400,1149680," maybe it is a bug within this instruction who contributed this instruction so it's an intrinsic"
1149680,1158160," load 64 right uh load 64 and let's take a look at this thing so we pop the uh address okay we pop the"
1158160,1168800," address then uh we clean this up and then we read this entire thing from uh this address into rbx and that"
1168800,1177920," should be fine so i don't see any problems in here it's actually correct um so yeah so we find so we find"
1177920,1185280," no problem at all but yeah this is a this is a huge problem right because i dereference it once"
1185280,1191920," and i cannot dereference it the second time uh right i need to reference it the second time"
1193360,1198640," so exit it abnormally so it's probably sick faulted right it's tried up sick faulted"
1198640,1205280," i remember seeing 32-bit flag"
1216080,1230080," um okay okay whatever uh to to do to because rv is this right so by doing dereferencing that"
1230080,1236400," you get another pointer and then you dereference one more time you will get something"
1237680,1256160," uh to to the two to be fair i don't really know so maybe i want to"
1256160,1260160," um"
1267680,1278000," i think the time has come to make a small break chat yeah because i'm getting"
1278000,1283440," really tired and my uh brain doesn't really work so let's make a small break and after the break we're"
1283440,1291920," gonna um you know we're gonna investigate what's the problem so um all right so uh let's actually make a"
1291920,1300720," very small uh reproducible example right um so maybe i'm gonna straight up uh actually get rid of all of"
1300720,1311120," this and um let me let me see so the simplest one is going to be to drop argc then dereference argv"
1311120,1319680," once and then dereference the first character of this thing and try to print it right so this this is the"
1319680,1326160," simplest reproducible example that is supposed to work but it doesn't right so um and i don't"
1326160,1330800," really understand what's the problem so if i try to compile this entire thing it exits abnormally"
1330800,1336400," and it's uh straight up a sec fault right so this is a segmentation fault and uh i think"
1336400,1342160," one thing we can do in here is we can try to debug that with gdb uh i don't think we have"
1342160,1349520," much choice in here so i'm gonna go to this folder excuse me and i'm gonna do gdb on argv"
1350240,1355840," um and let's just see what's gonna happen um so we're gonna break on start and uh run this"
1355840,1362080," entire thing and i think i'm gonna do layout asm just to see what's going on in here uh we can also"
1362080,1371360," also take a look at the um at this thing all right so we do pop racks um then we pop racks one more time"
1371360,1381840," uh then we're reading from this entire thing uh and push rbx like it should work i'm just looking at"
1381840,1388560," this and i think it should just work so i don't see any problems in here um so let's do layout uh"
1388560,1396320," registers right and uh let's pop racks so racks contains one that makes sense um so the next one is"
1396320,1403280," is going to be uh a pointer and we can take a look at the pointer right so if i turn it into character"
1403280,1410880," pointer pointer and uh i'll try to print it uh maybe even dereference it and you can't just dereference"
1410880,1421600," it anymore so you cannot access uh the the memory in here which which is really weird hmm"
1421600,1439440," you really can't do that can you hmm is that something that i'm missing in the runtime in here"
1439440,1452240," hmm so if i um if i do something like this"
1452240,1455840," wait"
1455840,1461760," so if i just um"
1465440,1467760," it's not a pointer to pointer"
1467760,1473280," that is really interesting"
1473280,1486080," so it's not the same as in c i was actually confused so that means they are just located on"
1486080,1490480," the stack as as the point oh my god that makes even more sense now"
1492480,1497520," i see what's going on here so i see the reason why it is a pointer to pointer in"
1497520,1505360," um in c because all right so i think all right at least i learned something right at least i learned"
1505360,1510960," something which actually makes this entire thing even simpler to implement if i understand it correctly"
1511600,1515760," so on the stack uh right on the stack uh right on the stack we have uh"
1515760,1523520," arg c then we have arg uh v"
1523520,1530560," zero which is the pointer to some string uh then arg"
1530560,1541040," uh v one zulu and so on and so forth and in c it is pointer to pointer because it just points at this"
1541040,1548560," array in the stack that's why our v uh our v is a pointer to pointer that makes sense but for some"
1548560,1552480," reason i thought that this pointer to point is located somewhere here oh my god"
1552480,1559840," um all right i guess at least i learned something at least i learned something uh i'm not really"
1560480,1567200," that much of a low level guy so um yeah sometimes i just don't know things like this uh right so"
1567200,1577520," essentially um i can do this right away right i can do this right away so that means if i drop the arc"
1577520,1586000," c then i do str len um actually i can duplicate this thing then do str land and swap it"
1586000,1594960," then do std out right uh i should be able to write the first string uh the the program the actual program"
1594960,1597920," so let's go ahead and do that and there we go so here's the actual program"
1599520,1605360," so yeah that makes it even easier to implement all right so this entire actually over complicates this"
1605360,1609760," stuff um okay so let's go back to a drawing board um"
1614400,1626000," uh so that means here we have our v um zero then we have our v one zulu and so on and so forth right"
1626000,1634640," it's that simple actually uh so and this one is interesting okay so by doing swap right by doing swap"
1636240,1643120," i have something like this then i duplicate this thing right then i duplicate it and uh i don't"
1643120,1648000," need to de-reference anything um i don't need to de-reference i just need to do esther len"
1648000,1656720," so this is going to be esther then uh then i swap everything back right like so uh and then i do std"
1656720,1663360," out uh write and drop and that that actually works absolutely beautifully that works absolutely"
1663360,1667520," beautifully and i don't have to do this thing i don't have to do this thing the only thing i have"
1667520,1671360," to do i just have to subtract this oh my god this is actually beautiful that makes it so much"
1671360,1682000," simpler um that makes it so much simpler um okay thank you thank you so much uh linux developers i"
1682000,1688880," don't know if we actually do that so and uh if we provide full bar buzz uh there we go so here are"
1688880,1694320," all of the arguments that we provide in there so that's pretty cool so the only reason why i couldn't"
1694320,1702880," do that is because i misunderstood what's on the stack right so it's actually super simple i like that"
1702880,1715200," okay you probably even can drop argc because there will be null after the last argument"
1716080,1723440," let's give it a try i suppose uh so let's drop argc so it means here we have argv"
1723440,1730240," uh zero right so we duplicate we check if it's zero so that means here i don't have to swap anything i"
1730240,1742880," only have to dupe this entire thing then esther len and um swap it back uh right just swap it back uh and then"
1742880,1749520," print it uh drop the entire thing and i don't even need to do that then so that's what it actually"
1749520,1757360," allows me to do right so it allows me to not do minus one for the argc uh that's pretty cool"
1757360,1764160," uh so let's go ahead and do that and it works thank you thank you so much really really appreciate that"
1764160,1771040," so that makes it even simpler that makes it even simpler so this is the simple uh use case"
1771040,1780080," um which we can put into the um into the test cases uh or we have like a test folder and this"
1780080,1784720," is where we're going to put that uh but here's the interesting thing all of that works only in"
1784720,1790560," compilation mode if i try to do something like this uh it will just underflow because in simulation we"
1790560,1797040," don't take that into account because this is not a defined behavior um so how can we make it defined"
1797040,1802880," behavior this is a very interesting question um i suppose when we're simulating we have to take the"
1802880,1809520," command line arguments from the port and just put them somewhere in the memory i suppose um let's go ahead"
1809520,1822320," and do that so uh porth dot pi so uh porth dot pi uh simulation uh simulation simulation simulation"
1822320,1832800," uh simulate cannot find so what i'm thinking is that uh we can take argv as a list of strings in here"
1832800,1839120," right there we go uh and we need to push all of that into the memory right we need to push all of that"
1839120,1845920," into the memory uh so we already have a buffer where we keep all of these strings for the simulation"
1845920,1853520," and what i'm thinking is uh we can put all of these argv things into that buffer as well"
1853520,1861040," i think that's going to be pretty cool and then uh we can push the pointers the addresses of um"
1861040,1868800," all those strings into into the stack yeah that sounds like a good idea actually um"
1869840,1876000," so they're going to be in uh in which order are they going to be they have to be in a reversed order"
1876000,1883680," though um we have to be in the rest order so though um there is a problem in here is that to push a new"
1883680,1890400," string into the memory uh you would have to do this kind of stuff so we have to add it to the string of sets"
1891280,1896560," uh all right so we added to the string of sets uh maybe you don't even have to do that"
1896560,1900400," um so this is a string size"
1903680,1916640," string of sets uh so we need to take these two things and turn them into uh into some sort of procedure"
1918640,1924480," maybe i actually don't think so i actually don't think so"
1924480,1933040," all right let's give it a try so what i need to do i need to iterate through the arguments in arcv"
1933920,1942400," uh right so but we have to probably do that in a reversed order right so we have to do that in a reversed"
1942400,1945440," so when we push them on the stack they are reversed"
1947440,1954720," oh boy so uh let's take this thing and so uh this is how we add this thing to a memory"
1954720,1962640," so string size uh and n if i remember correctly is the length of the string so this is going to be the"
1962640,1970800," length uh of n oh and this one is interesting because uh here it means that we also need to"
1970800,1976000," null terminate all of that we also have to know terminate all of that"
1976000,1992960," so uh let's give it a try so this is going to be mem str size plus n is going to be equal to uh zero"
1992960,1998480," right so we equal to zero but str size is going to be plus one to take into account the null terminator"
1999200,2008800," um and also that means that uh on the stack we have to append uh zero as the pointer of that thing"
2008800,2017040," so and then we also need to append the str size as the pointer of the current string"
2017040,2026480," uh and after that we have to append the amount of arguments in here there we go so i think this is how we"
2026480,2033280," prepare everything so we iterative the arguments we push them into the string buffer uh and uh then we"
2033280,2038880," just populate all the necessary information on the stack we also need to check uh that"
2038880,2045680," uh after all of that we didn't overflow the string capacity the string buffer capacity"
2047200,2055520," uh so all right that looks like a code that would work and let's try to simulate this entire thing and"
2055520,2062960," it didn't work because we don't pass argv anywhere in here you see so that's kind of the problem"
2062960,2065760," so let's do my pi uh on the fourth um"
2068480,2077440," my pi okay so this thing has to be argv uh actually arg uh then uh value it should be arg uh"
2077440,2086080," to to the two anything else incompatible types um so you have to i suppose decode this stuff"
2087200,2098400," all right um yeah yeah so the value has to be encoded as utf8 so let's keep it as a volume all"
2098400,2104800," right so in the value is going to be arg encode as utf8 right so that's what we're going to have in here"
2104800,2112880," uh uh and it's going to be the length in bytes right it's going to be length in bytes uh anything else my"
2112880,2121280," pie is actually super useful um to do to so maybe we can just set zero right i think that's what we"
2121280,2129200," need to do anything else missing uh okay that's cool so when we do the compilation we pass the arguments"
2129200,2137280," when we try to run this entire thing so uh to to do we just use rv and i suppose that's precisely what"
2137280,2146080," we can do uh in here right so we just put the rest of the arguments and uh yep so it compiles and i try"
2146080,2154640," to simulate it kind of worked uh so but they didn't print all of it oh i know why i freaking know why"
2158640,2164400," well i don't really know why it's kind of strange um bar buzz"
2164400,2176320," it missed the last one why did it miss the last one i'm not kind of sure but it kind of worked as"
2176320,2183120," you can see right in the simulation right it kind of worked uh in a compilation uh yeah so we actually had"
2183120,2190640," more of these things uh arcv full bar buzz and some other uh but that was kind of kind of strange right"
2190640,2198720," i don't really know so it feels like we didn't put all of them and the question is why uh simulate uh"
2198720,2205440," where is this thing so before we're gonna put all of them in there let's actually try to print these"
2205440,2216080," arguments right uh print uh like so uh and see if we got everything uh yep we've got everything but the"
2216080,2223920," last one i don't see the last one uh why don't i see the last one why don't i see the last one"
2225600,2233040," so i append 0 then i reverse everything then i iterate um"
2233040,2246880," append str size here is the stack"
2246880,2249600," um"
2255600,2265200," so this is a bar buzz bar full uh-huh buzz bar full"
2265200,2273040," and in here i may want to take a look at the contents of this stack"
2273040,2278560," uh okay so we have a three"
2280880,2298800," uh oh oh oh oh oh oh oh oh in a simulation null pointer is a valid address in the memory"
2298800,2299840," here is the problem"
2299840,2308960," yes because our memory is just a byte array and the pointer there actually starts from zero so"
2310640,2318160," yeah a null zero is a valid address in here and one of the strings is actually have address zero"
2318160,2319680," fuck"
2319680,2321760," shit"
2321760,2325760," fuck shit damn um"
2325760,2331360," so we have to offset maybe something or"
2331360,2340400," fuck me so yeah this is actually uh yeah so for some platforms uh null in c"
2340400,2345360," might not necessarily be zero i guess this is kind of the situation right"
2345360,2354400," so yeah and here the reference in the null pointer actually well i think"
2354400,2358080," god damn bro"
2358080,2370160," so if i do plus one right so that means um we can do something like uh null uh point padding"
2370160,2373920," all right so this is a null pointer padding uh right"
2373920,2387840," so just a little bit over padding at uh the beginning the beginning of the memory uh memory"
2387840,2393280," to make zero an invalid address right"
2396720,2403440," something like um something like this right no pointer padding uh so that means every time we're"
2403440,2413440," trying to access the um well i mean we can do it like that i suppose all right so uh yeah"
2413440,2418400," so this is a new point of padding and it will kind of work"
2420240,2421440," tool kind of work"
2421440,2432480," thank you thank you so much uh and there we go it works as you can see it does full bar buzz uh but"
2432480,2439360," in the compilation mode we also have the program name right we also have the programming do we have to"
2439360,2446400," have a program name in the simulation mode as well uh i'm not kind of sure right is it is it that useful"
2447040,2457120," is that a useful thing to have uh so maybe um okay so let's remove this entire thing"
2457120,2462880," um maybe for tests too much yeah it could be could be actually point good point"
2462880,2469200," uh rayunis tv subscribed with twitch prime thank you so much for twitch prime subscription and welcome to"
2469200,2479760," our epic uh porth club all right so that's pretty cool um yeah it's actually was very insightful"
2479760,2486400," right i never thought right about the environment where a zero could be a valid pointer and what"
2486400,2491920," implication it has so it's actually pretty cool i'm really glad that i didn't remove the simulation mode"
2491920,2496320," because as i work on simulation model like i'm actually learning more and more things because i'm"
2496320,2502560," trying to kind of simulate uh x86 64 and linux and it's just like gives me more insights into this entire"
2502560,2516320," i really like that uh so yeah we'll need to match the uh the outputs for tests uh myocad subscribed with"
2516320,2522080," tier one thank you thank you so much for tier one subscription and welcome to epic porth club how about"
2522080,2538960," that how about that uh so all right uh let's go let's go uh so but here's the problem uh the first"
2538960,2545840," argument is never gonna match anyway right it's never gonna match anyway and maybe this is something that"
2545840,2551360," we all always want to drop we want to drop the program name because between the simulation and"
2551360,2557120," compilation mode it's going to be different so and it doesn't really matter so let's actually do drop drop"
2557120,2564800," uh right and if i try to do the compilation thing it's only going to print a full bar buzz but now in the"
2564800,2572240," simulation in the simulation it do it does bar buzz so uh and one of the things we can do in here when we do a"
2572240,2583280," simulation mode right simulation of uh sim simulate uh little endian uh i'm gonna do where's the file"
2583280,2592960," path uh program path i can do something like this um uh program path right so i'm embedding the program"
2592960,2600240," path to the arguments right and the program may use it if it wants to uh all right so in if i do the"
2600240,2605040," simulation there we go it's a full bar buzz and there is no difference between the compilation"
2605040,2611440," and the simulation mode both of them print full bar buzz it's pretty cool um but here's an interesting"
2611440,2620880," thing now we have arguments for the test cases because before uh test cases didn't have any arguments"
2620880,2628720," and now they do have them so how are we going to provide them um so we'll have to extend our testing"
2628720,2636560," mechanism to have command line arguments apparently um so this one is going to be interesting uh i'll"
2636560,2643280," need to think and also i want to see uh how the path in a simulation looks like uh so let's actually"
2643280,2650400," don't drop anything in here and uh we're going to do a simulation and there we go here is the path"
2650400,2657520," right so we're using the path to the uh to the file itself as the command line argument okay so that is"
2657520,2662240," fair enough that is fair enough that is fair enough but for here uh it's gonna be dropped all"
2662240,2671600," all right so uh right now what do we have uh we have"
2671600,2680800," for each individual test case we have a corresponding txt file right and the corresponding txt file basically"
2680800,2688080," describes uh what is expected uh what is expected uh exit code of the application what is expected uh"
2688080,2691520," standard output of the application and what is the expected standard error"
2691520,2698320," so maybe one of the things uh additional things that we're gonna happen here is uh command line arguments"
2698320,2704560," right so but how we're gonna describe command line arguments that's a very good question"
2705760,2716800," um so i have no idea actually um though before we only considered this thing to be like an output and now"
2716800,2723280," in this entire thing we also include an input so it kind of complicates everything so i'll have to think"
2723280,2732560," about that so yeah so i think i'm not gonna introduce that right away um because i'll need to think how to"
2732560,2740000," implement this kind of stuff properly but uh we're gonna have tests for that uh nonetheless um all right so"
2742000,2753280," argv port so i'm gonna pull it into the tests um so i'll just copy paste it uh and for now it's gonna"
2753280,2755360," be test by uh record"
2755360,2758560," this pirate"
2758560,2770240," and if we take a look so we introduced argv.txt but as you can see it has nothing because we didn't"
2770240,2779520," provide any arguments uh so uh what i'm gonna do is just commit that um these things"
2779520,2794080," and this is gonna be essentially a to do uh come up with a way to test uh command line arguments right"
2794080,2799840," because right now our mechanism just does not support that uh so now we're gonna have argv"
2800240,2806240," and there we go so this is actually pretty cool so uh command line arguments are not undefined"
2806240,2814240," behavior anymore and uh we define it by implementing it in simulation mode right simulation mode sort of"
2814240,2819920," becomes like a reference for what is expected from the environment everything that is not in the simulation"
2819920,2828480," is undefined behavior essentially um well that basically means uh like a lot of sys calls are undefined"
2828480,2833840," behavior because we don't support a lot of sys calls in the simulation mode um which is kind of like a"
2833840,2838640," different discussion completely but yeah it's kind of just something to think about um right"
2838640,2848640," so implement uh uh command line args for um for the simulation for the simulation mode"
2848640,2855760," and i'm gonna push that right into the weapon okay it's pretty cool so we have command line arguments how"
2855760,2863600," about that isn't that cool i think it's pretty cool so uh already streaming for like two hours so i think"
2863600,2872400," i'm gonna wrap up does anyone have any questions before i go technically it's defined behavior the"
2872400,2881760," program just crashes i guess yeah so crash is pretty well defined"
2881760,2900880," do you have a streaming schedule no i didn't have it anymore uh i found it very overwhelming to follow any"
2900880,2906320," streaming schedule uh to the point that i burned myself really really badly so i don't have a"
2906320,2914400," streaming schedule i'm sorry what's next for porth um so next i want to implement a simple static checking"
2914400,2922080," for uh input and output arguments of the uh operations right so essentially just a simple check if an"
2922080,2928480," operation takes two arguments and produces one i want to just sort of meta simulate everything at compile time"
2928480,2934240," and make sure that stack doesn't underflow or overflow well it's probably not going to overflow but at"
2934240,2940480," least doesn't underflow and all the arguments are consumed properly uh so because that will catch a lot"
2940480,2946960," of errors that i do on a you know on a daily basis when i program in this language so i want to uh have"
2946960,2954240," a very simple static checking of input parameters and then we may want to start working on uh self-hosting"
2954240,2960160," because we have everything to do self-hosting uh we can open and read files we can write files we"
2960160,2965920," support command line arguments uh we have access to the memory where turing complete we can just go ahead"
2965920,2971200," and try start doing that uh we're not going to make it self-hosted in a single stream but at least we're"
2971200,2979600," going to uh start that maybe we're going to implement a small subset of ports in ports that uh supports like"
2980160,2985200," addition and subtraction or something like that right so we're going to start with a very small"
2985200,2991680," subset of ports imports and then we're going to expand that subset until it fits perfectly uh until"
2991680,2997520," it's full set and as soon as it's a full set we're going to uh you know dump uh python completely and it's"
2997520,3001600," going to be a purely port you know code base"
3003760,3008480," uh will the static checking requires something like struct i don't think so because i'm not"
3008480,3015360," going to introduce a proper type system i'm just going to check that um you know the final size of"
3015360,3022400," the stack is uh empty right so that's what i'm going to check so basically everything is consumed nothing"
3022400,3029280," underflows and uh yeah something very very simple just to catch basic errors um"
3029280,3039680," but will it be porth anymore well p is going to be sort of like a reminder that initially it was in python"
3039680,3046800," but yeah it's still going to be porth um yeah so we're going to uh leave the p as the reminder it's like a"
3046800,3062720," scar on the face of the language right that's what it is python leaves permanent scars on languages"
3062720,3075040," now we have command line arguments officially almost now we have it officially uh so and let's delete this"
3075040,3083200," brunch there we go all right boys and girls that's it for today thanks everyone who's watching right now"
3083200,3088880," i really freaking appreciate that uh thank you for all of the subscriptions for all of the support i"
3088880,3095200," especially appreciate that uh have a good one and i see you on the next stream or on the next video"
3095200,3100960," uh so if you're watching that on twitch live check out our youtube channel where we upload videos and"
3100960,3106000," the votes this world is going to be there as well if you're watching on youtube check out twitch.tv"
3106000,3111040," slash sodding and follow me there if you want to interact with me live and maybe even throw some"
3111040,3117840," money at me but yeah i gotta go so maybe we should rate somebody i don't know we haven't rated anyone on"
3117840,3123760," twitch so is anyone streaming anything interesting on a science oh it's not a science and technology section"
3123760,3130720," anymore it's a game development and software development something something lame i know"
3130720,3136080," i personally like science and technology because it sounded like i'm doing something something cool"
3136080,3143680," now i'm just doing lame software development and game development nothing nothing particularly interesting"
3144720,3157200," um so yeah what do we have uh one lives left is actually streaming so uh let's rate him i suppose uh"
3157200,3166320," he's a game developer as far as no and he's uh using jai by the way right so he's using jaya uh so let me"
3166320,3174400," just see how to spell his nickname uh twitch is extremely slow holy i'm gonna pause the um you know"
3174400,3185760," the the the player uh so one lives left okay so let's do a raid uh one lives uh left right did i spell"
3185760,3192480," it correctly all right i it looks like i spell it correctly uh so where is the thingy majingy okay get"
3192480,3205760," ready for the way uh for the rate boys and girls get ready for the rate and i see you all and next time"
3205760,3205760," you"
3222480,3252460," Thank you."
