start,end,text
960,7200," Looks like we're live. Hello everyone and welcome to yet another recreational programming session."
7200,13120," How about that? Let's make a little bit of an announcement and officially start this stream."
13120,20640," Hello, hello everyone. Welcome, welcome, welcome. So let's do the usual thing. I read a circle live"
20640,27040," on Twitch and what are we doing today on Twitch ad.at television website? Today we are,"
27840,34080," believe it or not, recording sound from your microphone. Exactly. That's exactly what we're"
34080,39280," doing today. So I'm going to give the link where we're doing all of that, http.twitch.tv/todding"
39280,43360," and I'm going to ping everyone who's interested in being pinged. And there we go, the stream has"
43360,51040," officially started. The stream has officially started. So today we continue developing Musualizer,"
51040,56000," which is a music visualizer that we've been developing for quite some time. And let me"
56000,61360," show you how it looks like. So I'm going to go to Musualizer and I'm going to start it up"
61360,65760," somewhere here. Right. So the thing you can do, you can basically drag and drop some music and it starts"
65760,73840," visualizing things. Right. And then you can press F and it will try to produce like a high quality video"
73840,80960," of this entire thing. Right. So that's basically what we have so far. So I released it. It actually crashed."
81760,88480," Right. So I think there are some bugs in there, but anyway, so it's alpha. Okay. So it's an alpha."
88480,95920," So it's totally fine for this thing to crash sometimes. So and essentially when I released that"
95920,101040," on Windows, right. So we did a Windows build, by the way, for anyone who's interested, for anyone who wants"
101040,107360," to use that on this niche operating system for video games, you can do that now. Right. So there is an alpha"
107360,112800," release. So I'm going to copy paste it here to the chat and for everyone who was watching on YouTube,"
112800,123280," potentially it's going to be in the description. Right. So Windows alpha release one. So and when I"
123280,129840," released that, people started to suggest multiple times actually on different like social medias and"
129840,135520," stuff like that, why not just capture the sound, not from a particular file that should drag and drop,"
135520,142880," but from, for example, speakers or from a microphone and visualize that. That would have been actually kind"
142880,149600," of cool because the visualization itself is actually kind of pretty. Right. And, you know, making it react to"
149600,154000," the environment surrounding environment via a mic. I think it's an interesting idea."
154880,161280," Uh, right. And that's what I want to research today. I don't really know how to do that yet."
161280,167120," That's something that I want to research. Uh, right. RayLib itself. RayLib itself does not really,"
167120,174160," um, you know, enable you working with microphones or anything like that. So it actually implements like"
174160,179520," a bare minimum for video games. And in the video games, what, what do you want to do? You want to play"
179520,184240," music in the background, you want to play sounds like a sound effects and stuff like that. And you"
184240,191120," want to apply different effects on the playing sound. Right. And that's precisely what RayLib allows you"
191120,196960," to do. So, um, and that's precisely what it exposes. I don't think it has anything to do with microphones."
196960,205040," Uh, yeah. So it like even microphone doesn't, doesn't show up when you try to search for it. So that means"
205040,212880," we have to go a little bit lower in the, in the layers of obstructions, uh, and lower RayLib,"
212880,219600," we have a thing called mini audio and mini audio is a header only library for audio, right? So here it"
219600,223760," is. Uh, I'm going to copy paste it in the chat for anyone who's interested. And of course, for YouTube,"
223760,228400," it's going to be in the description. I already copy pasted it in there. If I'm not mistaken yet, here we go."
228960,234800," So it is an audio playback and capture library written in C in a single source file, right?"
234800,240640," It's an STB style, single, single header library. Right. So, and we'll, we'll already worked with those."
240640,246720," And as far as I know, it's cross platform, right? So it probably supports windows and Linux and stuff"
246720,253200," like that. Uh, right. So does it say it's cross platform or windows? Uh, yeah. So there we go. So at"
253200,258640," least it mentions different operating systems just compile, there is no need to install any dependency"
258640,266080," on windows and macOS. There is no need to link to anything on Linux, just link to pthread mathematical"
266080,271760," library and DL on BSD, just to be thread. So it supports like so many projects in some windows,"
271760,278800," macOS, BSD, Linux, right? So if you use this and I think, uh, right, you can work with sound with sound"
278800,285440," on all the operating systems, uh, which is pretty convenient. So, and, uh, yeah, that's basically"
285440,290240," what I want to do today. I want to explore this library. I've never used this library before,"
290240,295680," uh, only through RayLib, right? So I just used the sound functionality of RayLib and that's how I used"
295680,302320," it indirectly, so to speak. Uh, right. That's the plan for today. That's the plan for today. Let's go ahead"
302320,308640," and download this library, shall we? Let's go ahead and download this library. Um, so if I go ahead,"
308640,315360," uh, I think I can just like, does it have releases, right? So there are some official releases, there's"
315360,321040," only four releases, um, right? Okay, apparently there is nothing in here. So you're supposed to probably"
321040,327040," download the latest one, uh, that is available in the repo. Uh, it's, it's, it's pretty huge."
327040,336480," You know that the file is huge when it's a text file and GitHub refuses to display it because it's too big."
336480,344800," Yikes. Okay, so how big is it? How big is it? It's, I suppose it's pretty, okay, even browser cannot"
344800,350080," display it. Okay, let's not try to display it. Let's just go ahead and download it, right?"
350080,358320," Let's just go ahead and download it. Uh, I'm going to go to probe, uh, mini audio. Uh, I'm going to start"
358320,362320," like a separate small project in which I'm going to be experimenting and stuff like that. I'm not going"
362320,368800," to start integrating it into Visualizer right away. I just want to explore that. Uh, so let's go ahead and"
368800,376560," W get this into, I think. And, uh, so yeah, let's download that. HTTP request sent. Awaiting response."
376560,390320," Excuse me. It's that fucking big that you can't even fucking download that. I might be,"
390320,397200," maybe doing something wrong. Uh, so let's try again, but, uh, you know, with passion. Um,"
399760,405040," let's press the button, you know, the famous button that GitHub added recently to download a raw file."
405040,412160," 3.8 megabytes. Holy shit."
412160,417520," It's a text file. 3.8 megabytes."
421600,431120," What the fuck? Finally, finally we managed to download that. Anyway, Jesus Christ. Um, so we are off to a great"
431120,436880," start. I must admit, we're off to a great start. So mini audio, let's just copy it in here. Uh, so,"
436880,437680," okay. How many?"
437680,447760," Oh, it's, it's, it's 100. Okay. So I thought it's like, uh, almost million and just like, you know,"
447760,455200," had a brain fart. So it's 100K. Holy fucking shit. That's how we know that it is cross-platform."
455200,460720," Right. That's how we know that it is cross-platform. Uh, anyways, uh, let's create a main.c,"
460720,467600," uh, not cj, main.c, I said, uh, and let's just include this entire thing. Right. And the way you're"
467600,474720," supposed to use this single, uh, header only library is by just including them. Right. So that's how you use"
474720,481520," how you use them. You just do include and you are good to go. So you can just go ahead and compile"
481520,487760," this entire thing, main.c and a boom, a boom, it compiled. In fact, it compiled very quickly because"
487760,492880," we didn't use a single function from this library. So the optimizer probably just stripped it away."
492880,499280," Right. And if I understand correctly, this kind of things, oh yeah, it's, it's literally STB style,"
499280,504160," right. So it has this implementation macro that you have to define before including it."
504160,511920," And what that means is that by default, this header acts like a header. Right. And it contains, uh, only"
511920,516560," the declarations of the functions and declarations with structures and variables potentially and stuff"
516560,522080," like that, but it doesn't have any implementations. So it acts like a header. So if you wanted to act"
522080,528080," like a C file, so meaning that it should include, uh, all the implementations of the functions and stuff"
528080,534320," like that, you have to expose it to say mini audio implementation. And now it starts to act like C."
534320,538960," Right. And, uh, we can try to compile this entire thing and it's taking some time to compile this."
538960,546720," Uh, right. And it could not compile because as the documentation said, you have to link with all of this"
546720,553120," goodness, like a P thread DL mathematical library and stuff like that. Right. Let's actually quickly do that."
553120,559040," P thread DL, uh, LDL. I think you have to do it like this, right? So, and uh, mathematical library"
559040,564960," and it should finally compile. There you go. It's as simple as that."
564960,571680," Chat says 3.9 megabyte, not so many, by the way, but I mean, it's a single file."
572560,579840," It's a single, it's not, I don't know, like we're living in a age of like terabytes of,"
579840,587280," uh, you know, hard drives is 3.8 that much. Like, I mean, this is like a hello world in react"
587280,590640," in a single bundle, you know?"
590640,599840," So why file sizes like that are okay for a JavaScript application, but when it's C,"
599840,606560," which provides, by the way, a huge value, this library provides an enormous value. It's sound,"
606560,611520," the most complicated thing in all the operating system, and it supports all of the operating system"
611520,619360," in a single hello world of react. Just think about that. Right. It's, it's all about perspective. Yeah,"
619360,624400," it is big, but for some reason, JavaScript people don't give a shit about that. Right. For them,"
624400,628880," it's just a, it's just a hello world. It's just, it's just a single button on a screen that makes"
628880,634560," fart noises. We managed to cram so much, well, we, I mean, the, the developers of Mini Audio. By we,"
634560,642800," I meant, it's C community, right? So it's C community. We managed to cram into that space so much freaking value."
643760,648000," It's insane. So yeah, it is big, but it's worth it. Trust me."
655440,660720," You know what I'm talking about? You know what I'm talking about, Chad? Come on. And yes, speaking of,"
660720,668400," your node modules folder is way bigger. It's, it's usually gigabytes of, of, of data. That doesn't"
668400,675680," really do anything, right? Anyways, uh, enough of that. Let's, let's do some, some programming,"
675680,680720," shall we? I think it would make sense to actually take this, uh, you know, command line and maybe put"
680720,688000," it in the build.sh or something like that. Uh, right. So maybe I'm going to do bin.sh and set xc."
688000,694240," There we go. And I also want to make this entire choice executable. And boom, now I can build this stuff"
694240,700080," like this. Uh, we can measure how much time it takes to actually build this entire thing. So let's see."
700080,704000," On my machine, of course, on your machine, it's going to be way faster, right? Because you have"
704000,711040," a modern computer. I have a 10 years old laptop. Uh, and all of that without even including optimizations."
711040,716080," So what if we included some optimizations, right? So it's probably going to take even, even longer."
718320,738320," Um, look, it's only half of a minute. It's only 30 seconds. Can your Rust do that? Can your Rust?"
738320,745200," I don't fucking think so. Building an entire project in only 30 seconds? Rust is blown the fuck away. Anyway,"
745760,755200," so uh, so let's continue. So can we just have like a simple hello world example of mini audio?"
755200,766880," Um, okay. So, uh, we have something interesting. Oh, you can just straight up play sounds. Wait."
769200,775840," If playing just sound is easy like that. Why do I need RayLip exactly for sounds?"
775840,785120," I mean, it's, it's as simple as in RayLip. Like maybe, maybe I can ditch RayLip specifically for sounds,"
785120,791760," right? And use a mini audio directly. That sounds like an interesting idea. I mean, it's a little bit"
791760,796800," more convenient, right? To use RayLip, right? So essentially, I suppose RayLip was designed so you can"
796800,802640," go lower in a level at any point, right? So if you just don't need anything super fancy, you can just use"
802640,807680," that. But if you need something more complicated, it's super easy to go lower and start using mini audio."
808560,815360," So, uh, yes, yes, yes, yes, yes. Uh, let's go ahead and just like go through this tutorial. Um,"
815360,824640," so you're supposed to create this sort of variable. Uh, I may result. Oh, look at that. You can instantly see"
824640,831520," that the developer of mini audio is a veteran C developer because they define all of their variables"
831520,841440," up front, like an old-fashioned C, right? The old habits, the old habits, uh, right? In the modern C,"
841440,847840," you can just define it, uh, in, in, like in any place, but yeah. Or maybe this is a Fortran developer."
847840,852080," Maybe this is a modern Fortran developer. Who knows? Because in Fortran still, you have to define the"
852080,859200," variables at the beginning of the procedure or subroutine. Um, so who knows? So first thing we have to"
859200,865360," do, we have to initialize, uh, an engine and also we have to have the engine defined somewhere here."
865360,870000," Um, I wonder if you have to zero initialize it. I usually like to zero initialize this kind of thing,"
870000,877680," but I'm not sure if it's, if it's necessary. So we pass that engine to this thing and the first argument"
877680,883280," is null, meaning that we're kind of ignoring it, but I'm curious what is the first argument. So I'm"
883280,890160," really curious what it is. Uh, so let me, let me find the definition. Okay. So, um,"
890160,902880," wait a second, wait a second. Can I use Google to actually search within this entire thing? Right. So what if I do"
902880,913840," Google, uh, Google and just do like mini audio and search for a thing that's, uh, is called my engine,"
913840,924160," my engine, my engine, my engine, can I, can I find my engine? I, I found my engine. Uh, but, but yeah,"
924160,929040," it didn't really work the way I expected it to work. But I suppose I can say that this thing is supposed to"
929040,937760," to return my engine, uh, right. Yeah. And also it should accept, uh, it should accept my engine."
937760,944480," Well, I mean, it's, it doesn't, it returns, it returns my result, my result and my engine."
944480,954000," Uh, I didn't have a need. Uh, Google sucks. Google freaking sucks. Right. So I'll have to fix it somehow."
954560,961200," Um, right. I cannot just find it by, by the definition or anything like that. Uh, so maybe I need to find"
961200,970320," my engine. It would be kind of cool if it's searched only by the declarations. Yeah, there we go."
970320,977520," So it's my engine config. It's my engine config, which I suppose is a structure. Uh, right. And"
978240,984960," this is where I can configure everything. So I can have a logger. So this entire thing can log things."
984960,990000," That's actually very convenient. So I can provide my own logger. Uh, I can provide like a, how many"
990000,995360," channels do I want? The sample rate and stuff like that. And I suppose if I don't provide the configuration,"
995360,1001840," it uses the default configuration. Right. So it just uses the default configuration. Okay. That's fine."
1002560,1010960," Uh, right. And this thing, if we result is not equal to my success, my success. What happened to my success?"
1010960,1017680," Uh, we just return minus one. Like who returns negative value out of the, uh, out of the main function?"
1017680,1026960," Is that a thing? Like, because in, on Unix, I only saw like just non-zero. Why does it have to be negative?"
1026960,1038960," I don't freaking know. Uh, so anyway, um, so maybe we should just try to go ahead and compile it. Uh, so,"
1038960,1043520," and the last thing we are supposed to do, we have to uninitialize the engine, right? So let's just go ahead"
1043520,1051600," and uninitialize. So let's just build this thing. Now it seems to be working. If I try to run this entire"
1051600,1057520," thing, uh, is it going to log? It didn't really log anything, right? It didn't really log anything."
1057520,1065520," Uh, on Windows, it's common, I think. Oh, okay. So like, I don't really know the traditions of Windows,"
1065520,1073200," but I can imagine that maybe, maybe Windows does have some of such traditions. Um, so let's actually"
1073200,1078000," take a look at this thing through a debugger. Uh, let's compile with debug information."
1078000,1090640," And, uh, start, uh, gf, gf, main, uh, actually want to do that like this. And let's break on main and"
1090640,1099040," run it. And we probably want to watch on the engine, right? So engine is a structure. I'm pretty sure it is a"
1099040,1105920," structure. Uh, so it is, it's supposed to be, well, it's, yeah, it's going to be zero initialized as we"
1105920,1111600," go through this line. Okay. So everything is zero initialized. Everything is fine. And if we just step"
1111600,1117680," once, um, yeah, everything is initialized. So we have, yeah, it picked up a reasonable sample rate,"
1117680,1123920," uh, right? So that's the sample rate it decided to pick for whatever reason. Uh, and, uh, so listener"
1123920,1130640," count. Uh, so we have a bunch of listeners. Looks all right, right? So we didn't say anything particular"
1130640,1136640," special. Uh, right. So, and then if we step through and it de-initialized this entire thing, everything"
1136640,1143200," seems to be fine. Okay. So that's pretty cool. Uh, the debugger demonstrated that everything is all right."
1143200,1148640," So now what we have to do, we have to, uh, play the sound, right? So let's go ahead and play the sound."
1148640,1156640," But what kind of sound can we play? Uh, so let me go to mini audio and find, okay, so you're supposed"
1156640,1162960," to provide the file path, but do you have to provide specifically wave sound? Can it provide something"
1162960,1170080," else? Can you provide OGG? And maybe, um, because like it's not really specified in here, like anywhere."
1170800,1176240," And they also use, uh, Hungarian notation. So P file path or something. Uh,"
1176240,1183760," So anyway, I'm going to go ahead and just like literally try to use OGG in here. All right."
1183760,1189440," So I'm going to copy paste some of the sounds that they use for tasting. Uh, mutualizer, music,"
1189440,1198160," uh, no. So I probably want to go, uh, somewhere here, just another. Yeah, there we go. So that's the,"
1198160,1204400," that's the thing I want to use in here. Right. So that's the file and we will see if it's going to"
1204400,1212320," complain or not. We may also want to maybe put that into sound file path, uh, something like that. Right."
1212320,1218320," Sound file path. Uh, just put it in here. There we go. So that's pretty cool. Uh, we don't have to"
1218320,1226560," actually say anything. Look, this one is interesting. Uh, you have to stop the application, like basically"
1226560,1231760," block the application with getchar. Right. Because getchar is going to wait for the user input. That"
1231760,1239840," means that this thing is probably playing in a separate thread. So, uh, mini audio apparently by"
1239840,1244480," default is multi-threaded. That's actually pretty cool. So I don't have to do anything about that. Right."
1244480,1248720," So I don't have to create threads or anything. Uh, it's actually very convenient."
1248720,1254160," Um, so, okay."
1254160,1263440," So that probably means that we literally have to do the same thing as well. Right. So press enter to quit."
1263440,1268720," Also new line. Well, I mean, new line is not really necessary. Right. So getchar."
1270240,1275920," I'm not sure how it's going to work in Emacs. I think in Emacs is going to work fine. Uh, right."
1275920,1281440," Oh yeah. Yeah. Yeah. So hence the, uh, pthreads. Right. So that's the reason why we linked with pthreads."
1281440,1286320," Because otherwise we won't be able to do that. Uh, and generally when you work with audio, you probably"
1286320,1291040," want to do that in separate threads. Right. Because the audio should be playing as you interact with an"
1291040,1298880," application. So it's by definition multi-threaded. Right. Uh, sound by definition is multi-threaded."
1298880,1304640," All right. Seems to be, seems to be cool. I'm going to actually lower down the sound, uh, for you just in"
1304640,1312000," case it's super loud. Uh, and I'm going to go ahead and run this entire thing. It is not playing anything."
1313920,1320800," Literally. It is not playing anything. So I suppose it doesn't support that. But I wonder if there is"
1320800,1327840," any way to maybe, um, you know, check that it couldn't load the file. Right. There must be"
1327840,1333200," something that the function that we're calling, uh, right. The engine play sound must return something."
1333200,1341760," It should return a must success. Right. And if it probably didn't return my success, uh, we should"
1341760,1354000," say, well, I'm sorry. Too, too bad. Um, right. Uh, I wonder what I wanted to do. So I wanted to, yeah."
1354000,1360960," So just find the definition of this function. Right. So here, yeah, it already returns my result. So we can"
1360960,1370880," say result equal, if result not equal, my success. Oh, my success. Uh, we're going to just return"
1370880,1378160," without even saying anything. So let's rebuild this in time, I think. My success. I really like this."
1378160,1383520," This is the best prefix you can ever even come up with, like ever come up with."
1385520,1395360," My engine, my result, my success. Oh, uh, and yeah, it just exited it normally. But I was hoping that it's"
1395360,1401680," going to log something. Right. I was hoping that it's going to log something, but this mother flip,"
1401680,1413440," I didn't log anything. It's just like, bro, I can't do that. Sorry. Um, anyway, uh, we can at least say"
1413440,1423440," here, right. So we can say, uh, fprintf, std error, error, could not load, could not play sound. Uh,"
1423440,1430240," and let's just like provide something, something like this. There's going to be s, uh, and this is a sound"
1430240,1437200," file path, sound file path. And let's rebuild this entire thing. Right. So it's not a complete example."
1438080,1443200," Uh, they even don't even say that it's specifically have to be wave. I mean, it's still a good example."
1443200,1447760," Don't get me wrong. It's still good example. It's just like, here's the basic thing. That's how we do"
1447760,1452160," that. Right. If you want more, read the fucking code. Right. And that's exactly what we're doing."
1452160,1456720," Uh, that's exactly what we're doing. So I'm super happy. Yeah. I could not play sound, blah, blah, blah."
1456720,1462080," So I suppose what we have to do, we have to convert it to wave. Shouldn't be that hard. Right. Shouldn't be that hard."
1462080,1467200," Shouldn't be that hard. So essentially what we have to do, we have to use ffmpec magic, ffmpec magic."
1467200,1476000," So let me actually, maybe you do it in tempi. So we have to provide this as an input. Uh, this as an input. Uh,"
1476000,1484160," and the output is going to be, I suppose, sound wave. So this is going to be sound wave. I wonder if this"
1484160,1490480," is going to be enough. I think this should be enough. Right. So, because it knows that it's not"
1490480,1496880," an audio. Right. It knows that it's not the audio. So hopefully it will just, I feel like you would have"
1496880,1506480," to say that no video. Right. So don't, maybe you even have to say no video for the output. Right. So"
1506480,1512640," this is quite important. Right. So since I put vn in here, it is applied to the output,"
1512640,1519680," not the input. Right. Because I feel like I remember that if you didn't provide the end for the output,"
1519680,1524080," it will literally try to produce a video and we'll just call it a wave, but it's still going to be a"
1524080,1528480," video. We can give it a try. Right. So because ffmpec being silly like that, I do remember that."
1529200,1536640," Uh, right. The ffmpec absolutely loves being silly like that. Uh, right. So with credit wave, we can take"
1536640,1543440," a look at the file. Uh, and it's a riff. I mean, it's not that bad actually. So it's literally, okay."
1543440,1550240," Okay. Okay. Okay. Okay. I don't think it's, uh, I think it's fine. Right. Like I got burned by something"
1550240,1558560," like that some time ago. Uh, so, oh, I think I was trying to extract an audio out of video and it still"
1558560,1564960," produce the video because I didn't say explicitly, please no video or something like that. So yeah,"
1564960,1570800," so that should be fine. So if I do MPV, uh, is it going to play something? Okay. So it seems to be"
1570800,1576720," playing. That's, that's fine. Uh, all right. So let's go ahead and just do something like this."
1576720,1582560," So this is going to be sound, uh, sound wave. All right. And let's just do build at this edge."
1582560,1587920," Uh, so MPV, MPV is playing everything. So let's see if this application is going"
1587920,1597040," to play that successfully. So this is going to be main. Uh, okay. Thank you very much."
1597040,1606080," I already started like I was about to epically start this project. We're going to start it again."
1606080,1610880," Uh, right. I really like when I just download the library, just follow the instructions and they"
1610880,1618560," work. I absolutely love it. Like we need more software like that, please, please. It's just"
1618560,1624480," like you download the library, follow the instructions and they work. That's how it's supposed to be."
1624480,1631760," I really appreciate that. It's so rare in 2023. You won't believe how rare it is."
1633920,1641040," And it's just a small single file. A couple, small single file. Uh, so what's going to be the next thing?"
1641040,1646800," Uh, this example shows how to decode and play a sound using the low-level API. So this is a high-level"
1646800,1654400," API. There is a low-level API. So we're going lower in abstraction. So first we went from RayLib to, uh,"
1654400,1660080," mini, mini audio. And within mini audio, we're going even lower in the abstraction."
1660080,1667440," Soon we're going to be programming in assembly without operating system. Without any drivers,"
1667440,1671840," like interacting with the hardware directly. Isn't that cool?"
1671840,1678560," Anyway, so what we have to do in here, so there's a data callback. Okay. So it's basically through a"
1678560,1686480," callback or something. And there is some sort of a decoder. ""My decoder! Read PCM frames from my decoder!"""
1687440,1693120," So my result, my decoder. Okay, okay, okay. So we provide some sort of formats."
1693120,1698480," We initialize the device and we start the device. Oh, this one is interesting."
1698480,1703520," This one is interesting. But this is, I suppose, needed"
1703520,1711840," for some special formats, right? So essentially here you're decoding the format yourself,"
1712800,1717440," or maybe through their decoder, right? So apparently it is through their decoder. And then just sending"
1717440,1725280," it to the device. So that's basically what's going on in here. All right. You know what? I would like to"
1725280,1732240," jump directly to maybe capturing the sound because that's what I'm interested in. I'm pretty sure there"
1732240,1740480," should be an example that captures the sound. So is there something like... Oh, simple capture. Okay,"
1740480,1746960," that's pretty cool. Demonstrates how to capture data from a microphone using low-level API."
1746960,1756160," Okay. This example simply captures data from your default microphone until you press enter. The output is"
1756160,1765040," saved to a file specified on the command line. But this is actually pretty interesting. Which microphone"
1765040,1771360," is this going to use? Because I have at least three microphones attached to this machine. There is a"
1771360,1778240," built-in microphone for like in the laptop. There's a microphone like this one. And there's also a microphone"
1778240,1786960," in a webcam, right? So there's at least three of them. So which one is it going to pick? And can we enforce a"
1786960,1795280," specific microphone? Right? That would have been interesting because in a mutualizer, it would be"
1795280,1800480," kind of cool if the interface itself would have shown like all of the microphones that you have, like"
1801200,1806160," in sort of like in the front page. And you literally just pick, okay, pick from that microphone or that"
1806160,1812560," microphone or that microphone. And don't depend on the default choice of operating system. That would"
1812560,1817920," have been cool. Right? So yeah, this is something that we should do definitely."
1817920,1826480," Okay. So from your default microphone until you press, the output is saved, blah blah blah. Capturing"
1826480,1830400," works in a very similar way to playback. The only difference is the direction of data"
1830400,1833920," movement. Instead of the application sending data to the device, the device will send data to the"
1833920,1839600," application. This example just writes the data received by the microphone straight to a WAV file."
1839600,1844320," Okay. That is very poggers, my friend. This is very poggers. So we have to"
1844320,1849440," initialize the encoder in a very specific form. This is so freaking cool. I love that."
1849440,1857920," Right. So we initialize the encoder. Right. So this is the config file. My encoder init file."
1860400,1865600," So there's like several factories initializing configuration and stuff like that."
1865600,1875120," So device config my device config init device type capture config format. So we initialize in all of"
1875120,1882320," these things. Then we initialize in the device. We start in the device. We're waiting and then we just"
1882320,1893360," finish in here. And then we save it to here. But that's unclear. Like no output file. So where do we provide"
1893360,1901920," our V? Oh yeah, I see. So you provide the file. You provide the output file through the command line"
1901920,1907680," argument and then you just do that. Okay. Let me actually maybe copy paste this entire thing"
1909360,1916880," to a separate file. Right. So I want to copy paste it to a separate file. Right. Example.c. So I don't"
1916880,1923840," flash bang you constantly. Right. So I do not flash bang you constantly. And we can slowly just go through"
1923840,1932320," these entire things. To be fair, it's rather interesting. If it's that simple, we can just go ahead"
1932320,1941680," and integrate it today on today's session. Right. And that would be pretty cool. Because the only thing"
1941680,1947920," you have to do, you just have to take these frames. Right. So, and these are the frames. Right. So this is"
1947920,1955520," basically the input. Or maybe it's output or whatever. Right. So to take the frames that we've got"
1955520,1963040," and just send them to FFT analyzer. And then it is going to just visualize. Because FFT analyzer"
1963040,1967920," doesn't give a shit. Right. So you give it some samples and it will just visualize them. It doesn't"
1967920,1974160," care where they came from. So that should be pretty straightforward. And what's cool is that, what's cool"
1974160,1981520," is that, is that mini audio comes with RayLib. So you can't access the RayLib declarations. But if you"
1981520,1989120," provide them and link with RayLib, they will work. It will just use the RayLib from the, the mini audio"
1989120,1994720," from RayLib. Right. Because they baked into the RayLib. It's actually kind of cool. Right."
1994720,1998400," I suppose it's going to be the same as with STB. Right."
2001360,2011120," The same as with STB image and stuff like that. Okay. So let me see. Right. So we can call"
2011120,2019680," this something like play. Right. So this is going to be the play example. So this is build and we just"
2019680,2024720," create the play. So let's remove main."
2028560,2039200," And now we probably want to create something like record record record record. See, I'm going to"
2039200,2043520," include mini audio or do the edge and create"
2043520,2053200," mini audio implementation. And all right, I'm going to return this kind of thing like so."
2055200,2060960," Uh, let's take a look at the example. So what I like to do with examples, I like to go through them."
2060960,2065600," Right. I could have just taken this example and compiled it and run it, but it's not particularly"
2065600,2071840," useful because I don't understand what the hell is going on within that example. I like to sort of"
2071840,2077680," re-implement that example, go through that example and understand what each individual sort of part and"
2077680,2087680," line does. So then I can reuse the code. Right. So if you can't, uh, look inside of the black box,"
2087680,2094240," you cannot use that black box in more interesting ways. You only can use it the way you were told to"
2094240,2100160," use it. Right. So to find new ways of using the black box, you have to disassemble it and look what's"
2100160,2105360," inside of it. So you can take the inside of that black box and rearrange them to the way, uh, the way"
2105360,2110560," you need it. So that's why I like to look into, into the code and actually understand it. I know that's"
2110560,2118000," really frowned upon. In 2023, you are supposed to be, for some reason, dumb developer who just copy"
2118000,2128640," paste the code and, you know, uh, calls it a day for somehow it is viewed as being smart and effective."
2128640,2136160," So it is like just taking some shit from the internet, copy pasting it into your project without"
2136160,2141040," understanding what the fuck it does and calling it a day somehow is considered smart and effective."
2141040,2146560," Like the, the world is fucking going insane. Like, I don't understand this mentality."
2146560,2152960," Like you are giving away control of what the fuck is going on in your project completely."
2152960,2158560," You're giving away control. Like you do not control situation whatsoever. And somehow you are the smart"
2158560,2167920," one. I have no idea how does that make any fucking sense. Right. So how are you are smart if you are not"
2167920,2173600," in control of what the fuck is going on? You're by definition not smart. You're by definition"
2174720,2185440," whatever. So it's just like, I don't understand how that makes sense. It's so weird to me."
2185440,2195200," Anyway, and they're making up some very fucking dumb excuses. Like you, you can know everything in"
2195200,2200400," the world. How can you learn everything? It's too complicated. Well, and that's the reason to not learn"
2200400,2207360," everything, anything at all. It's just like, what? And it's not about like knowing a lot of things."
2207360,2213120," And it's not about memorizing a lot of things. It's about in control of the situations. And all of"
2213120,2220880," these motherfuckers are talking about aligning AI. Right. They're so obsessed with aligning AIs, but they"
2220880,2226240," then giving away a control of their source code to some random piece of code on the internet. It's just like,"
2226240,2235360," what the fuck is anyway, I need to stop writing. I'm sorry. Anyway, let's go ahead and just like copy"
2235360,2240000," paste this piece of code without trying to understand what this piece of code does, because fuck that,"
2240000,2251840," we're being efficient. So anyways, so the thing I want to do, actually, I want to copy paste this piece of code"
2253280,2260080," and try to compile it and see where it fails. Right. I'm going to go ahead and just like do it like this."
2260080,2266960," So this is a record. And okay, mini audio. Are you supposed to do it like that? Right? Audio."
2266960,2276960," Let me go. So it's doing something. It is doing something. Okay. So this mother flipper just compiled,"
2276960,2283440," right? So this mother flipper just compiled. Very interesting. Very interesting. Okay. So"
2283440,2293520," mini audio. So encoding format, ma format. So there is encoding format and just format."
2293520,2300560," Very interesting. And then there is a channels and there is a sample, right? Okay. So we can try to take a"
2300560,2305840," look at what this encoding format. I suppose it's more of a something. Yeah. Encoding. Oh, okay."
2305840,2317600," Very interesting. So yeah. So it's basically, we're creating an encoding for a very specific sort of"
2317600,2324480," like a container or whatnot or not container, but yeah, you know what I mean. So the format is what? And the"
2324480,2333840," the format is the format of the sample. U8, S16, S24, and so on and so forth. All right. So okay. So"
2333840,2340000," everything makes sense to me, right? So this is configuration. So we're creating a WAV file with"
2340000,2345680," flow32 format. We have two channels and this is the sample, right? So that's basically what's going on"
2345680,2351920," here. And we just created documentation for that specifically. Right. So that's very cool. That's"
2351920,2359920," very cool. So what next, what's next do we have? So then based on that configuration, we are initializing"
2359920,2365360," file, right? I'm not going to accept the file through the command line arguments, right? Because I couldn't"
2365360,2372080," care about that. So let's say output wave, right? Output wave. And then I'm passing this encoder"
2372080,2378560," configuration that contains like what we want from the file. We want a WAV file with a format float32,"
2378560,2383120," which I suppose from minus one to one and two channels. I'm not pretty sure if we need two"
2383120,2389200," channels, but I mean we can we can have them have them nonetheless. So we just give it as a pointer"
2389200,2396000," and then we are given encoder. And I suppose encoder is an output argument of this function,"
2396000,2401440," right? It basically creates an encoder. Yeah, there we go. So it just creates"
2402320,2411280," this specific encoder. All right. That is very interesting. And it can fail, of course. It can fail."
2411280,2417040," So because of that, we're checking whether it's massaccess. If it's not massaccess, we say that"
2417040,2422800," we fail to initialize output file. Okay. Okay. All that makes a lot of sense. I really like that. All of"
2422800,2430240," that makes a lot of sense. So if this thing not equal to massaccess, we have to say fprintf"
2430240,2441120," failed. We can even have something like const char output file path. And we can just save this entire"
2441120,2454400," thing to their output file path. So here it is. And we can say std error. Error could not initialize"
2454400,2464160," as output file path. And then we're going to return minus one because the tutorial tells us to return minus one."
2466560,2473920," Right. So do we need to do anything else? Do we need to do anything else? Actually, we need to take a"
2473920,2482320," look at the encoder init file. So just to see where is this function. Okay. So just encoder configuration."
2482320,2490000," You can't really see that. But yeah, there we go. It's kind of interesting. Why do we pass configuration"
2490000,2498320," by a pointer? This is just a structure and by immutable. So that means we do not plan to modify it."
2498320,2504880," We do not plan to modify it. Is it some sort of a big structure? It's actually a really small structure."
2504880,2514000," Right. If we... Yeah, that's interesting. If we just passed it by a value, right, if we just passed it by a"
2514000,2521920," value, we could have simply just inline the whole thing in here. So the only reason why we have to"
2521920,2527040," have like this intermediate variable is because we pass it by a pointer. And so we cannot just do it like"
2527040,2532800," that. But I mean, it doesn't look good anyway. So I guess it's fine. It's kind of interesting because"
2532800,2537920," modern C developers are not afraid of passing structures by"
2539520,2542800," by a value. Because this is something that the modern C compiler can do."
2542800,2548960," Wait a second. Defining variables at the beginning of the function"
2548960,2557360," and also passing structures by a pointer, even constant ones. How old is the developer of Mini Audio?"
2557360,2563760," Like, I'm really curious. Their code looks like a code with veteran C developer."
2565600,2571600," Right. It's a very old-fashioned C development style. And I'm not criticizing it, by the way."
2571600,2576080," I'm just curious. I'm just curious. It's because it really feels old-fashioned."
2576080,2583680," Right. But maybe it's not necessarily the developer is old-fashioned. Maybe"
2583680,2591040," it's that they target very specific platforms like C89. So maybe this library is trying to be so"
2591040,2596880," cross-platform. It supports some places where there's only C89 compiler or something like that."
2596880,2603440," Maybe it's supposed to also work in embedded. Who knows? Yeah. Maybe."
2603440,2613600," So you know what's interesting about the code that works for embedded? If the code doesn't contain anything"
2613600,2619440," like low-level platform specific, that code is probably going to work literally everywhere."
2619440,2625760," Like, literally anywhere it will work. Right. If it doesn't call to some like very specific"
2625760,2631440," exotic assembly instructions or anything like that, it will literally work anywhere."
2631440,2635680," Literally. Yes, literally. Thank you, Chad."
2639760,2647680," 3.2 megabyte in embedded. But this is only a file size. This is just text. But if you compile it with"
2647680,2654080," special maybe macros. So the thing about header-only libraries, by the way, is that they usually implement"
2654080,2660240," shit-ton of macros that allow you to literally disable chunks of the library, the chunks that you"
2660240,2667600," usually don't need. So STB library, for instance, it may have a macro something like no STDIO. And if you"
2667600,2674880," define like no STDIO, it will literally strip away any calls to printf and even including STDIO or anything"
2674880,2680000," like that entirely from the library. So usually with this kind of header-only libraries, you can control"
2680000,2685840," how much of the library you can include in your final binary. Right. So just because the full source code"
2685840,2692080," weighs 3 megabytes, it doesn't mean that it's going to weigh like that in a final program. Right."
2692080,2695040," So because maybe there's a lot of macros and stuff like that. You know what I mean?"
2695040,2707520," So let's go back to the example. Everything is clear so far."
2707520,2716080," So we created the encoder and the file, the output file. And now we have to create a device."
2717680,2725920," So this is config unit, my device type capture. All right. So let's go ahead and just do it like that."
2725920,2729840," So this is, this is not what I want it honestly. I want you to copy paste this entire line."
2729840,2738800," Right. But I want to take the definition of my device config. Right. So this is the device config."
2740320,2744080," So this is example. Maybe I want to... Nah, it's fine."
2744080,2753200," And we are supposed to just set... Oh, this is interesting. Right. So what we're doing here,"
2753200,2762320," we are picking a capture device, which has the same format as the encoder we created. Right. So we take a"
2762320,2770000," look at the format, the amount of channels, the sample rate. And another thing we have to set up"
2770000,2774800," for the device is the callback. Right. So which is probably a function. Right."
2774800,2781120," And we set the encoder as the user data. This is the thing I was complaining about in Raylib."
2782000,2789520," Right. Because having this user data that is passed along the callbacks is a super common thing. Right."
2789520,2794800," It is a super common thing. I suppose it's passed... I don't really know where it's passed, but I mean,"
2794800,2802320," yeah. Oh, it's passed as the device. Right. It's a super common thing. And Raylib lacks that for some"
2802320,2808800," reason. And if you want to pass some custom data to a callback, you must pass it via global variable."
2808800,2814480," You're kind of forced to do that. And I don't know if that's by design. It could be by design, actually."
2814480,2820880," It could be by design. But the usual convention is just like you have this like extra parameter"
2820880,2827840," that the color of the callback passes to you. Because C doesn't really have like closures or"
2827840,2832800," anything like that. So you can't really enclose your environment and keep it with you."
2835920,2840880," And by the way, closures are basically that. Closures are basically that. So you basically say,"
2840880,2847680," like, you take the data that you want to, you know, capture with your function and you keep it there."
2847680,2854640," It's just like all the functional languages just do that for you automatically. Somehow. They also try to,"
2854640,2861760," you know, hide the implementation details of how it's done from you. So in C, you have control on how you"
2861760,2868400," you pass information in your closure, so to speak. Yeah, I'm drinking cup of air, right? So just a second."
2868400,2874880," Cup of air. Yes. Are you jealous? Are you jealous that I can sustain myself on just air?"
2875840,2881360," All of you need coffee and tea and a lot of caffeine? I can't sustain myself on just air."
2881360,2883520," Eat that."
2883520,2890480," Drinking severe air. Yes, exactly."
2890480,2899520," Anyway, who needs tea? Who needs tea if you have air?"
2903520,2911040," Okay, good. I want to take a look at the the function that initializes the device and stuff like that."
2911040,2920320," Mini audio. Mini audio. Because I want to... Yeah, there we go. I want to take a look at my device type."
2920320,2931760," So, and there is apparently four kinds of devices: playback, capture, duplex and loopback."
2933520,2937200," And duplex is basically playback and capture."
2937200,2944880," Which is three. Holy sh*t, this is so f*cking clever."
2944880,2952720," Do you guys f*cking see that? Do you see what they did?"
2954560,2962880," Do you f*cking see what they did? Okay, so this is enumeration, like holy sh*t, this is enumeration,"
2962880,2968880," right? So that means the value go like, you know, in increasing order, right? In an ascending order."
2968880,2976800," If you take a look at the binary representations of one, two, three and four, right? So one is zero one,"
2976800,2986880," two is one zero, three is one one, and four is one zero zero, right? So essentially we probably want to do"
2986880,2994720," something like that. So that's basically what we have. And essentially, a bit represents what kind of"
2994720,3003040," functionality is enabled, right? So the first bit in here means that it's a playback. The second bit means"
3003040,3010640," it's a capture. Both of them together means duplex, both playback and capture. And it's naturally placed"
3010640,3019600," in a place three. So it naturally both of the bits. But not only that, they could have just put three in here,"
3019600,3027760," but they explicitly, explicitly define it as ""or"" between one and two, to actually document,"
3027760,3034320," to actually tell you, yes, that is intentional. They not only just did it like that, if they just did it"
3034320,3042240," like that, you wouldn't even know that that's the intention. But by doing it like that, it's self-documented."
3042240,3048960," The intention is self-documented. Holy f*cking sh*t! Like, I'm looking at the code of mini audio,"
3049600,3057920," this is such an experienced C developer. This is such an experienced C developer. Like, they know how"
3057920,3065920," to just describe intentions as the code, right? Because the junior developers, they document with"
3065920,3071760," comments, just with comments. But this person, the authors of mini audio, they know how to document"
3071760,3081600," with the code itself. Compliments from Zosin, I really like that, right? I like this library so far."
3081600,3084800," Right, I really like this library so far."
3084800,3096160," Junior devs don't document at all. What are you talking about? Juniors write more comments than"
3096160,3101760," the right code because that's what they teach them in the university. These mother flippers in the"
3101760,3108000," universities tell, literally tell them you have to document each individual line somehow. They tell"
3108000,3113600," them that you write a code and you literally need to duplicate that code with natural language for"
3113600,3120640," whatever f*cking crazy reason. Like, I have no idea why they tell them to do that. So it's so pointless and"
3120640,3128960," useless and actually clatters the code. It's like, why people do that? Just like this, for example."
3128960,3134000," I'm joking, by the way. So it's probably"
3134000,3142320," it's probably correspondence to... Oh, it's correspondence to the"
3143200,3153200," yeah, to the numerations and stuff like that. Oh yeah, you start with UML diagrams, exactly. Yeah, I forgot about that."
3153200,3156000," I don't remember how to program, I'm sorry."
3161600,3168320," Okay, we created the device. Specifically, we created a capture device, not the duplex one,"
3168320,3174320," right, but a capture device. Isn't that a poogers? Isn't that a vogers? Isn't that a voggy pooggy poogers?"
3174320,3180320," So I would like to take a look at the structure my device config, my device config."
3182000,3186880," Okay, it's not the structure, apparently. My device..."
3186880,3198560," I haven't... Yeah, what I have to do? I have to create..."
3198560,3205520," Am I going crazy, chat? I feel like I'm going crazy."
3206880,3212080," My device config. Why can't I find this thing?"
3212080,3219280," Ah, because I see what's going on, because they decided for whatever reason to"
3219280,3224160," have type dev separated from the structure definition. Sure, I mean, fine. I don't judge."
3224160,3230080," My device config. So there is a device type. Okay, so we know what is device type. There's four"
3230080,3239040," device types. Sample rate. Period size in frames. Period size in milliseconds. Map performance profile."
3239040,3243440," Okay, there's a lot of things that document, actually. That's actually pretty cool."
3243440,3250480," So there's a callback. Oh, and the definition of playback and capture is actually inside of the"
3250480,3254880," definition here. That's good, actually, because I was looking through the example and I saw that there"
3254880,3260000," is like one layer of interaction. So I thought that we will have to jump in a different place to just"
3260000,3268400," see the definition of this thing. But I actually don't have to. What's that? Wait, what is what's IP?"
3268400,3276240," I don't really know what is what's IP. Is it related to WASI? Maybe it's not. It's probably not"
3276240,3283840," related to WASI. But anyway, so there's also pulse, core audio, a audio and stuff like that. Okay,"
3285120,3292800," everything seems to be okay. Everything seems to be okay. So I'm happy to continue with this stuff."
3292800,3301200," So we just set the format and the channels the same as for the encoder, right? And of course,"
3301200,3308640," we set the same sample rate. And then we have to set the data callback and the user data and we set the user"
3308640,3323200," data as the encoder and the encoder. But in the example, when we do the device... Oh, we pass the device"
3323200,3328240," through... Okay, I see, I see. So that's how we extract this entire thing. So the encoder is... All right,"
3328240,3335840," right. That makes a lot of sense. And of course, we have to initialize the device, right? So we must"
3335840,3342720," initialize the device. That's pretty cool. After we configured everything. Failed to initialize"
3342720,3348000," capture device. So it's minus two. We're indicating like different errors. Ooh, this is actually pretty"
3348000,3354640," cool. Yeah, so we know where exactly it failed, right? We know where exactly it failed. And then we're just"
3354640,3360320," starting the device. But if we couldn't start, we have to uninitialize the device anyway, right? So"
3360320,3367760," that's quite important. I see. I see what's going on. All right. So that seems to be fine. And then"
3367760,3374800," we're just starting to record. And then we're uninitializing all these things. Okay, so everything"
3374800,3380640," is clear so far. I really like that. So I didn't look at the definition of these functions because they"
3380640,3387600," just accept the parameters, right? They don't really accept anything else, right? So I guess it's fine."
3387600,3392240," So null in here is probably just like an additional thing. We already saw that before."
3393760,3400400," Okay, so and in an example, right? In an example, we accept the data parameters. I'm not really sure"
3400400,3409440," what is input and output. Oh, I think I know what it is. Yeah. So essentially, it's a general data callback"
3409440,3417600," for any kind, for any kind of device, right? So if it's a capturing device, you would receive something"
3417600,3425920," in the P input. If it's a playback device, you will have to write into P audio, P output, right? So it's"
3425920,3434480," basically like a general callback for any kind of device, both playback and capture. Makes sense to me."
3434480,3440560," So that's probably why it is like that. That's probably why it is like, and this is exactly what"
3440560,3447840," they do in here. They literally explicitly ignore P output. Okay, so I really like this. I really like"
3447840,3454000," working with this code. It's just like it's so beautiful, right? So like I have a question. It's"
3454000,3460880," super easy to answer any questions, right? Yeah. It all makes sense. Everything makes sense. Everything"
3460880,3467520," makes sense. I'm super happy. Like, it's so pleasant to work with a code written by a competent person."
3467520,3472240," It's just like so good. Love it. Love it. Love it. All right. So let's try to compile."
3472240,3479040," All right. All right. All right. So we have encoder, a redefinition of encoder config. Oh,"
3479040,3484560," this is because I copy pasted something. Very stupid. So let's go through the rest of the compilation errors."
3485440,3495200," What else do we have in here? An encoder? Oh, I suppose what I meant to define in here is an encoder."
3495200,3500720," Right. So I want you to define an encoder. Can I just like do it my encoder? Is that just my encoder?"
3500720,3505920," Right. Yeah, it's just my encoder. So I can just do it like that. All right."
3505920,3513840," So what else do we have? So this is the result. This is the first instance of my results. So we have to define"
3516240,3522480," So what's the device? And we never defined the device. Right. So I suppose it has to be my device."
3522480,3530480," My device. I don't even have to look up through the example anymore because I understand what the code"
3530480,3535680," does. Right. So I can just fix all that stuff. Right. That's the importance of understanding the code."
3535680,3540000," Right. So once you understand what the fuck is going on here, you can just work with that and you can"
3540000,3548640," sort of shape it in whatever you want. Alrighty. So we've got some stuff. And I wonder how can we use that?"
3548640,3556320," So what is the default microphone? I wonder if you if several programs can use my mic"
3556320,3562640," simultaneously because the currently OBS uses my microphone. What if it's going to be second"
3562640,3568400," application that uses my microphone? I think it is a thing on Pulse Audio. Right. And if I remember"
3568400,3575440," correctly, this mic is set as the as the default one. Right. So that's why OBS picks it up quite easily"
3575440,3583040," all the time. So let's try to let's try to record something, I suppose. So record."
3583040,3591600," Oh, no process. Okay."
3591600,3597440," So. All right. So let's actually listen to what the fuck is going on."
3604480,3614080," Easy peasy lemon squeezy. So we managed to actually capture some from the microphone that easy."
3614080,3626960," That's pretty cool. All right. I mean, we can just like we can just already try to integrate this"
3626960,3632160," entire thing with mutualizer. I think it should be pretty doable. Right. So it's just like we have to."
3633520,3637280," Yeah, we have to initialize just the device. We don't have to initialize the encoder."
3637280,3644480," Right. Only the device. And right. And receive stuff from that specific device."
3644480,3651600," But that means we should not use the RayLib stuff. Right. So we need to have two separate."
3651600,3657200," Yeah. Well, even from the point of view of UI, naturally, we want to have two separate modes in"
3657200,3662560," mutualizer. Right. The mode that plays the music. Right. So let me actually start mutualizer so we can"
3662560,3670160," see what the fuck I'm talking about. So this is mutualizer. This is going to be OPT RayLib environment."
3670160,3676080," And I'm going to put it like that. There we go. So in mutualizer, there is right now only like one mode"
3676080,3682400," where you can put some music in here. Right. And it's playing the music. But I suppose there should be two"
3682400,3692320," modes. When you drag and drop a file, it goes into this mode. And maybe there should be a button. When I press it, it uses your mic to"
3692320,3699520," actually record shit. So yeah. And when you're doing that, we're using a completely different callback."
3699520,3705280," Okay. I can already see how we need to shape the code of mutualizer to actually make it work."
3705280,3707920," I think it's doable. I actually think it's doable."
3709920,3715680," All right. So and an interesting thing is going to be so you need to be able to record"
3715680,3722880," your voice or maybe not only your voice, but from your mic before you can actually render it."
3722880,3728880," So from the UX point of view, we need to establish sort of the protocol. How do you generate videos from"
3728880,3730080," what you just recorded?"
3730080,3736880," press M to use mic. Yeah, that's actually a pretty good idea. So some sort of a key"
3736880,3743920," would be good maybe. But we'll see. I also want to have like a pretty cool UI,"
3743920,3750240," like material UI with flat buttons like we did with tic-tac-toe and stuff like that. That would have been cool."
3750800,3759840," Yeah. So we need to establish some sort of like a UX protocol where you are in a record mode."
3759840,3765840," Then you press a special button, maybe key, maybe button, and you record for some period of time."
3765840,3773600," And then it takes the sample that is recorded and goes back into playing music mode. But with the sample,"
3773600,3778720," it's recorded. So then you can continue as usual by rendering the video out of what you recorded."
3778720,3785920," That's actually a pretty cool idea. Right. So we can reuse already existing state machine of UI"
3785920,3792720," to integrate the, you know, the microphone stuff. Right. With the microphone, you just record some stuff."
3792720,3797040," And while you're recording, of course, the visualization is going to work. Right. So while you're recording,"
3797040,3803040," Visualizer also shows how it's going to look like. And then it sends it back to the state where"
3803040,3811040," it feels like the recorded thing is basically the file that you drag and drop. Right. So that's basically"
3811040,3818880," the idea. That's basically the idea. So yeah, let's try to do that. But we're going to try to do that"
3818880,3827040," after a small break because I ran out of air. So I need to refill my cup of air. And after I have my cup of"
3827040,3835040," air, we're going to try to integrate that with that with Visualizer. All right. So I'm back. Let's go ahead"
3835040,3842960," and try to integrate this entire stuff into the Visualizer. Right. So as I already said, the Visualizer"
3842960,3848720," should already contain mini audio implementation. So the only thing it needs in me is mini audio"
3848720,3856720," declarations. So one of the things we can do, we probably want to go and just copy paste, just"
3856720,3867520," just copy paste the mini audio header. So what is this mini audio? There we go. So here it is. And I'm just"
3867520,3876400," going to casually copy paste this entire thing. So look, if you do the usual define mini audio"
3876400,3883920," implementation and just include mini audio like that, you're going to be slapped in the face immediately,"
3883920,3892160," like immediately. I'm telling you. I'm telling you. So look, look, look. Right. So just build. We have"
3892160,3896240," to build POSIX. Yeah, there we go. So we're going to be slapped in the face. We're going to get slapped"
3896240,3901360," in the face. I'm pretty sure we're going to get slapped in the face. We didn't get slapped in the face."
3901360,3909360," That's really bizarre. Why can't you just slap me in the face, please? Anyway, so one of the things we can"
3909360,3914640," try to do, we can try to maybe initialize the encoder, right? So let's just go ahead and try"
3914640,3919600," to initialize the encoder because I'm pretty sure the optimizer just like stripped all of that away."
3919600,3925520," So that was totally fine. But if I try to do it like that, I'm pretty sure it's not going to work."
3925520,3928480," So there is an unused variable."
3932080,3941280," Huh. That is bizarre. So usually it worked with stb image library, right? I do remember that. So let"
3941280,3948960," me try to replicate that. So raylib and when we're linking with raylib, yeah, we do link at the end of"
3948960,3954720," the day with raylib. All right. So I'm going to go to nothings and I'm going to try to find stb image."
3956560,3962400," Runtime. Oh, this is a good point. Maybe it is runtime. Maybe it is loaded at runtime."
3962400,3970240," But I mean, the code that loads this thing at runtime still can collide in at linking stage. So I'm not"
3970240,3977920," quite sure. Right. But I had a similar problem with stb image. So I want to try to replicate that problem"
3977920,3982960," for scientific purposes, right? Because we want to understand what the hell is going on."
3982960,3992400," Just give me the row thing. Just give me the row thing. And I'm going to just download it in here."
3992400,3997360," So because raylib also includes stb image, right? Its own stb image."
3999120,4013200," It's own instance of stb image.h and let's just try to do that."
4013200,4016960," Right."
4016960,4025840," So it's totally fine. Because again, we didn't use any of that. So if I"
4026560,4033600," put it like that and then stb image load stbi load a thing."
4033600,4037280," We can just copy paste this stuff"
4037280,4045200," and put it in here like so. And file name, let's just put something like image png."
4045200,4049680," It doesn't really have to exist at compile time. What it has to do, it has to"
4050480,4057680," be like sort of a working code at compile time. And why does it work?"
4057680,4065120," I'm actually genuinely surprised how does it work?"
4065120,4071040," Because I remember linking with raylib and stb stuff would collide with it."
4073200,4078960," I do remember that. Do you guys remember? Because there was things like that. But I can't reproduce"
4078960,4087520," that anymore, surprisingly. So that is totally bizarre. That is totally bizarre."
4087520,4091520," Because if we take a look at the like raylib implementations, right?"
4091520,4098560," So there is the external stuff and there is stb image.h. So here it is stb.image."
4098560,4102880," And then mini audio. Any audio and stuff like that."
4102880,4109360," So that is bizarre. So static versus dynamic maybe."
4109360,4116480," Oh yes, that's right. Thank you so much. I just remembered that I compiled raylib dynamically."
4118320,4130080," God damn. And the reason why I compiled raylib dynamically is because I'm using hot reloading."
4130080,4138640," That's right. I'm using hot reloading. And essentially, the executable and the library that I'm hot reloading,"
4138640,4143360," they use the same raylib. And to achieve that, you have to have raylib in DLL."
4144000,4150480," Yeah, so thank you so much. I completely forgot about that. So that's why it works. That's why it works."
4150480,4155120," But we can still try to reproduce the situation if we compile for windows. Because for windows,"
4155120,4159120," we're still using static raylib, right? Because I didn't implement hot reloading for windows."
4159120,4166080," So if I go ahead and just like compile it for windows, it should collide, please. There we go."
4166080,4171840," Finally, that's what you see. I'm not insane. I'm not insane. It actually does collide with stb image."
4173040,4177440," Right. I didn't confabulate all that shit. Trust me. I'm not insane."
4177440,4185600," Anyways, which actually raises an interesting question."
4185600,4194720," Which function is it going to use? Which function is it going to use? Is it going to use the"
4194720,4202080," raylibs functions? Or is it going to use our own function that we supply to ourselves?"
4202080,4208640," That's a very dangerous thing, actually. So yeah, because in case of raylib, it could be dangerous."
4208640,4215760," Raylib has global state. And if you have two instances of raylib, so like it's unclear which"
4215760,4222160," instance is sort of used. Does mini audio has a similar situation? Does mini audio has a global state?"
4223600,4227760," We have to be careful with this kind of stuff. I'm telling you. You have to be careful."
4227760,4234160," So let's actually try to reproduce that with specifically mini audio, right? So I'm going"
4234160,4240080," to do mini audio. And I'm going to just try to do it like that. And I'm going to try to recompile with"
4240080,4245040," windows, right? And on windows, it should actually fail. Oh, on windows, it's complaining."
4245520,4257600," Oh, there is a redeclaration of rectangle. Because mini audio, god damn mini audio includes windows, right?"
4258400,4268960," Yeah. I mean, what we can do, we can just not include windows ourselves. Can we? I suppose"
4268960,4273840," we can just do it like that. Yeah, so there is a very annoying thing."
4275280,4283680," Is that some of the names in raylib collide with the names in windows. And it's just like, bruh,"
4283680,4286880," how do I get rid of that?"
4286880,4292560," So it's not, it's not that easy. Specifically rectangle,"
4292560,4295360," specifically rectangle, because really defines its own rectangle."
4295360,4303520," And if you try to use raylib and windows, it's a little bit of a pain in the ass."
4304240,4306720," And this is because raylib doesn't have any prefixes."
4306720,4312720," Because the library is chad like that. You don't need anything but raylib."
4312720,4317680," Windows? GDI? No, the only thing you need is raylib."
4317680,4321360," The only thing you need is a raylib."
4321360,4327280," I wonder if there is any way to easily solve that. I actually wonder."
4327280,4333360," Right. So there we go. So things like rectangle, right? So WinGDI, there is a rectangle, function"
4333360,4344160," rectangle. And in raylib, if we go to raylib, include a raylib rectangle, there is a structure"
4344160,4350640," rectangle and they collide with each other. And I don't think, I don't think there is a, I didn't see"
4350640,4358640," obvious mechanism of how to solve that. How to solve that? We can try to google it up. Raylib"
4361840,4366320," ""WindowsH showCursorRectangle""."
4366320,4373120," So I'm pretty sure that was already yeah, yeah, yeah. Because it's so obvious that this kind of stuff"
4373120,4375680," will happen. So I wonder what's the discussion in here."
4380320,4388720," It would break too many things. Okay. As you mentioned, these changes are breaking the API in"
4388720,4396560," ways that would require changes already. Okay. Okay. Just for completion of the discussion here,"
4396560,4401680," three options to avoid conflicts. I just saw them and they work. Define and require symbols from"
4401680,4407120," WindowsH instead of included full header. That may work. One of the things I did, by the way,"
4407840,4417280," one of the things I did when I was integrating Windows FFMPAC with raylib login. Right. So here is"
4417280,4423760," the Windows implementation of FMPAC. And in case of an error, I was just using Raylib login. What I did,"
4423760,4430880," I did an opposite thing. I copy pasted all of the login related things from Raylib. Right. Because it was just"
4430880,4438800," easier. It was just easier. So but maybe this is something that we can do in here. Right. Just it can"
4438800,4445200," do in here. But in case of mini audio, it's not really going to work very easily. Compile Windows H with"
4445200,4451280," functions with function using it on independent module called units. Okay. So that could be also a thing."
4452240,4463280," Try avoiding with windows.h. You know what would be cool? If there was some sort of a mechanism to"
4463280,4476560," add prefixes to the Raylib functions. Essentially, by default, all of the names don't have prefixes."
4477360,4483600," Right. And if you define some sort of a macro, so maybe all of the names are wrapped into, you know,"
4483600,4489600," prefix. Right. So all of the names are wrapped with this kind of thing. And if you define some sort of a"
4489600,4500320," macro, it defines prefix as name, custom, like custom name. You know what I mean?"
4501200,4508080," So essentially the user of Raylib can well, that means you have to recompile Raylib. Right. You have to"
4508080,4517680," recompile Raylib. But I mean, you can customize the allocator of Raylib by recompiling Raylib. So"
4517680,4528400," one of the ways to customize things would be maybe you just compile your own instance of Raylib that just"
4528400,4533200," uses that. But I mean, there's also functions that call to things without the prefix. So it's not going"
4533200,4539440," to work. Right. So this also not going to. It is genuinely, genuinely difficult problem. It is genuinely"
4539440,4546400," difficult problem. So I can see that somebody in the chat said, you can define no GDI. We can try that."
4546400,4553280," We can try that. All right. All right. All right. So can we just define no GDI?"
4555600,4563840," But I mean, it may collide with something else. Right. So close windows. For example, how can I..."
4563840,4572560," Yeah. So we still collide with a lot of things in here. We still collide with a lot of things."
4575520,4585440," So that is genuinely difficult problem. One of the things I see is maybe copy-paste some of the definition"
4585440,4586560," that we're using here."
4596240,4608080," or I don't even know. We can try to keep initialization in a separate translation unit"
4608080,4616560," in a separate translation unit and just call to that. Yeah, we'll have to do that."
4621920,4630560," But in any case, my point is, like, what I want you to demonstrate is that when you manage to compile it,"
4630560,4634000," this name is still going to collide with the name within the Raylib."
4634000,4644640," It's still going to collide within the name within the Raylib. So I literally don't see any other way,"
4644640,4654880," except like having a separate translation unit. So let's create separate translation unit"
4654880,4664960," for MiniAudio.h. Right. So we're going to have this kind of thing. This is a separate translation unit for"
4664960,4670160," MiniAudio. And the thing I want to do in here, I just want to have the inclusion guard."
4670640,4678560," because the reason why I call it like that is because it's literally a hack specifically for"
4678560,4684560," this kind of situation. Right. Since it's a hack, it has to be loud. It has to be extremely loud."
4684560,4691120," So what we can do in here when we are initializing the config and stuff like that. So"
4692320,4704880," so separate translation unit, init audio devices. So that's what we're doing here. And inside of this"
4704880,4712480," thing, so separate translation unit, see when we initialize audio devices. Right. When we initialize audio devices."
4716080,4731760," right. We include MiniAudio.h and simply do this thing in here. All right. But to make sense of this"
4731760,4738080," entire stuff, we probably want to have this as a global variable. Right. So because it should share the"
4738080,4744320," state between several functions that we may have in here. And that's about it. All right. So that's about it."
4744320,4750720," And if I try to compile this entire thing, it will compile. Right. But we have to move this entire"
4750720,4756960," thing out of here. Right. So we already have it in here, but whatever. There we go. So and it compiles."
4757520,4769840," But now what we have to do, we have to call to init audio devices like so. Can you just like, thank you so much."
4769840,4776960," It doesn't have that thing. So that means during the compilation for Windows specifically, we have to link"
4776960,4785200," with this entire thing. Right. So separate blah, blah, blah. There we go. So and it's going to fail now with a different problem."
4786480,4788240," It's going to fail with a different problem."
4788240,4796960," Well, it's going to take some time. Yes. Multiple definitions of MiniAudio."
4796960,4802640," Right. So one of the definitions, the definitions are coming from Libre, like LibreLib."
4802640,4811120," So the way you solve this kind of, you know, collision is basically by not defining MiniAudio"
4811120,4820080," implementation. And that's one of the, one of the important things, one of the valuable things that"
4820080,4826400," header only libraries provide. Right. Because sometimes you don't want them to act like C code."
4826400,4832160," You want them to act like headers because the implementations are already available somewhere"
4832160,4838400," else where you link with. Right. We already have implementations inside of RayLib. And because of"
4838400,4844160," that, we don't need MiniAudioH to act like C. We need to act it just like a header. And that means you can"
4844160,4850560," include it as a header. And that should work. That should compile. Right. This thing complains that we"
4851360,4857600," have implicit declaration. But essentially what we have to do, we have to include separate. Can you just do"
4857600,4866000," separate that? So that's what we have to include. And it's going to be totally fine. Right. And it also"
4866000,4872000," should work for POSIX. Undefined reference because for POSIX, we don't really link"
4874640,4882960," with this kind of stuff. Where is that thing? Where is that thing? So hot reloading."
4882960,4897360," Yeah. So let's put src separate.c. Undefined reference. Still undefined reference. Are you serious?"
4897360,4903920," Oh, this is because, yeah, you have to do that in both with hot reloading and without the hot reloading."
4903920,4914480," So that's basically. There we go. So, and it works here as well. But again, since RayLib in our case"
4914480,4924080," is DLL, if we define, what is it called? MiniAudio. MiniAudioImplementation. Right. MiniAudioImplementation."
4924080,4932000," It will still work. But that raises the question. What MiniAudioImplementation are we using?"
4933360,4939200," Are we using the ones from here? Or are we using the ones from RayLib? And what kind of problems does that"
4939200,4945520," introduce? And that's a genuine question. Like, what exactly is going on?"
4947360,4953520," I don't know. I don't know. So in case of... I think in all of the cases, regardless of anything,"
4953520,4956880," we don't want to include MiniAudioImplementation because they come with RayLib."
4956880,4962480," So I suppose if we don't include implementation, it's going to just use"
4962480,4968800," whatever comes from RayLib. So I think it's safe to assume it like that."
4970960,4976320," I think it is safe to assume it like that. All right. So that means we need to do all of this"
4976320,4984960," audio initialization inside of separate units so we don't collide with RayLib. But if something goes"
4984960,4989440," wrong with these initializations and stuff like that, I still want to be able to log with the"
4989440,4994480," RayLib logging. So we'll have to do the same trick as with Windows, where I had to copy-paste"
4994480,4999440," login-related stuff in here. So yeah. Okay."
4999440,5008400," It is a hard problem. And RayLib is already used a lot in different places, so you can't just rename"
5008400,5020480," things. You can't just rename things. Okay, so let's just continue working on this thing. So we just"
5020480,5026640," initialize... we don't even have to initialize the encoder, right? So encoder is needed specifically"
5026640,5034160," if we want to record all that stuff into the file, right? So it's only needed for that. What we need,"
5034160,5039920," in fact, we need to initialize the device, right? So we need to initialize the device."
5043120,5050640," We need to initialize the device. So let's just create device config. So then the device,"
5050640,5056960," and then we do the device start. And that's basically what we need in here, right? So that's"
5056960,5066800," basically what we need. So we need audio devices. We may return a thing that just keeps track of the device."
5068160,5074560," In fact, we can return the device, my device, like a pointer to the my device."
5074560,5084880," Oh, and by the way, since we passing device config by a pointer, does it have to exist the entire time?"
5084880,5093040," Damn, that's a very interesting question. What if this function does? It saves the pointer to device"
5093040,5100960," this config and stored it somewhere. So well, that can't be true. Like it must just copy some stuff from"
5100960,5107920," there. We need to know that. That's a very interesting question. Like it's a very important question,"
5107920,5114480," I would even say. So that's why I don't like passing like structures by pointer because you can never tell,"
5114480,5120720," like, does it pass it inside of it or does it not? Like you literally have to go and just like check the"
5120720,5128640," source code. You don't know what to expect from all of these things. Okay, so pconfig, what does it do"
5128640,5136480," with it? Okay, so there is this thing. So there is an extended initialization, right? And with the"
5136480,5149840," context config. So pconfig. Yeah, you may not provide it. Okay, I don't think it stores it. So it just looks into,"
5149840,5156000," into the devices. Yeah, that would not make sense, right? So that would not make sense. So I think it"
5156000,5164080," doesn't copy it. I'm being a little bit too paranoid about that. So separate translation for audio."
5164080,5171600," So and essentially because of that, that means we probably want to do something like malloc size of"
5172160,5178480," my device, my device. And of course, we probably want to just assert that this thing, you know,"
5178480,5191520," not equal to zero, not equal to null. I mean, buy more RAM as usual. So and here we're logging with printf for"
5191520,5197200," now. So that's fine. We're just initializing the device. But I suppose we should not start"
5198000,5201920," the device as of right now, right? So let's not start anything."
5201920,5211360," So when the user data is rather interesting. So I'm going to keep the user data as null."
5212160,5222400," So we're not going to pass anything in anything there. So let's just return the device. And in case of an"
5222400,5232000," error, we return null. And in the header, in the header, we're going to be returning void star to avoid"
5232720,5241520," requirement of knowing the structures and stuff like that, right? So we don't really want to know that."
5241520,5248400," We don't really care about any of that stuff. And the question is how we're going to supply the callback?"
5251520,5257680," How are we going to supply the callback? We can try to supply the callback in here like that."
5257680,5268320," But that requires knowing the mini audio stuff. So that means it has to be some sort of a different"
5268320,5274400," callback. It has to be some sort of a different callback. And I feel like maybe it should be callback"
5274400,5279920," similar to whatever we use in plug.c. Right? So there's a callback that just, yeah, something like"
5279920,5287520," this. It just accepts a buffer data and frames. And we just forward that callback like this. So we can"
5287520,5295120," yeah, essentially, we could reuse literally the same callback in plug. This is a genius freaking idea. Yes."
5295120,5301920," Okay. Can I just do it like that then? So here is a separate unit. And we're going to just literally"
5302480,5307680," do it like this. So this is a callback. Is that how you do that? I think this is how we do that. Right."
5307680,5317360," So, and then I can copy paste it back to C. Right. And essentially, this is the user callback."
5317360,5323280," This is the user callback. And we're going to use that user callback as the user data. Because in the"
5323280,5327440," data callback, we're going to be adapting the data callback to the user callback."
5330400,5336240," Yuzu, yuzu, yuzu, yuzu, yuzu. This is fucking genius, man. Okay. So we're getting somewhere."
5336240,5340880," We're getting somewhere, chat. I really fucking like that, mate. I really fucking like that."
5340880,5347840," So now, essentially, what we have to do, we have to take p encoder. Right. So then p encoder,"
5347840,5358000," p, it's not a p encoder. It's a user callback. But for the user callback, we need to know its type. Right."
5358000,5363760," So which is not particularly convenient. So that means in here, we need to define like a typedef."
5363760,5369760," So let's define something like typedef. So this is the user callback. Right. So user"
5369760,5378400," callback. Is that a good idea? We might as well actually do that without the pointer, which means that"
5379840,5388560," maybe we should actually put _t. Did you guys know that Porsix reserved _t for its own"
5388560,5395360," internal things? And something bad's gonna happen if I name custom variable with _t. Oh my god."
5398160,5413120," Sorry. Yeah, I should call it user callback_t, user callback_to_t. That's right. So that's the best way to call it, actually."
5413120,5421920," Oh, yeah. I'm gonna literally call it like that. Like, I don't care. This is gonna be literally the name of"
5421920,5428160," this thing. User callback_to_t. Maybe I'm gonna even prefix it with double underscore in here."
5428160,5437680," No, no. T2 is not that. Right. It specifically has to be _t. It specifically has to be _t."
5437680,5441600," I think this one is too much. Let's actually keep it like user callback_to."
5442640,5453200," Right. That's perfect. So this is a user callback. And if I go inside in here. Right. So this is gonna be that."
5453200,5462560," Boom. So we probably also have to include this kind of thing. Separate.h."
5464320,5476080," Translation using for mini audio. Okay. So in here, we use the user callback. So it's a pointer to the user"
5476080,5487600," callback. So user callback_to_t. Tootie. Tootie. Tootie. Tootie. Tootie. So this is the user data. There we go."
5487600,5493280," And we also need to double check that this shise is not null. Just in case. Just in case."
5494000,5499360," And what we do is just we call that callback. So the frames are going to be p input. Right."
5499360,5506960," So that's the p input. And the frame counts is that. Let it go. So surprisingly, this thing is not const."
5506960,5516720," Which is a little bit worrying. Not gonna lie. It is a little bit worrying. But we're not planning to modify"
5516720,5522880," any of that. So yeah, we probably will have to force this thing to work like this. Right. So we'll have to"
5523680,5530560," do something like this. But we'll see. We'll see. Otherwise, we just don't have any other choice."
5530560,5536560," Right. So we don't have any other choice. Okay. Let's go ahead and just compile everything"
5536560,5542080," with POSIX and go to the compilation errors. My assert. There's no my assert."
5542080,5550000," Implicit declaration. Really? Is my assert only available if you define mini audio implementation?"
5550960,5555360," I mean, fuck you, Leatherman. Fuck you. I can just do assert."
5555360,5558320," Fuck you."
5558320,5562560," It's not a problem for me whatsoever."
5562560,5569280," User callback p input. Yeah, exactly. So this is cast void star and to parameter void star. It doesn't"
5569280,5576320," really work that easily. Because fuck me. So yeah, that's basically the thing in software. If you want to,"
5576320,5580800," in open source software and software general to be fair, if you want to be able to say"
5580800,5586880," fuck you to something, be ready that that something is going to tell you fuck you back."
5589520,5595760," Because of that, we have to cast it explicitly towards star. There's nothing else we can do in this"
5595760,5598320," particular case because fuck me. So yeah."
5598320,5607840," It is what it is and it isn't what it is. It's the most valuable software lesson I can teach you."
5607840,5612720," Right. So if you want to say fuck you to something, be ready that that something is going to tell you"
5612720,5616880," fuck you back. So this is what it is and it isn't what it is."
5616880,5625760," But I'm going to defend my right to say fuck you, even at the cost of being said"
5625760,5630640," fuck you back. I think it's worth it. I think it's worth it. Anyways."
5630640,5636880," Right. So we need audio. So what do we have in here? So it's complaining about something."
5636880,5644800," conflicted types. It's just conflicting types because that thing returns void. I can return void"
5644800,5652560," as well in here. Who cares? What else do we have in here? Okay. So we were creating devices with the same"
5652560,5659280," encoding format as the encoder, but we don't have encoder anymore. We don't fucking have encoder anymore,"
5659280,5666880," my friends. So we have to explicitly define the format, the channels and everything else. We have to do that."
5666880,5676640," We have no choice. So let's go to here and we can just like put whatever we define there. Right. So because"
5676640,5685760," what is the format? I think it was just... Yeah, format is F32, I think. Yeah, that's the format."
5685760,5694000," The channels. We have two channels and the sample rate is 44100. Right. So the classical thing,"
5694000,5700080," because that's the thing we have in here. So here it is. That's the sample rate. It's how many samples per"
5700080,5710720," second we have in our audio. And that should be it. I think that should be it. So is it going to compile?"
5710720,5716960," Almost. We're almost there. Malloc. Okay. Uh, stdlib, stdlib, stdlib."
5716960,5730400," Device, device, device, because it's already a pointer. Because it's already a pointer. So printf,"
5730400,5738640," let's actually make it fprintf and do std error. Error, error, error, error, error, error, error, error, error, error, error, error, error, error, error, error, error, error, error, error, error, error, error, error, error, error, error, error, error, error, error, error, error, error, error, error, error, error, error, error, error, error, error, error, error, error, error, error, error, error, error, error, error."
5738640,5739760," Uh, error, error, error, error, error, error, error, error, error, error, error, error."
5739760,5745200," Okay. So here what we have to do, if we want to initialize the devices, we have to provide the callback."
5760960,5769280," Uh, you see, you see, yes. So we go into the plugin and in the plugin, uh, what do we do? What do we do?"
5769280,5777840," Um, we just store, so we have a lot of sections in here. So this is just a visualizer responsible for"
5777840,5785280," visualizing things. We have a renderer, which does ffmpeg stuff and we have fft analyzer. So I suppose we need"
5785280,5792880," to have like a microphone stuff related thing, uh, microphone. Yeah. It's going to be just like a"
5792880,5800400," pointer like that. And in initializing of the plugin, what we're going to do, uh, we're going to literally"
5800400,5810320," do a microphone and just init audio, init audio devices. And we're going to provide literally the callback."
5811200,5820960," Yeah. So, and that should just work. That should just work. And, um, the thing we have to do, like,"
5820960,5830880," it's going to greatly depend... We can already try to visualize whatever we get from the, from the"
5830880,5838400," microphone. We should be able to try to do that. Uh, but we need to appropriately massage the UI code,"
5838400,5845920," because right now UI code isn't capable of doing any of that stuff. Uh, so our UI code looks like a"
5845920,5852880," decision tree, right? It looks like a big decision tree. When you start rendering the frame, we're checking"
5852880,5859840," what state are we currently in? Are we in a preview state or are we in a rendering state? A rendering"
5859840,5864720," with FFMPAC. And there is a huge condition in here that actually makes that decision."
5864720,5873120," So let me show you how huge it is. Uh, yeah. So that's the size of the condition that makes a decision."
5873120,5880480," So this is a huge IF with two branches. You're either in preview mode, which you preview the thing,"
5880480,5886640," or you are in FFMPAC, right? And the size of this thing is not really that big. It's only 166 lines,"
5886640,5893600," right? It's not that big. It's not that big. Right. And, uh, yeah. So essentially there's two,"
5893600,5899120," uh, there's only two like states in here, but within those states, there are some substates,"
5899120,5904960," right? For example, we decided, okay, we are in a preview mode. So, and in a preview mode, do you have"
5904960,5914240," music loaded? And if you don't have music loaded, we are displaying drag and drop music here or couldn't"
5914240,5921040," load the file in case of an error, right? But if you have a load, uh, music loaded, uh, we are keep"
5921040,5927680," updating the music. Uh, we keep handling the special keys and stuff like that. Uh, and we keep visualizing."
5927680,5932560," So it's a decision tree, right? We are in a preview mode. In a preview mode, do we have a music? We don't"
5932560,5937680," have a music. Have a music, don't have a music. Uh, right. If we are not in the preview mode, we're"
5937680,5944480," in an FFMPAC rendering mode. And within that FFMPAC rendering mode, we have two situations. Is FFMPAC"
5944480,5951360," process running or not running? If in FFMPAC rendering mode, the FFMPAC process is not running,"
5951360,5956000," it's a FFMPAC failure. We just display that to the user and we wait until the user presses key."
5956640,5965840," If FFMPAC is running, we have another decision tree. Is it rendered everything or the rendering was"
5965840,5972080," canceled or not? If it was not canceled, we just keep processing and send new frames. If it was canceled,"
5972080,5978640," we try to finish it. And if we couldn't finish it, we set FFMPAC process to null, which effectively jumps to"
5978640,5985280," showing FFMPAC failure. Right, right. So there is a decision tree which decides what is shown in there."
5985280,5990880," So it may look like a big thing, but it's actually rather easy to navigate. I even put some sort of"
5990880,5996400," a comments in here that describe what current state is. Right, so for example, we're in a preview mode."
5996400,6001360," Okay, I don't care about the preview mode. I'm interested in a rendering mode. I jump to the corresponding"
6001360,6006800," curly brace. Any text editor, any modern text editor has a functionality of just jumping to the"
6006800,6012480," corresponding curly brace. I just skip that. Okay, we are in a rendering mode. Within the rendering mode,"
6012480,6018720," okay, here is the failed FFMPAC state. I don't care about that state. I skip that. Okay, FFMPAC process"
6018720,6024320," going and I instantly found the place that I'm interested in, sort of like with binary search."
6024320,6030480," Sort of like with the binary search. So I have this big decision tree and I know different states of"
6030480,6035200," that decision tree. And with just a very basic functionality of the text editor, I can"
6035920,6043760," quickly find that state somewhere here. You could say that you could probably compress this code"
6043760,6049840," by factoring out these branches of if conditions to separate functions. And that is true. That would"
6049840,6055120," compress this code. But would it make it more readable? That's a very interesting question."
6055120,6061120," Because now you can read this thing top-down quite easily and you can skip top-down with like corresponding"
6061120,6066640," curve braces very quickly. But if you factor out all these things to separate functions, now you have to"
6066640,6072400," jump between the call and the definition all the time to make sense of this entire thing. Here you have"
6072400,6080080," the entire structure in front of you. This approach is okay for very small state machine, right? It's rather"
6080080,6085840," small state machine. It's only one hand in successive lines of code. When it gets bigger, I'll try to think"
6087040,6094640," making it smaller and more compact and like stuff like that. But until it's like that, it's kind of"
6094640,6106800," fine. It's kind of fine. Right. So yeah. We'll see how it goes. We'll see how it goes. Maybe in the future"
6106800,6110800," we're going to have so many different states that we're going to introduce some sort of like abstraction of a"
6110800,6121040," page. Right. Just like I think something like that exists in Android, I think. Right. It's a balance"
6121040,6127280," between readability and ease of change. Yeah, exactly. Right. While it's small, I think it's acceptable."
6127280,6134080," When it becomes bigger, we can think about how to make it better. So, and what do we need to do?"
6134880,6141120," Essentially, we are in a preview mode. If we are in a preview mode, if we are in a preview mode,"
6141120,6150080," and music is not supplied, music is not supplied, we are specifically waiting for somebody to drag"
6150080,6156960," and drop the music. And you know what's interesting? I think the drag and drop handling has to happen"
6156960,6166560," precisely in a place where we expect the thing to drag and drop, I think. Right. So essentially, yeah."
6166560,6175360," If... Yeah, we can literally do it here. I don't know why I didn't do it in here. That makes a lot of sense"
6176000,6187360," to actually put this entire stuff in here. So it's going to be 8 space. Boom. There we go. So we are"
6187360,6193840," waiting for the user to do drag and drop. In that specific state, we can also check, as was suggested in"
6193840,6205120," chat, is key pressed. So if you press key M, we can switch to the... What is it called?"
6205120,6211120," The recording mode. The recording mode."
6211120,6217360," In the recording mode, we need to start the device. We need to start the device. So we have a separate"
6217360,6228000," module for a mini audio. So we need the devices. Start the device and we're going to accept the void"
6228000,6244080," pointer of the device. So separate and let's see. Let's see. So in in device in here, so the device has to be"
6245600,6251360," the pointer to my device. My device. My device. I really like that. I'm sorry."
6251360,6258560," I'm so freaking sorry. Anyway, so we have to do this thing. We're starting the device."
6258560,6267520," We don't even have to take a pointer. And that should start actually like doing the thing. It should start"
6267520,6274880," doing the thing and calling the data callback and whatnot. So that means"
6275760,6285120," that in plug.c. What we do, we take p and we take a microphone and we start in the device. And we need"
6285120,6291280," to somehow indicate that we are in a different state. We need to somehow indicate that we're in a different"
6291280,6303840," state. So maybe in the plugin we're going to have recording. True. But I'm not sure if this thing is, this name is a good"
6303840,6313680," good for for that specifically. Right. So boolean recording. So initial is going to be false. But then"
6316960,6327440," where is the rendering. So if you are not in the rendering, we're checking for music loaded. Right."
6327440,6339200," We're checking for music loaded. Otherwise, if p recording. Right. So this is recording. So we're going to first check for the recording."
6341600,6347200," This is what we have to do. This is what we have to do. We don't have to update the music. We don't"
6347200,6352000," have to handle space. We don't have to handle Q. We don't have to handle F. But one of the things we have"
6352000,6360240," to do, we have to handle FFT analyzer and rendering. And believe it or not, I think that is literally it."
6362000,6369280," Yes, because the the callback that we're calling there will already automatically supply data for"
6369280,6372240," the FFT analyzer. So the only thing we have to do, we have to just"
6372240,6381680," just render it. Holy fucking shit. So that's that's it. Well, I mean, of course, it will require a little"
6381680,6387280," bit of a polish and, you know, you know, handling errors properly and logging them properly. Like we need"
6387280,6394400," to use a Rayleap login and stuff like that. But ultimately, this is it. Right. We also need to implement"
6394400,6401360," like actual recording and collecting. So yeah, that's that's really interesting. Okay, so let's try to compile"
6401360,6407120," this entire thing. So let's go to the completion. So in unit audio devices, we need to include"
6407920,6417280," the separate translation for the audio. Right. So what else do we have in here? Start the device,"
6417280,6428960," conflicting types. Why are you telling me? Oh, yeah, because of this. Okay, so can I just accept void in"
6428960,6437360," here? And yeah, I think I can pass void to any point. So the void star is a magical pointer. You can"
6437360,6442720," assign void start to any type of pointer and vice versa. Right. So it's sort of like a generic pointer."
6442720,6451680," So that should work, I think. So result is my result. My result. What else do we have? So it has"
6451680,6458400," to be just the device. So we have to uninitialize it and return -3. Yeah, so I suppose this thing should"
6458400,6466880," return a boolean and we should return false in this specific case and true in this case. And somewhere in the plug,"
6467680,6473760," start the device. If you couldn't start the device, you have to do something. But I don't want to do it"
6473760,6480320," right now. I don't want to do it right now. And there is no boolean, of course, of course. So let's just"
6480320,6495680," include std-bool.h. All right, so there's a conflict in here. So this has to be boolean. Are you ready?"
6495680,6504640," Okay. Shut. I'm fucking scared, mate. I'm fucking scared because that's it. So that should be the"
6504640,6511120," integration with the audio, with the microphone. And then I don't know if it's going to work or not."
6511120,6517040," Right. So because there's nothing else left to do. Right. So everything seems to be compiling."
6518480,6523600," Yeah. Okay. Let's go ahead and just like try to call this stuff."
6523600,6529840," I'm a bit scared. A little bit nervous. Unusualize it."
6531280,6535840," Okay. So if I press M, we should go into the mode where we receive all that."
6544640,6553760," Yo. There is a low noise somewhere in the background for whatever fucking reason."
6553760,6561840," Do you guys know what it is? Maybe it's just a background noise. Maybe it's like a"
6561840,6568160," fan. Yeah, it's probably a fan. We cannot hear it. Maybe table vibration or something. Yeah."
6570160,6581680," That is so fucking cool. Yo."
6581680,6610880," I'm just trying not to be too loud because it's a midnight."
6611680,6616320," That's so fucking cool. Holy shit."
6616320,6625120," And we managed to do that within two hours, surprisingly. I didn't expect that."
6625120,6628480," So yeah, that's so cool."
6628480,6638240," I guess I'm going to do the recording and rendering integration already off screen because it's basically"
6638240,6644240," just wiring up all of these things. It's basically just wiring up all of these things to ffmpeg and stuff"
6644240,6652400," like that. It's just like not that interesting. But yeah, we did it. We actually did the chat. That's so cool."
6653360,6659440," So yeah. All right. Thanks everyone who's watching right now. I really appreciate that. Have a good one."
6659440,6667040," And I see you all on the next recreation programming session with Azuzin. Love you all."
