start,end,text
0,13920," looks like we're live hello everyone and welcome to yet another zozin session how about that how"
13920,20320," about that how about that how about i'm sorry uh welcome so let's make a little bit of an"
20320,28640," announcement and officially start the stream so uh red circle uh live on twitch and what are we"
28640,36000," doing today on twitch is rather interesting today we're implementing in line function for port that's"
36000,44640," right we are in fact implementing in line functions for both and there we go uh the stream has officially"
44640,54480," been started hello hello everyone welcome welcome welcome uh hello uh i good duke rubio d my var hello"
54480,61520," hello welcome welcome welcome so um support is a programming language that i've been developing for"
61520,65680," like a several months already i think it's like four months uh you can find the source code in the"
65680,71280," description um let me actually put a note in here so yeah here's the source code and uh if you're"
71280,77040," watching live you can find the source code in here i'm gonna copy paste it in the chat hello arrows lab"
77040,86800," sobin 235 x2 door lazy 000 8 uh welcome welcome welcome so um so the format is going to be slightly"
86800,92560," different uh this time i disabled the alerts because what i found is that they are extremely distracting"
92560,98880," while i'm trying to basically deliver my trail of thoughts all right so while i'm just explaining"
98880,103680," something an alert can come in in the middle of me explaining things and it kind of interrupts"
103680,108000," everything and it's difficult for me to recover the context so from now on we're going to not for you"
108000,115600," from now on for today we're going to try to stream without any alerts but i do have the log of major"
115600,121920," events like subscriptions or subscriptions beats and stuff like that like in front of me here so i'm going"
121920,127360," to be explaining things and as i'm done i'm going to be periodically looking at the um at the events and"
127360,133600," acknowledging people uh sending beats maybe with questions by the way uh also subscriptions and"
133600,139840," re-subscriptions um so yeah this is going to be the new format um hopefully it's okay we'll see how it"
139840,148160," goes we'll see how it goes uh so uh let me take a look let me take a look let me go uh to my source code"
148160,154480," of ports i did a little bit of a development off screen because that's what i do from time to time uh let me"
154480,165920," fetch the uh the latest stuff so status master okay cool um and uh let me merge origin a master so"
165920,172720," there's a lot of deletions in here and this is because i finally made an executive decision which is"
172720,181840," very very hard and removed the simulation for it right because uh it was never useful i never used it"
181840,188400," and uh it only added a lot of complication to the development it's like a whole like new uh run time"
188400,194720," that i had to support that i rarely use and yeah i decided to just sneak it and it simplified a lot of"
194720,199760," things uh especially simplified the testing because now i don't have to worry about simulation mode being"
199760,207280," slow in both ports.py and port.porth uh but i'm thinking i'm gonna bring the simulation mod back in the"
207280,212880," future in a slightly different form uh we'll see how it go it's just like i need a little bit more"
212880,220400," of development of ports to actually see what needs to be done there um so all right what's up with the"
220400,225520," inline procedures what's up with the inline procedure i presume that a lot of people already know what is in"
225520,234000," inline procedure from languages like c or whatnot right in c you have inline functions right uh inline"
234000,239040," function uh let's take a look in wikipedia at wikipedia so in c and c++ programming language in"
239040,244400," the line function is one qualified with a keyword inline i don't know what syntax we're going to"
244400,250480," use for inline functions maybe also a key keyword inline uh this serves two purposes it serves as a"
250480,255520," compiler directive that suggests that the compiler substitute the body of the function inline by"
255520,261840," performing an inline expansion so it's gonna in our case i think it's gonna act slightly like macros"
261840,267520," that we removed right so and i already said that i want to bring back macros in slightly different form"
267520,273280," so there you go so the the this is basically one of the use for the use case for the macros that i had"
273280,279120," that i didn't really implement in the language after removing the macros um right so i'm going to"
279120,287440," actually uh copy paste that in the chat for anyone who's interested uh so uh inline functions so what"
287440,293840," inline functions do right they when you call an inline function um instead of calling it the compiler"
293840,301680," literally substitutes its body with um you know with the substitutes the call with the body of the function"
301680,308960," uh right and why do we need something like that why do we even need something like that uh in the"
308960,315120," standard libraries specifically we have a lot of small functions very very small functions that"
315120,321440," don't even do anything uh right they call to another function or to intrinsic and for example"
321440,328720," these functions they are just wrappers to implement like typing uh right so here we have a function that"
328720,334480," reads a value for the memory but it returns that value as a pointer instead of an integer as a"
334480,344240," usual intrinsic so it adds like another call um right and uh it since our compiler is not optimizing compiler"
344240,349040," right so it is not optimizing compiler none of that is analyzed properly and none of that is inlined"
349040,357680," automatically uh so and instead of implementing uh something very complicated i decided why not just let the"
357680,364160," the programmer for now mark certain procedures for inlining and then uh the compiler would just inline them"
364160,372320," so and i would expect that the runtime of fourth can greatly benefit from inlining a lot of these"
372320,381120," functions uh there's a lot of small little things that would be useful to to inline uh so though we"
381120,386800," probably gonna have a slightly different semantic for the inline procedures right because not everything"
386800,394480," is easily in lineable uh for instance things that have uh local memories they're not in lineable right"
394480,400640," they're not in lineable because local memory allocates um you know a little bit of memory on the"
400640,407520," return stack and then deallocates it automatically we can't really inline that maybe when you put an inline a"
407520,415280," keyword in front of proc it will uh basically also at compile time check uh whether the function contains"
415280,421120," a memory and if it contains a memory it just won't allow you to compile it saying that uh local memories"
421120,428160," are not supported in inline functions right something like that that that's basically the idea so uh yeah"
428160,433280," let's go ahead and implement it let's go ahead and permit uh azura akimori thank you so much for three"
433280,438880," months of twitch press subscription thank you thank you thank you came for ports stayed for zozin three"
438880,447120," months spoke yeah thank you thank you so much for for staying um thank you thank you thank you uh all"
447120,452400," righty so let's go ahead and implement it so how are we going to be implementing this entire stuff i suppose"
452400,458800," uh we're going to first implement that in pores.py right and then we're going to compile"
458800,465920," port that fourth with um like majority of the small functions in line uh and then see how the performance"
465920,471760," of uh port that first will improve and whether improve like at all and then we're going to implement"
471760,478400," the same feature for port dot fourth right so that's going to be the plan sounds good sounds good"
478400,491120," uh let's uh go ahead let's go ahead um to do to hello hello everyone who just joined welcome welcome welcome"
491120,503840," uh so just a second uh all right so i'm probably gonna just go ahead and create a separate uh separate"
503840,512400," branch for everything in here uh the branch is going to be in line proc uh there we go um so you know"
512400,519360," what um since i'm going to be doing python right now i think our stream may greatly benefit from having"
519360,528320," word python in the title all right so let me quickly add a word python uh into the title right so and we'll see"
529440,537520," okay so cool uh we need to introduce a new keyword in terms of the syntax as i already said i suppose"
537520,544560," the way it's gonna go is that you're gonna just prefix um the procedure with word in line sounds sounds"
544560,554640," pretty reasonable right uh so let me first maybe update the highlighting of emacs right uh because right"
554640,560720," now we don't have that feature so the extension for emacs doesn't have anything in there right so if you"
560720,566160," put word in line it is not highlighted whatsoever which is well i mean kind of sucks uh so what we're"
566160,571840," gonna do in here is in here i essentially gonna just like print something uh and do something like this"
571840,577440," right so this is gonna be our example that we're gonna work with uh for now i don't know why emacs puts"
577440,585440," this thing the second cursor for whatever reason uh so the extensions are located in here right so here is"
585440,592160," an extension and here is the list of the keywords right so we're gonna go ahead and add another keyword"
592160,599520," uh in line so after that i think i'm gonna just copy paste the updated extension uh updated extension into my"
599520,607920," emacs local folder uh there we go and i probably need to restart emacs let me let me see uh okay go"
607920,616080," all right so then i'm gonna open this thing and there we go we have inline keyword single file for an"
616080,621840," extension super easy to update super easy to use can your visual studio code do that"
623680,629920," can you just easily make an extension like a language support in visual studio like this with a single"
629920,638240," file and like super easy just could paste it in it works can you do that uh to be fair i never done"
638240,644320," uh any visual studio code extensions but from what i heard they are kind of unreasonably complicated"
644320,648320," they're probably not hard to do but i heard that they're unreasonably complicated is that true"
653360,658560," um because you need to create some sort of special package some sort of like"
658560,660880," descriptions and stuff like that"
660880,668400," they're awful i hated writing one for my capstone for union okay"
668400,671200," so maybe i should actually try it myself to understand what's wrong with them"
671200,683040," all right so uh let's go uh so i think i'm gonna actually go ahead and just"
683040,690960," just commit whatever i've done uh right so to be fair wait a second emacs is not enough we also need"
690960,696960," to update vim right so here is extension for vim uh and in vim we also have a list of keywords"
696960,702880," and let me just add the inline keyword in here so yeah we support both uh emacs and vim"
705040,720320," extensions uh extension extension extension extension okay i'm gonna push that right into the repo"
720320,732080," now if i try to compile uh the source code it will tell us something interesting it will tell tell us that"
732080,739120," a known word inline because of course we just made up that syntax our compiler doesn't know this syntax"
739120,745520," and as i already said multiple times this is how you develop a compiler you make up a non-existing"
745520,753360," programming language with non-existing features and then you modify your compiler until your program uh with"
753360,759280," fictional uh you know features and fiction language work this is how we develop the compiler so let's go ahead and do that"
760080,766720," so uh first thing we need to do we need to add uh a new keyword so we have an admiration with different"
766720,772800," keywords so here are all of the keywords let's add another one so uh this one is going to be basically in"
772800,779200," line right so auto so now i'm going to try to compile this thing with a new keyword and it says that we need"
779200,787600," to update a bunch of things in here uh all right so let me go ahead and add inline so this is inline and this"
787600,798480," is inline uh 15 16 there we go next one so the next assertion fails in here so an assertion is related to"
798480,805920," uh actually parsing right so i think it is parsing yeah so it is parsing technically it is compilation to"
805920,811280," intermediate representation but for whatever reason i'm still calling it parsing in python version"
811280,819520," though import the fourth version i'm calling it uh actually compiling uh compile um file into ops yeah"
819520,824560," so that's how this function is called actually compile file into ops it basically parses everything and"
824560,830480," automatically translates to intermediate representation uh so it's more of a compilation rather than parsing but"
830480,840720," anyway so here we basically switch upon different keywords and uh you know doing different things"
840720,846960," depending on what they're supposed to be a very informative description i know i know it's very"
846960,854480," informative but that's that's basically what it does uh okay l if and where is the other leaf um"
855360,862880," i think it has to be somewhere here uh value so it's a token value proc so then i can just check something"
862880,873120," like this token uh value uh equal key word uh keyword in line right and in here i can do something like"
873120,880640," this is going to be false not implemented right this entire thing is not implemented yet uh all right so i"
880640,885680," forgot to increment this entire thing right so this is going to be that and as you can see we're actually"
885680,896080," failing in here so what's funny is that the inline doesn't really do anything special except it declares"
896080,904000," that a particular procedure is an inline procedure now right so there's going to be a lot of um code"
904000,911760," re-usage between this branch and the branch related to uh the proc keyword so here is the proc keyword"
911760,915920," so what i'm thinking is that maybe everything related to compiling the proc keyword should be"
915920,921440," uh put into a separate like um a separate procedure that can be called by both of the branches"
921440,929760," though uh we need to be able to mark uh a procedure as inline capacity right so we need to introduce a new"
929760,934560," field in here inline uh and it's going to be essentially boolean and what it indicates it"
934560,940480," indicates that uh you know this whether this entire thing is in lineable or not in lineable"
940480,949520," all righty all righty all righty all righty all righty all righty keyword proc uh so i'm thinking to just"
949520,959200," take the entire thing here uh so uh-huh so this is the current procedure this is blah blah blah and i'm"
959200,964880," removing all of this and here i can probably want to introduce some sort of a function right um"
964880,978320," you know what what i can do essentially i can go up there keyword so this thing is in keyword proc"
978320,989360," or inline though it's kind of man so i don't think it's gonna work so let's actually go back to the"
989360,996240," idea of having like a separate uh separate procedure i think it was a good idea i think it was in fact"
996240,1001920," a very good idea so salary bot has subscribed um resubscribed with tier one subscription for three"
1001920,1005760," months thank you thank you thank you i really appreciate your subscription salary bot and welcome"
1005760,1014800," to epic port club so watched a talk about llvms in liner uh last night so this is pretty uh pork stream"
1014800,1021680," to follow up with today probably but as far as i know lvm in liner like lvm generally in lines things"
1021680,1027840," automatically right so there's probably some sort of a criteria that llvm uses to inline a particular"
1027840,1037840," procedure since our compiler is way simpler um right and it has its own simple backend we rely on the uh on"
1037840,1043280," the developer to tell us what procedures to inline so it's kind of a different thing it's it's more simple"
1043280,1049760," variant of whatever is going on in lvm i would presume uh first of all i never used lvm and i don't"
1049760,1064800," really know how it works so yeah thank you thank you so much for the subscription"
1064800,1076800," i'm new in php i made my own crud that is very poke right that is very very poke uh yeah they do a whole"
1076800,1083440," bottom up traversal of the call stack and it's uh pretty involved oh okay i see so the criteria of"
1083440,1089120," whether the procedure is in libel or not is really complicated i can see that actually um right"
1089120,1097920," what does pog mean it's uh a twitch meme you can google it up google up twitch pog"
1100560,1104320," and there's probably will be some sort of a page that explains that that mean for you"
1104320,1109200," explaining memes by the way explaining memes is like explaining jokes"
1109200,1116240," okay so let's go"
1123440,1129520," so as already said i wanted to uh have uh some sort of procedure that performs this sort of like"
1129520,1140880," parsing and whatnot um let me let me think though um when you encounter proc"
1140880,1150800," it's already taken uh all right so i see uh how should i call such procedure how should i call such"
1150800,1156480," procedure that's a very interesting question um something like um"
1156480,1165760," let's call it uh introduce introduce proc right at least for now because i still don't know how to"
1165760,1173280," call it uh right so introduce proc and then uh the entire thing is going to be moved in here"
1174080,1180640," right so we are introducing the proc uh introduce a proc and i suppose this thing is going to accept"
1180640,1187120," the current parsing context right the current compilation uh context rather uh and now uh the"
1187120,1194880," context is going to be something like this so this is ctx uh and uh ctx i suppose uh it's a parse context"
1194880,1203760," okay so this is a parse context and let's uh take the entire thing and uh slowly go down there and one"
1203760,1210560," two three four okay so let's see if the entire thing still type checks right we're using my pi to"
1210560,1217440," properly type type check everything right we use using statically type python um all right so it's taking"
1217440,1222720," some time it's analyzing the whole source code the source code is pretty big the criteria of type"
1222720,1231840," checking is very involved so yeah uh also it takes uh the current token i suppose right uh which is"
1231840,1238800," rather interesting so i suppose uh we can accept this as a token right sure i don't mind that please"
1238800,1245360," tell me the other places where we could have any problems uh and it also accepts our tokens all right"
1245360,1252000," that makes sense uh and our tokens if i remember correctly is just a list of tokens right not the"
1252000,1256480," deck of tokens i know that it's incorrect and i should use something like deck but it is what it is"
1256480,1265840," uh okay missing um oh okay that's cool so as you can see here uh now we need to provide whether this thing"
1265840,1270560," is in lineable or not for now i'm going to say that it's not in lineable uh so i'm going to just put false"
1270560,1277360," in here uh might as well maybe format it a little bit like this right so we can clearly see what goes"
1277360,1285440," where so this is all the information uh about the procedure our compiler has right it knows its address"
1285440,1291360," it knows its location in the source code log is the location in source code file name row and column"
1291360,1297600," this is what local memories it has because inside of the procedure you can allocate local memories and the"
1297600,1303840," local memory capacity then the contract contract is very interesting thing by the way uh the contract"
1303840,1311360," is essentially uh description of what types the procedure accepts so this procedure accepts pointer"
1311360,1318080," and an integer and there's also special operator that separates the outputs after this operator you have"
1318080,1323680," outputs the contract is basically that right so our compiler keeps track of uh these things as well"
1324560,1330400," um okay so this is false let's take a look at other compilation errors potential compilation errors"
1330400,1341120," okay so here we have to provide token and r token okay uh token and r tokens cool so this entire thing"
1341120,1350560," working and we successfully extracted a piece of code uh out of the um out of the function right so we factored"
1350560,1356320," out of the piece of code into a separate procedure which is nice uh so now i can try to do uh port.py and"
1356320,1362560," i'm going to try to compile for uh full.porth right so it still says that it's not implemented but this is"
1362560,1368240," because we have not implemented it so and to check that i didn't break anything i'm going to remove in line"
1368240,1373120," and i'm going to try to compile it like this and everything's still working and uh everything still"
1373120,1379120," produces 69 so this is precisely what i expected in here which is super nice all right so we have"
1379120,1385280," everything we need in here i might as well now customize the uh this function with inline right"
1385280,1390960," so i can introduce inline and by default it's going to be false and in the place where we say inline we're"
1390960,1396080," going to say inline inline so now whoever calls this function can decide whether the function is inlineable"
1396080,1403680," or not right so we introduce proc so and in inline in inline uh what we're going to do we're going to"
1403680,1408560," pretty much call the same function but we're going to say that inline is going to be equal to true"
1408560,1415840," right but uh the actual token um the actual token of the procedure that we need to put in here comes"
1415840,1424480," after inline so what we'll have to do i suppose we'll have to pop the token like it's hot and then"
1424480,1431920," check then verify that that token is uh in fact a procedure right so i suppose it's going to be rather"
1431920,1437680," interesting because what we need to do we need to check uh if our tokens is empty or not right because"
1437680,1443520," if it's empty we cannot do that right if our token equals zero this is straight up an error right expect"
1443520,1450640," we should say something like expected proc keyword after inline keyword but got nothing uh right so"
1450640,1454720," let's actually go ahead and do that so as far as i know we do that with the compiler compiler error"
1454720,1462480," right so this is the compiler error let me go back and this is going to be something like this compiler"
1462480,1467600," error so in here i don't even know where to say that i think i'm going to be just using the"
1467600,1480560," token location right so i'm going to say uh expected uh proc proc keyword uh after inline but got nothing"
1480560,1488640," right and then we're going to exit with uh non-zero exit code and essentially this situation corresponds to"
1488640,1495120," just having only a single inline keyword in the whole data code base not database but code base right"
1495600,1502160," so that's that's what it corresponds to and uh let's try to run this into i think and uh it complains"
1502160,1508560," about our token not defined because it's called our token okay expected proc keyword after inline but got"
1508560,1514640," nothing so we caught that error we caught that error that's actually pretty poke okay after that uh we"
1514640,1518720," know for sure that there are some tokens in the stream so we extract the tokens and now we need to"
1518720,1524800," check what's that token right so as far as i know in the token we have type uh so let me see how we use"
1524800,1532480," that so there's a token type uh and token type has to be equal to i think it's just type right um"
1532480,1542480," i forgot what is the token type let me find the definition of token uh so token type okay token type"
1543200,1554480," keyword all right if token is not keyword or token uh value is not equal keyword"
1554480,1565440," proc we're gonna say that expected uh keyword proc uh after keyword inline but got something else right"
1565440,1570960," so to be fair because of that we don't really need to check the type because uh the type of this thing is"
1570960,1576480," sort of included in the value itself right it doesn't really matter uh so what we're gonna say in here"
1576480,1584640," compiler error so this is a token location we're gonna use the new token location uh expected key uh word"
1584640,1595280," uh proc after uh inline after inline but got uh and now we need to describe the token type i wonder do we"
1595280,1602320," have anything oh yeah we have a function called human that's actually very cool uh right so it accepts the"
1602320,1611360," token type and then it gives you a human readable um a human readable description of the token but to be"
1611360,1617200," fair in this particular case do we really care do we really care about that i'm not sure maybe we can"
1617200,1624160," just take the token text and just slap it in there uh so let me try so this is going to be talking text"
1624160,1630960," and then we're going to exit with just one right and let me take a look at this entire thing and uh yeah"
1630960,1639840," so we need to update the situation so now we're going to put some number in here right so and uh compile"
1639840,1646400," compile error so it's a compiler error all right so expected keyword proc after inline but got"
1646400,1658720," very funny okay uh f f strings by the way f strings so uh but got 69 so this is precisely what we have in"
1658720,1669520," here cool so now uh if i do something like this it will say that um that is very interesting oh okay"
1669520,1675680," it's it's working as expected believe it or not it in fact works as expected this is beautiful uh"
1675680,1684080," right so now i can bring back uh the thing that i had in here and it should compile this thing regardless"
1684080,1691120," of whether it has in line or doesn't have in line right so now we have a city we basically handle this"
1691120,1699120," situation uh right so it does not do anything when the procedure is marked as inlined but it already knows"
1699200,1705360," whether the procedure is in line or not uh roman codes uh recept with twitch prime subscription for"
1705360,1709600," nine months thank you so much thank you so much for nine months of twitter subscription really appreciate"
1709600,1718080," it uh really really appreciate it um i'm just realizing that without the alerts"
1718080,1723920," it's kind of difficult to determine whether i'm actually streaming or not so somebody's going to be"
1723920,1728560," watching that on youtube and thinking what if he actually recorded all of that offline and all of"
1728560,1738400," these subscriptions are just in his head what if what if they are i mean yeah so just making up this"
1738400,1750880," sure uh cheers by the way cheers for my progressing schizophrenic okay uh let's maybe do um you know"
1750880,1759120," committee committee and maybe even a pushy pushy how about that um to do two all right so not that much"
1759120,1769760," um so forth dot pi uh handle uh maybe um let's actually say something like introduce uh in line"
1769760,1777840," keyword right so introducing like keyword and i'm gonna push that right into the repo right into the repo mate"
1782960,1789360," almost christmas there santa on his way monka w santa cannot go here because this is not um"
1789360,1800000," this is not a catholic word i'm in russia and in russia the orthodox church actually rules the entire"
1800000,1809360," russia so the christmas in russia is january january 9th right seventh not ninth seventh uh right"
1810160,1819360," so eastern earth oh yeah eastern orthodox exactly uh azure akumori thank you so much for gifting uh"
1819360,1822960," gifting two tier one subs thank you thank you thank you really appreciate it"
1822960,1831040," yeah we have a different christmas in uh in easter date yeah yeah so it's kind of interesting and what's"
1831040,1839680," funny is that even though we have a different um we have a different christmas uh the christmas in"
1839680,1847840," our world doesn't play as huge of a role as in catholic world uh right so the christmas is there we"
1847840,1854560," still celebrate it but it's primarily celebrated by religious people primarily and russia is not as"
1854560,1865920," religious as europe or us or i don't know so the most important uh holiday in russia i presume is new year"
1865920,1871680," new year is celebrated way like so it's considered way more important holiday than christmas"
1873440,1880400," um all right so uh let's continue thank you thank you for all the subs really appreciate it"
1880400,1887840," so now we know that a particular procedure is in lineable the next thing i want to be able to do i"
1887840,1893680," want to kind of enforce uh a certain semantic for the in lineable procedures first of all"
1894240,1902080," uh right i don't want to have any local memories in in lineable procedures right so uh if i try to"
1902080,1908320," allocate some uh memory in here so this is the size of integer uh the entire program should not compile"
1908320,1914560," right it should complain no uh local memories in inline procedures so right now if i try to do something"
1914560,1920320," like this it um okay size of int i might as well actually just push something like 69 it's a constant"
1920320,1924400," anyway it's just defined in the standard library i don't want to include the standard library because"
1924400,1929440," it includes too much stuff uh that may obscure the the data right so i just don't want to include"
1929440,1939600," anything um so there we go uh let's go ahead and try to do that uh so uh let me see where we have the"
1939600,1946400," memory so keyword uh memory do we have a keyword memory so this is where we handle the keyword memory"
1946960,1955840," uh and mm-hmm that's very cool so that should be relatively easy because we do the following thing"
1955840,1963040," uh right if the if we are in the current procedure right if we are currently in procedure rather uh we"
1963040,1970240," interpret in memory as uh as local memory so and if we're not currently inside the procedure we interpret"
1970240,1975920," it as a global memory uh so we have to do somewhere here but i'm gonna address that later of course"
1975920,1984960," so here what i can do if we are currently in a procedure right it's not none and uh the current"
1984960,1996880," procedure is in lineable this is straight up compilation errors compile error uh token location um no local"
1996880,2007840," memory in inline procedures right so and then we're gonna exit with uh non-zero exit code there we go"
2007840,2015040," so let me try to compile this thing now there we go no memory in inline procedures pretty cool so if you"
2015040,2019360," want to have a local memory just don't align it now you can do something like inline"
2021680,2030160," easy peasy lemon squeezy truly um okay so this is one thing that i don't want to have in inline procedure"
2030160,2039360," what would be another thing i think i don't want to have any control flow instructions at least right now"
2039360,2048960," right any like ifs or while loops or anything like that because they right now jump to specific addresses"
2049680,2059040," right they're jumping to specific addresses and um because of that uh if i inline that procedure i will"
2059040,2065360," have to update those addresses i'll have to update these addresses and this is like some extra work"
2065360,2070080," that i don't want to do right now and uh what i'm trying to achieve right now is not going to benefit"
2070080,2075200," from that work because what i want to do i just want to get rid of this like very simple function calls"
2075200,2084560," which brings me to a very interesting thing um what if we make ifs and loops"
2084560,2094080," actually instead of like absolute uh calls absolute jumps relative jumps yeah so right now our intermediate"
2094080,2100560," representation is built around the idea that uh conditional and unconditional uh jumps jump by"
2100560,2108000," absolute address uh which makes it difficult to relocate the code so if we change that intermediate"
2108000,2113360," representation to relative addresses it will be super easy to relocate the code and just inline that thing"
2113360,2119200," so this is like a major refactoring that probably needs to be done this is actually kind of cool yeah"
2119200,2124640," this is precisely the reason why i'm implementing this entire thing i want to stumble upon these"
2124640,2130320," problems right i want to stumble upon problems i'm pretty sure some cs student would come to me and say"
2130320,2135760," obviously you have to make jumps relative because you want to be able to inline and blah blah blah blah"
2135760,2140800," i read that in that book uh my professor told me that and so on and so forth it is very cool"
2141600,2147760," but i prefer to actually come to that conclusion by facing these actual problems while doing actual"
2147760,2153440," things because it's way cooler this way isn't it right it's not like you know that you have to do"
2153440,2157760," this way because somebody told you you know that you have to do this way because you actually"
2157760,2163280," encountered that problem in real life application and that was the solution you came up with and that's"
2163280,2167600," how we learned it and it's like way better way to learn things i think but it's just me"
2168240,2175280," so um yeah maybe maybe it's really just me because it is easy for me to learn things like by doing them"
2175280,2179920," uh rather than reading about them and maybe that's why if i really this way maybe it doesn't work for"
2179920,2195040," everyone but it's just like yeah this is just my opinion so yeah"
2195040,2205040," all my eastern orthodox friends celebrate both christmases more reasons to get drunk am i right"
2205040,2212640," more insane sometimes when i read something first i still don't learn it anyway yeah same for me"
2212640,2218320," same for me maybe our brains work in a similar way uh right when you're reading you're kind of like"
2218320,2224960," looking into somebody's else experience but when you gain that experience yourself it just solidifies"
2224960,2230720," a little bit better so and that's why i force myself to do these sort of things that for majority"
2230720,2237280," of people looks like reinventing the wheel i'm kind of intentionally reinventing the wheel to face all"
2237280,2244000," of these problems solutions for which we discovered to actually uh understand why we have the solutions and"
2244000,2252720," also potentially take my own take on that on those solutions right um sorry anyway uh so"
2253360,2258000," i want to put it to do about that i think it is very important i think it is very important"
2258000,2266400," but the question is where do i want to put it uh in line i'm going to put it somewhere here uh to do um"
2266400,2271040," so"
2271040,2279920," maybe it has to be in the intermediate representation right so let's find this thing okay i'm going to put it in"
2279920,2292480," here uh make uh conditional and unconditional jumps uh jump uh by relative address relative uh addresses"
2292480,2305600," this will make the code more real uh locatable uh relocatable which will make it easily in lineable"
2306240,2312640," right so i'm going to put it as a to do so we're going to work on that a little bit uh later we're"
2312640,2326080," going to work on that a little bit later so um now when we encounter ifs wiles uh ifs wiles and dos"
2328160,2334640," i think specifically right now i want to i i care only about ifs and dos right because"
2334640,2342320," else does not exist exist without if if star does not exist without else right if you fail on the"
2342320,2348960," first if that means you automatically cover the rest of these things um so okay i think i think that's"
2348960,2354320," good so let's actually do something like this uh right so if i try to do inline"
2356320,2361360," no memory relocation so i'm going to remove this thing and it is it does compile so we can now do"
2361360,2370400," something like uh if uh i'm going to put um zero zero equal if and then i'm going to print the entire"
2370400,2378800," thing so and that thing as well going to compile but it shouldn't um so def parse um"
2380560,2390720," program from tokens keyword if so if we encounter if it's going to be like that okay if context"
2390720,2397440," current procedure is not uh none uh flory thank you so much for the pitch pam substitution thank you"
2397440,2400960," thank you thank you your first subscription by the way and welcome to our epic fourth club"
2401680,2408960," so ctx current procedure and uh if it is in lineable um right if it is in lineable we're going to say"
2408960,2419040," something like uh compiler error token location no conditions conditions in in line procedures"
2419040,2425840," uh i'm going to exit with one down ago so i'm going to recompile this thing and it doesn't really work"
2425840,2432640," uh i wonder why invalid syntax because i have to put and in here uh no conditions in line procedures so if"
2432640,2439040," i make it like this it does work if i make it like this you have to get rid of the uh condition and only"
2439040,2450240," then it is going to work next thing uh i'm gonna do while zero equal one do uh and right so right now it"
2450240,2456080," is going to work but it shouldn't so the criteria is going to be the keyword do right because that's"
2456080,2467280," the thing that introduces that um you know that jump if context current procedure is not uh none and ctx"
2468080,2484240," current procedure in line compiler error error token location uh no loops in inline procedures procedures"
2484240,2495120," exit with one okay so no loops in line procedures if i move it like this it is working in line not working"
2496320,2503120," okay nice so we established a little bit of a semantic in here uh do we need anything else"
2503120,2510960," uh i don't see anything else so far so i think we're good to go right so essentially nothing that is"
2510960,2518960," in anything that is not in lineable is not going to compile anyway uh so we can just go ahead and take"
2518960,2524960," the sequence of instructions that we want to inline and just inline them so yeah that's what we can do i"
2524960,2527600," think that's pretty cool uh okay so"
2527600,2542240," all right so let's do something like this uh pores.py for forbid uh non in lineable uh things in inline"
2542240,2551040," procedures right and we're gonna push that right into the repo um so i think we're pretty much good to go i"
2551040,2559200," think we are so now uh when we parsed in something and we are recognizing a function call uh right so we"
2559200,2566960," need to go to token type word right token type word let's actually define it uh if we are well that was"
2566960,2574240," actually kind of a shame uh token type word so this is memory i need to find okay here it is so we are"
2574240,2580960," parsing the program and we encountering a word if that word is an intrinsic we compile it as an intrinsic"
2580960,2590880," if that worked um what is that uh oh that one is really interesting so we are not in procedure"
2590880,2596960," and talking value in current local memories oh okay so that means this is a local memory right so this is"
2596960,2600720," a local memory i'm sorry that i hit micro i hope it was not too loud um"
2600720,2611520," yeah so uh then we have okay so this is the thing that we care about look we identify that the uh value"
2611520,2617760," is a procedure right we identify that it's a procedure so what we can do in here i think i'm"
2617760,2624560," gonna just uh take a look at whether this is in line procedure or not if procedure is in line uh we'll"
2624560,2633280," need to do a different thing uh not implement it uh otherwise otherwise if it is uh in lineable procedure"
2633280,2638720," we're gonna just um not in lineable procedure we're gonna just call it right so we introduce the uh the"
2638720,2645840," call instruction and off we go so now i'm gonna go into here uh and remove the inline proc thingy"
2645840,2651200," i'm gonna run it and everything seems to be working if i introduce in line it will tell me that this thing"
2651200,2657520," is not implemented yet okay so this is the time where we need to introduce all that now so how are we"
2657520,2664400," going to be introducing all that this is a very interesting thing so uh we need to take the"
2664400,2670720," procedure i might as well by the way take something like this proc uh we need to take the procedure and"
2670720,2678800," its address the address basically indicates um its location in the sequence of operations but the question"
2678800,2684720," is where is the sequence operations okay the sequences of operations is located in array ops this is literally"
2684720,2693440," what this uh thing means right so this is that uh as far as i know what does it point to i think it points"
2693440,2700880," to the procedure preparation right uh so let me now uh do something like this i'm going to introduce"
2700880,2707520," proc ip uh and we're going to start somewhere here right we're going to start somewhere here and while"
2707520,2719440," uh proc uh while ctx ops uh proc ip is not equal or p a return right if it's not equal appear return"
2719440,2726400," uh we're going to be printing whatever we get here so ctx ops uh proc ip and then we're going to be"
2726400,2732320," incrementing proc ip uh there we go and after the loop we're going to just say that it's not implemented"
2733520,2740000," uh all right so then i'm going to recompile into i think and so it's not a return what is it cool i"
2740000,2749440," think it's op type okay so that's cool uh i forgot to increment the ip there we go so it went out of"
2749440,2759200," range which is rather interesting isn't it which is rather interesting so we've got uh preparation and then op"
2759200,2775280," return and that is it and so here is the op return and why did it print it why did it print it um"
2775280,2780560," oh because i have to do type okay thank you python very cool um"
2787200,2793280," oh now it says not implemented okay that's cool so this is very important i suppose one thing i want"
2793280,2798400," to actually print in here is the type because it's a little bit noisy so here are the instructions of"
2798400,2804480," the intermediate representation of that procedure right so the first one is push integer and then"
2804480,2810720," the intrinsic and you can even see what it corresponds to this one is push integer and this is the intrinsic"
2810720,2817120," print okay so what we need to do we need to take all of the instructions um starting like"
2817200,2824160," after prep proc and just keep inlining them until we reach uh return until we reach return so this is"
2824160,2833920," what we have to start doing all right so let's go ahead and do that uh so proc ip uh i probably want to"
2833920,2843120," assert that this thing in here that this thing is here is equal to a op return op"
2844400,2851440," uh prep proc right otherwise we have a compilation error right it's very very important um then uh we're"
2851440,2859840," probably going to do proc ip plus plus and while we don't have op type return uh what are we doing is"
2859840,2872560," just copying ctx ops append uh ctx ops uh proc ip and essentially do we want to do like a deep copy of all of"
2872560,2877680," that so this is the token i don't think we need a deep copy so we can just reuse the same things"
2877680,2882800," right and as we append the entire thing we also need to increment the the current ip i think it's also"
2882800,2888720," important and also proc ip um okay so this one is by the way plus equals"
2888720,2899520," all right that's cool i think that is it so yeah we essentially going into the procedure iterating all of"
2899520,2904960," the instructions of the procedure until we hit the return and we're literally just inlining them there"
2904960,2912720," that's it so uh let me go ahead and see if we do everything uh successfully everything successful so"
2912720,2921520," let's return this thing and it worked all right but you cannot see the difference rather right so you can't"
2921520,2927760," see the difference so in line not in line and it's supposed to be like that the inlining should should"
2927760,2934400," not uh you know change the behavior but it should change the like how the code is compiled so let's"
2934400,2940000," take a look at the generated code right so let's take a look at the generated code so assembly there we go"
2940000,2949520," here is assembly so here we start uh here we start and at some point we perform a call to address one and"
2949520,2955120," address one this is where the procedure starts right so this is where procedure starts and then goes the"
2955120,2960320," procedure and one of the important things in here is that before the call you have the preparation for"
2960320,2966240," the call inside of the function call you have the preparation of the stack then you have return"
2966240,2971200," preparation of the stack again and then after the call you have another preparation so there's a lot of"
2971200,2976800," like cost associated with the function call right so if you just don't call this function you don't need"
2976800,2982000," to do that you don't need to do that you don't need to do that so you can actually remove a lot of"
2982000,2986880," instructions if you don't perform the uh function call and that's one of the reasons why i wanted to"
2986880,2994560," introduce inlining uh right so let's actually back uh this thing so this is basically non-inlined version"
2994560,3001120," and i'm gonna try to go ahead and now inline it and we'll see how the uh generated assembly have changed"
3001120,3011920," has changed so this is now a generated assembly did it even change i think i think it did it uh i think it"
3011920,3019200," did here's the thing um so we can take a look at what's going on in here uh we can take a look so it's"
3019200,3025760," going to be full uh back awesome so the differences are not really obvious uh the only thing you can"
3025760,3031040," notice that in an aligned version you have more instructions so there's seven instructions instead"
3031040,3037360," of six uh rather i think it's this is eight and this is uh seven because we start counting from zero but"
3037360,3044640," doesn't matter so why nothing has changed nothing has changed almost nothing has changed because we don't"
3044640,3052000," remove in lineable procedures from the code yet right they're not removed they just sit sitting there"
3052000,3059840," but they're never called they're just inlined uh right so let me try to do a diff uh between uh like"
3059840,3066400," full back awesome and full awesome and let's see what's the difference between them here's the difference"
3066400,3072880," right so this is what we had we had a function call preparation for the call then the call itself and then"
3073600,3079200," you know some stuff after the call instead of that now we have the body of the function instead"
3079200,3084000," that implementation of the function is still hanging there it's just never called but it's used as a"
3084000,3090480," template to inline things so whether we're going to be removing those things or not is actually"
3090480,3097360," a good question i think the answer is yes we should remove inline procedures because they're not"
3097360,3102560," really useful and they take up the space but i don't think we're going to be doing that right now"
3102560,3106080," right i don't think we're going to be doing that right now because we can implement that later what"
3106080,3112000," i'm trying to achieve right now is just like get rid of the unnecessary function calls right at the cost"
3112000,3118720," of maybe consuming a little bit more memory but i think that's fine um so yeah so that's basically what"
3118720,3125120," changed right instead of like calling this thing directly we're just inline it right that makes sense um"
3127120,3132960," um"
3132960,3134240," all right"
3134240,3145120," isn't removing the code a stripping step you can use whatever the word you want for describing that step"
3145120,3155120," right word is just a label that you put on the reality right so you have a reality whatever that word means by the"
3155120,3160960," way because the word reality itself is the label that we put on reality let's put that away for for"
3160960,3165760," a second because it's a completely different discussion and you may put any words on the reality"
3165760,3173760," and it won't change the reality sure you can call that process stripping cool you can use whatever label"
3173760,3182000," you want doesn't really change anything uh so call it jim exactly let's call that process jim i think i like it better"
3185200,3192320," um so yeah but i mean more like stripping phase more like stripping phase where you can remove other"
3192320,3198720," things oh okay so essentially what you're suggesting is that everything that is related to removing code"
3198720,3206320," should be put in a separate phase uh maybe it's like it's a matter of organ of organization the process"
3206320,3213200," right so um sure maybe we're gonna have a separate phase for that maybe not we'll see it depends on on the goal"
3213200,3220960," uh but it's possible that we may have a separate phase that is dedicated specifically for removing things"
3221840,3230720," why not do you have any advice for getting used to working in bigger projects"
3230720,3239840," um so i have done a bunch of coding problems but i'm not used to big files many files"
3241200,3250000," uh i don't really know how to give advice for that um i would suggest you to just do that uh for like"
3250000,3257680," long enough until you get used to it right so it's like because this is how i learned that uh i learned"
3257680,3265360," how to swim by sitting in the water long enough until i learned to swim so that's what i did uh but the"
3265360,3272880," question is where can you find the water right so you can find the water on the github right so find"
3272880,3282000," a big open source project that you possibly use every day right and try to uh see how what you can"
3282000,3287920," improve there what what bugs you can fix uh what small features you can implement and try to do that"
3287920,3293440," and try to contribute to that open source project because that way you will get an experience in working"
3293440,3298240," with big projects this is basically the water in which you will have to sit long enough until you"
3298240,3305120," learn how to swim right so this is one thing uh so what advices can i give you in terms of"
3305120,3312560," techniques of swimming right so um there are different kinds of projects they all use different"
3312560,3319120," stacks and they all use different build systems and they all you know fine-tuned for different"
3319120,3326160," development environments and stuff like that uh because of that um i if you are sticking with a"
3326160,3332960," single uh language right with a single stack i would recommend you to learn um as many uh basically"
3332960,3339680," features of that development environment as possible uh because you will need to navigate uh in the big"
3339680,3346160," code base very quickly right um so essentially since i'm constantly moving between the languages i"
3346720,3355040," have to take more language agnostic approach and i had to master how to use such tools as grep uh as grep"
3355040,3366080," and find right grep allows you to search within the files for by a pattern right so it allows you to"
3366080,3372400," search by a pattern and find allows you to search specific file names right so and how i use these two"
3372400,3378000," tools right essentially i'm looking at a particular file the file is doing something the file calling"
3378000,3383840," to a particular function i need to find where that function is defined depending on the language"
3383840,3389120," functions usually define the different languages differently in javascript it's function function"
3389120,3395280," name in python it's def function name and so on and so forth knowing that i'm crafting a regular"
3395280,3401040," expression def the name of the function grab the entire source code find me the definition of that"
3401040,3407120," function and then i go there and then i look what's there and what other function it calls and that way"
3407120,3414320," i'm just traversing the cold stack uh the cold tree rather exploring how the program goes and where things"
3414320,3422160," are defined and so on and so forth uh usually this is how i usually swim right this is how i usually swim"
3422160,3429520," uh in terms of like where do you start swimming like from from where do you start swimming um usually"
3429520,3436640," programs have some sort of a ui right so you know that in looking at the ui you want to change the behavior"
3436640,3443680," of that specific button somewhere there right how can you find that button in the source code in the big source"
3443680,3451040," code there is usually a label on the button or there is some text around the button in the ui i literally"
3451040,3458080," take that text like literally what's written there and put it into grab and tell me find where that text"
3458080,3464320," in the source code right it shows me a bunch of places where that source this text is used in the source code"
3464320,3470080," and then i go there and i see okay this is the behavior of the button this is on click function and"
3470080,3475520," this is basically the actions of that button and now i can start swimming through the call graphs and"
3475520,3481760," finding what things i need to change so this is how i approach big projects and stuff like that essentially"
3481760,3489440," like uh explore them like dungeons become the dungeon master see what i'm talking about so yeah"
3490480,3494560," i don't know if that's a good advice but i just like give you everything that i know um"
3494560,3504000," all right all right all right all right all right all right all right so okay so we have in lineable"
3504000,3509680," functions now which is kind of cool oh by the way speaking of um people constantly ask me"
3511200,3518160," why don't i split my files into smaller files right because i tend to write these huge files like of"
3518160,3526000," several thousand lines of code uh right and what's up with that this is because of the approach that i"
3526000,3533040," just explained because of me constantly grabbing the entire source code just to find something i don't"
3533040,3540720," care about files anymore i basically treat the whole code base like a huge file because find and grab don't"
3540720,3546160," give a shit they just don't like i they just find me the place and i just go their place i don't care"
3546160,3551440," what file is called and how if things are organized i'm gonna grab it anyway it's like it's kind of similar"
3551440,3558480," to uh the interesting situation where the university professor was complaining that the modern c uh you"
3558480,3564240," know the new cs student don't even know what is a folder and they don't know anything about the file"
3564240,3570480," structures and stuff like that and this is because they don't organize the folders they just always use"
3570480,3575600," search to find all these things on their computer so they don't even need to know anything about uh you"
3575600,3580880," know folders and the structure it's literally the same thing that's why i write huge files because"
3580880,3587360," it doesn't matter because i'm gonna grab that shit anyway who cares where it's located so it doesn't"
3587360,3598480," change anything literally doesn't change anything but it's hard to read one giant file yeah it requires"
3598480,3607120," a little bit getting used to but here's the thing uh so if you are the one who wants to contribute"
3607120,3613520," something to somebody's else project nobody will care whether the code is readable or not because it is"
3613520,3621840," you who wants to read the code so unreadable code is by definition your problem if you are the one who"
3621840,3628400," wants to read the code readability of the code is your problem not the problem of the writer that's the"
3628400,3633200," just harsh reality that you have to deal with and that you have to accept and there's nothing you can do"
3633200,3639840," about that sorry nobody will tell you that but i'm i'm a russian i will tell you that so"
3639840,3646560," so this is something that you have to accept you you go to somebody else open source project you see"
3646560,3653600," huge files and but you still want to contribute whose problem is that well not the person who wrote them"
3653600,3663520," that's for sure so sorry uh it is what it is um okay"
3663520,3671760," so i think we need to uh actually commit this thing let's let's actually commit this thing"
3676720,3684480," uh implement the procedure inlining about that i'm gonna push that right into the repo"
3684480,3694960," it's the sound of me pushing things into the repo uh all right so um the next thing i want to do"
3694960,3701200," i want to kind of see um what's the current performance of the port port right so let me try"
3701200,3710400," to compile ports uh with the um with the new python compiler right so it's gonna take some time it is"
3710400,3718880," using nothing uh assembler which is known to be rather slow right but it's is what it is okay so"
3718880,3724960," everything seems to be okie dokie and now i want to try to rebuild port with itself right so this is"
3724960,3737920," going to be port port okay oh i forgot that port doesn't report the performance of the of different"
3737920,3744640," steps anymore or different phases uh because i actually kind of disabled it uh so i probably need"
3744640,3752720," to go back so we have time it yeah so because compiler has minus s flag that is supposed to disable"
3753280,3759840," every like all of the logging uh but time it uh the thing that times the phases of the compilation it"
3759840,3769040," doesn't care about that flag so uh i think maybe i can go to time it to here all right time it to here"
3769040,3773520," and just you see what i just did chat did you just see what i did"
3780880,3790720," i didn't even care what file it was in i didn't why would you like seriously it's it's that easy"
3790720,3796080," it's just like just go there why do you need file and stuff like that just go there"
3796080,3809280," anyway uh i'm sorry uh so maybe we can accept so here we accept the uh the string and whatnot"
3809280,3817520," uh next i think i'm gonna accept the boolean right i'm accepting the boolean uh and in here i want to"
3817520,3825440," consume the boolean right um so if what's going to be what's going to be the boolean silent right"
3825440,3836000," so silent means that it's true right uh so this is going to be message right uh silent"
3837680,3844080," right uh not silent that means we do that stuff though we probably want to put the memory somewhere"
3844080,3847200," here uh right so i'm gonna actually"
3847200,3859440," do it like this and then like this so i suppose otherwise we want to do something like uh drop drop"
3859440,3865360," right to drop the rest of the stuff uh and there we go so now we can accept the boolean uh which indicates"
3865360,3870480," whether to print things or not to print the things uh so now let me try to compile the entire thing just"
3870480,3879600," to make sure that uh nothing is wrong uh-huh okay cool so and how we're gonna be uh approaching the"
3879600,3884240," entire thing i'm gonna uncommon this uh let me revert the entire thing i think"
3886800,3894640," uh i keep forgetting that my extension for emacs is rather dumb uh it is rather dumb okay so in here"
3894640,3901040," this thing should not compile right it should not compile according to my understanding yeah it didn't"
3901040,3906880," compile because uh the zero argument is supposed to be boolean but we got a pointer which came from this"
3906880,3913680," string right so here is the pointer but we expected boolean as far as i know we have a memory silent uh yeah we"
3913680,3919680," have a global thing so that means i can do silent uh add boolean right read it like this and that"
3919680,3925520," should compile now uh and it will tell me how much time took the computer though it won't tell me uh"
3925520,3930800," because that will require a new version of the compiler okay so this is basically it for now at least"
3931920,3936480," right so we're gonna improve that time it"
3936480,3947840," silent boolean time it from here generation"
3947840,3957840," silent boolean and is that it i think that is it okay so now we should see the time for all of the uh for"
3957840,3962960," all the phases of the compilation and i kind of want to use a phasm compiler because i don't want"
3962960,3966800," to wait for another compiler all right so use the phasm compiler"
3966800,3980800," okay cool so i'm gonna move output executable to ports now right i'm moving there and i'm gonna try"
3980800,3988400," to recompile the entire thing one more time okay so compilation took 1.6 uh and the rest of the things"
3988400,3994080," took that time okay so generation took actually this and type checking the type checking is actually"
3994080,3999120," slower than the compilation that's very interesting uh yeah but anyway"
4001120,4008800," i would expect those times to go a little bit down right i would expect them to go a little bit down"
4008800,4013840," just a tiny bit down uh after we inlined majority of the um"
4013840,4023600," majority of the small uh small frequently used functions right so we have a lot of small uh frequently"
4023600,4032000," used functions and all of them generate function calls and uh those a lot of overhead so i want to"
4032000,4038080," see if that will improve uh the performance so let me go ahead and just like commit whatever i've just done"
4038080,4041680," um time it to here"
4045520,4053360," make so this is more of a like a fourth dot fourth make time it to here uh consider the side of the minus"
4053360,4057840," s flag all right and i'm gonna push that right into the repo"
4069920,4076960," oh by the way uh when i said that uh readability of somebody's else project is your problem uh i didn't"
4076960,4083120," mean that if you are the maintaining maintainer of the project you should never care about readability"
4083120,4089680," of your uh project right so it is still important right and the important uh the reason why it's"
4089680,4096720," important is because it turns into basically competitive advantage right because we are on open source"
4096720,4101360," market uh you as an open source developer wants to attract more contributors because the more"
4101360,4105840," contributors you attract uh the more successful you become because you will have more resources"
4105840,4111280," right so and that kind of forces you to care about the readability because that will increase the"
4111280,4116560," amount of contributors so it basically turns the entire thing into the balance right so we have"
4116560,4123680," people who uh wants to read your code and the more people you attract the more successful your project"
4123680,4131040," becomes so but at the end of the day still still uh if you want to contribute to somewhere well and you"
4131040,4136480," can't read that and you can't find anyone who will explain you that it's just like it's still something"
4136480,4144480," that you have to solve yourself unfortunately it is what it is it isn't what it isn't reality is harsh"
4150000,4155840," the situation is probably inverted for proprietor yes yes yes yes it's it's actually very interesting"
4155840,4161840," it is actually very interesting how depending on the on the market incentives are completely different"
4161840,4165280," and the outcomes because of that are completely different it's really interesting"
4165280,4176800," though there is also an interesting layer to all of that what is really readability what we consider"
4176800,4185440," currently readable right so the language the code actually they put it this way the language that"
4185440,4192720," has a syntax of another popular language would be considered uh more readable because it has a syntax"
4192720,4199280," of a more popular language because by definition more people learn that syntax right so"
4199280,4204880," and the reason why all of the modern languages this day they have c like syntax is because c"
4205440,4213040," is incredibly popular language for decades that's why not because this syntax is intrinsically good for"
4213040,4218960," anything or whatever you can actually learn what like any syntax you can rewire your brain to learn the"
4218960,4225600," syntax and get used to it yeah you can do that uh but because of its popularity that style of syntax is"
4225600,4232800," going to be considered more readable right which kind of forces you to use specific techniques specific"
4232800,4237840," approaches that are more popular so it's it's very interesting actually"
4237840,4245120," anyway uh so i have two emacs is open"
4245120,4258240," okay uh so now i'm gonna go to the standard library right i'm gonna go to the standard library and find all of"
4258240,4261360," the procedures and just want to see uh what can be in lines"
4261360,4273360," in line this in line that that's for sure so let's actually just in line the whole standard library this"
4273360,4285840," can be in lines uh might as well query replace proc in line proc let's do this way proc space in line proc"
4285840,4292080," space boom boom boom boom boom boom boom boom boom boom boom boom boom same"
4292080,4294080," hmm"
4294080,4294080," hmm"
4294080,4299520," hmm yeah all of that has to be in line"
4299520,4305280," look how many small functions look how many small in lineable functions we have it's insane"
4306160,4312560," uh all right well that is in lineable could be in mind um"
4312560,4319120," though that one okay so this one is no but the compiler will complain about that anyway"
4319120,4325760," you know what since the compiler is going to complain about that anyway why not just like replace"
4325760,4335040," everything and throw and go to the compilation errors um um oh shit and porth now"
4335040,4346080," fuck and porth now does not support in line uh porth now doesn't support in line so this is going to be"
4346080,4352320," interesting so we'll have to before we can even test the performance we'll have to introduce in line or at"
4352320,4358400," least skip the in line keyword just to test whether the compilation has improved or not"
4358400,4364240," uh yeah that's very interesting so this is the basically the realities of self-hosted compiler"
4364240,4368880," uh i suppose uh okay so and this thing doesn't support anything"
4368880,4380240," um very interesting okay yeah there we go so uh this thing goes away uh here is another one uh in how many"
4380240,4390320," places will have to yeah okay so i already found a usability problem right so no conditions in the"
4390320,4399200," lab procedures actually points at the condition but i as a programmer wanna go here and remove in line"
4399200,4408560," so um i think because of that um the lucky the the error should point at here right it should point at"
4408560,4416560," somewhere here in my opinion just from the usability point of view uh so let me go to port.py uh no"
4416560,4423920," conditions blah blah blah so and it complains at the current token but what should complain at is ctx"
4423920,4432560," current procedure and class proc do we have a location we do have a location of that thing uh okay so we have no"
4432560,4445520," no conditions no uh loops ctx current current procedure location and no memory no local"
4445520,4457600," memory in online procedure ctx current uh proc lock right uh though right we will also have to add a note to"
4457600,4463920," indicate like to show where this thing was found still uh but let me just uh you know try that one"
4463920,4471600," more time uh no local memory inside of the prestige and it points at this thing uh right uh-huh"
4472800,4483920," so all right so all right anyway no conditions compiler note uh is going to be talking location um condition"
4483920,4498000," was used condition is used here uh right so no loops compiler note uh token log loop is"
4498800,4510800," used used here no local memory compiler note um token lock uh local memory is defined uh here"
4510800,4517440," memory is defined here and let's take a look okay no local memory in this thing and uh also we have this"
4517440,4523280," thing okay cool so it's a little bit easier to use now because we're specifically pointing it here now i can"
4523280,4532720," just like quickly go and uh fix all these things uh uh actually more of them than i expected"
4532720,4540560," so now everything now is more or less in lineable"
4541840,4545280," okay okay to tmpr lock"
4545280,4558240," append item okay i forgot that we have this stuff utos utos stands for unsigned integer to string"
4558240,4563920," right so it's such a silly name map files we have mapping of the files in the standard library how about that"
4564800,4573040," um shell save character this one is also interesting it's about shell parsing uh or rather escaping shell"
4573040,4580400," commands when you print them uh okay i think we're getting closer and there we go"
4581520,4586960," so that thing should now kind of work i wonder how much the"
4586960,4596800," i would say that the size of the executable grown did it become bigger i think it became way bigger"
4598000,4609120," i think it actually did my gut and you know okay so the size of the pores dot awesome is 1.1 megabytes"
4609120,4615920," it is 1.1 megabytes and let's take a look at what it was before i'm gonna actually stash everything we"
4615920,4621520," have in here and i'm gonna try to recompile the entire thing so this is expected by the way right a"
4621520,4625600," little bit of a bloat is expected but it's like necessary bloat um"
4625600,4636160," right so force.asm uh yeah it's less than megabyte it's not that much it's not like exponential"
4636160,4642160," explosion or anything like that it's just it's fine actually uh so all right let's go back"
4646800,4655760," all right so but unfortunately i won't be able to recompile ports with itself right now because"
4655760,4663840," port that ports does not support inlined functions yet uh right so i can try i can do port the port but"
4663840,4669520," the part that was will tell me that unknown word in line the same thing that we saw at the beginning of"
4669520,4676800," the stream so we have to start over again but for port the port no not really though uh not really"
4676800,4682800," because the only thing i want to assess is uh whether that speed up the compilation process uh what i"
4682800,4690880," can do is basically just ignore inline things so if i encounter inline i i can just skip it oh yeah what's"
4690880,4698560," up come and see you well gosh stop bike shading syntax in chat well you are a mode you know what to do"
4698560,4702160," the same hello hello"
4702160,4716000," all righty all righty all righty all righty all righty all righty okay go uh so i think i'm gonna"
4717680,4726000," do the following thing so we're gonna have std dot forth uh make small uh functions in lineable right"
4726000,4741440," so they are in lineable now and um fourth dot pi make the um make the inline error error messages more"
4741440,4746400," usable whatever that's supposed to mean right so let's push that right into the repo"
4747680,4755440," we're gonna make that sound every time i push to the repo i think i think i am all right so"
4755440,4764400," so let's do a small hack let's do a small hack the hack is going to be the following i'm going to find"
4764400,4774080," procedure compile file into ops right and then here we have just a procedure right nothing particularly"
4774080,4784080," special nothing particularly special if we encounter uh something like inline i think we're going to just"
4784080,4795120," ignore that right to do inline procedures are not implemented uh for fourth for the fourth right i'm"
4795120,4801200," going to give it like a lot of priorities so this is a very high priority function and yeah so if you don't"
4801200,4808080," know what it's all about basically i have a tool uh that searches for to do's uh right it's called snitch"
4808080,4814880," i don't know i i think it does support this stuff right right now so i can do list and uh the more o's"
4814880,4821200," to do has the higher it's going to be in the search right so this is how you can control priority of"
4821200,4828000," certain to do's right so which is rather convenient so it just basically sorts them but by amount of to do's"
4828000,4836080," uh you can find this uh tool in here so it's called snitch it can do more things it can basically collect"
4836080,4841280," all of your to do's and report them as in issues in the issue tracker and stuff like that for people"
4841280,4848320," who's watching uh live i'm gonna actually put that in the chat so here it is and uh for people who's"
4848320,4856320," watching on youtube i'm gonna put it in here snitch the to do collector uh there we go and i remember"
4856320,4862000," that i implemented that feature live on the stream right so that feature that sorts everything by amount"
4862000,4867200," of both uh let me find that stream so i'm gonna give the link to that stream as well i think i think it was"
4867200,4883680," um so zozin daily uh let me see let me see uh so i think it's it's about stealing ideas from other open"
4883680,4888480," so yeah yeah stealing ideas from other open source project because i stole that idea from somebody else"
4888480,4895200," so this is where i implemented this entire thing uh right so i'm gonna go into the description um"
4895200,4904320," stealing ideas from other open source projects and by the way that tool is implemented in go"
4904320,4911040," uh yeah i also like this thumbnail it's actually pretty cool right i drew it myself almost"
4911760,4916640," uh i stole the like different components of that thumbnail from the internet but i compose them"
4916640,4927520," myself uh yeah it's pretty cool uh all right uh let me let me see let me see so it's port.porth"
4927520,4937520," um yeah i just wanted to ignore the inline uh so let me try to compile ports.porth uh right"
4942560,4949440," and after that i want to try to compile ports itself right so port for the port"
4949440,4954720," i think it became faster"
4954720,4968240," we dropped by one second literally holy look at that"
4968880,4975600," so compilation was 0.6 but now compilation is 0.6 just because we inlined a lot of small functions"
4975600,4985680," that is so cool about that though uh since port.porth does not perform the inlining"
4985680,4993440," this time does not include uh does not include the inlining made by port so yeah but it still improves"
4993440,4997680," the performance it doesn't really matter because it's just the behavior of the program it still"
4997680,5007200," makes the program faster uh and on top of that we can even do something like um t phasm linux x 8664"
5007200,5013600," all right so and the final time is going to be even faster hopefully right so um so the total"
5013600,5021200," recompilation of port.porth uh all right so okay i think it was the right direction i think it was in"
5021200,5030160," fact the right direction uh so now uh let me uh let me confirm that um i already committed everything"
5030160,5039600," anyway uh so what are we going to do um phasm is incredibly fast it is in fact incredibly fast i have"
5039600,5047120," no idea why nazem is so slow that that's the real question so it's not like why phasm is so fast why nazem"
5047120,5058160," is so slow because it's like what is it doing there i have no idea right so it literally took 6.5 seconds"
5059200,5060400," uh and phasm uh and phasm"
5060400,5068000," phasm you know less than a second so it's just like what the fuck is it doing there"
5068000,5076480," um nazem equals net wide assembly maybe it makes network requests to compile each like"
5077440,5083360," yeah it could be uh it could be uh it could be the case could be actually the case all right that's"
5083360,5088640," actually very cool so now we have inline procedures well i mean for port.py uh but"
5088640,5094720," now we need to implement inline procedures for the uh for port.porth as well"
5094720,5106480," for port.porth as well add to do uh for uh for inline procedures procs for um"
5107600,5115760," for port right port.porth uh and yeah there we go and i wonder do i want to"
5115760,5123120," do i want to implement port.porth inline procedures on the stream or am i going to implement that later"
5123120,5130160," i might as well implement them later probably um probably going to implement them later"
5130160,5137360," or maybe not okay i can implement it right now but i'm going to do a small break so let's make"
5137360,5140880," a small break and after the break uh we're going to implement it for port.porth um"
5140880,5147840," okay so i decided that i'm not going to do uh like inlining for port.porth on the stream"
5147840,5154240," uh i have a bad idea uh so i still have some unfinished like advent of code problems and i think uh"
5154240,5159840," the second part of the stream is going to be essentially like me solving the uh 22nd day of"
5159840,5165600," advent of code super quick uh but before i can do that i want to just clean everything up i'm going to"
5165600,5170160," merge everything and uh you know the usual stuff and especially commit everything to"
5170160,5178080," uh to the repo right so uh first i want to do i want to check if my uh tests still pass uh they"
5178080,5186560," probably don't right because i recently made it so the um the test.py also runs the native port right"
5186560,5191600," and native port doesn't pass all of the tests right it doesn't pass all of them uh so let me actually"
5191600,5199280," demonstrate you i'm gonna do test.py uh and let's just run it on tests right so let's just run it on"
5199280,5206240," tests and as you can see uh not all of them actually pass and this is because there are some discrepancies"
5206240,5213280," in error messages between port.py and port.porth and uh i'm planning to actually get rid of them like"
5213280,5218000," pretty soon but there's no really like bugs there it's just like different error messages because we"
5218000,5224160," here uh here we have like uh also tests that test different error messages as you can see 31 failed"
5224160,5230640," but if you try to test something like um examples right if you try to test examples i think majority of"
5230640,5236640," them are gonna pass except cat so there's something wrong with cat which is like cat"
5236640,5242240," re-implementation in port uh but the rest of them are kind of fine so yeah it's kind of weird but oiler"
5242240,5247600," problems oiler problems i think they all pass so port.porth can solve all of the oiler problems"
5247600,5256000," yeah all of the ones that we have right so maybe we're gonna have more in the future"
5259200,5264560," so there you go as you can see so we're running this thing with uh you know port.py right so here's"
5264560,5270320," port.py and here's the port the native one uh and they all produce the same final result on the oily"
5270320,5278240," problems so okay uh you know what i'm gonna do so fixing tests for port.porth is completely outside"
5278240,5284720," of the scope of what i'm doing right now so i'm gonna quickly just disable uh testing of port.porth"
5285360,5289600," so testing of ports.porth is located in here so i'm gonna just go ahead and"
5289600,5295840," doing that and i'm gonna run test full which will test everything"
5295840,5304160," so probably want to add some tests for inlining that would be interesting i think"
5307120,5309200," i wanted to add some tests for inlining"
5309200,5317280," oh something went wrong there are discrepancies"
5317280,5322240," oh i know what the is going on"
5322240,5328960," so the test case actually shows us that there is discrepancies between"
5328960,5336720," what ports.py produce and what ports.porth produced so and the reason is because port.py supports inline"
5336720,5342640," procedures and port.porth ignores inline procedures right so essentially port.porth didn't align anything"
5342640,5346960," so they ultimately produced different executables completely different executables"
5347760,5356160," so because of that i need to disable more things right let's disable uh testing of uh you know of"
5356160,5361760," self-hostiness right so because we have this testing where i compile port.porth with port.py"
5361760,5367840," and then i compile port.porth with port.porth and i compare the outputs right so let's actually disable"
5367840,5376000," that for now as well because i just want to see if i didn't break uh ports.py i think i did it i think"
5376000,5381840," everything's fine"
5381840,5396720," all right so far it's going great i think i think it's going great uh and oh"
5397840,5403760," looks like oh yeah i know what the is going on uh because of the full file yeah so that's the reason"
5403760,5409840," why it's failing because i i keep forgetting about this thing uh so that means uh it failed on examples"
5409840,5415920," let me retest the examples specifically so let's retest the examples the examples should be fine"
5415920,5424880," cool and uh oiler"
5427680,5437760," okay"
5437760,5437760," okay"
5437760,5437920," okay"
5437920,5438000," okay"
5438000,5438000," okay"
5438000,5438000," okay"
5438000,5438000," okay"
5438000,5438000," okay"
5438000,5438000," okay"
5438000,5438000," okay"
5438000,5438000," okay"
5438000,5440000," euler is also fun"
5440000,5440000," fine"
5440000,5445200," uh so let's go ahead and merge everything so i'm going to merge everything"
5445200,5450000," without fast forwarding merge and edit the message so it's going to be in line procedure there we"
5450000,5456960," go and i'm going to push that right into the repo um i'm going to remove this entire thing"
5456960,5463440," all right so uh you can find the source code of this thing in the description or in the chat and"
5463440,5470000," that's pretty much was the implementation of uh inline procedures for port how about that"
