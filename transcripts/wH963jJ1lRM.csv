start,end,text
160,5840," looks like we're live hello everyone and welcome to yet another recreational programming session"
5840,10400," i'm already losing my voice i really apologize for that but let's make a little bit of an"
10400,16560," announcement uh on our discord server and uh hopefully officially start the stream so um red"
16560,23920," circle uh live on twitch and what are we doing today on twitch on dot a television website today"
23920,32640," we're building uh raylib with knob custom build system that's right we're developing our own custom"
32640,38640," build system and today we're going to attempt to do something actually meaningful in it for example"
38640,43440," built relatively big project which is radio to the fair relief is not that big of a project but we'll"
43440,50480," see how it goes so https twitch.tv/studying so this is the place where we do all of that and i'm gonna"
50480,55680," ping everyone who's interested in being ping there we go the stream has officially started the stream"
55680,64000," has officially started so uh we continue working on our custom build system um and for um and we're"
64000,70000," doing that in the scope of a bigger project which is mutualizing music visualizer you can actually"
70000,74800," find this entire thing in here if you're interested i'm going to copy the link in the chat and for"
74800,79760," people who are on youtube it's going to be in the description i think i forgot to prepare the description"
79760,86720," yes i think i did so uh here is the uh sorry yeah i already have it in here i'm gonna copy paste it"
86720,94160," super quick uh there we go so right and it's a music visualizer so you give it music and it starts"
94160,99200," visualizing this music in this sort of fashion right so it's loading some stuff right because it's github"
99200,106160," but i can actually show you right so but before i can show you uh i need to build the usualizer"
106160,113120," right uh so and essentially the point of uh the build system is that it's a single c file"
113120,120160," right it's a build system written in c and you're writing all the build recipes using c so how is"
120160,127360," that supposed to work essentially you bootstrap your build system uh with a c compiler right bootstrapping"
127360,134080," is actually very simple you just compile the knob dot c uh with a c compiler without providing any"
134080,139600," additional flags without linking with anything just like just compile it as a single file as hello world"
139600,145600," right so just compile this hello world and there you go you just bootstrapped this entire thing and"
145600,152000," you got a knob executable so the next thing you have to do you have to try to run it right and we need"
152000,157760," to provide several sub commands so usually when you build in something you have to first configure the"
157760,165920," build uh right so there we go we're configuring the build so we automatically uh picked target postex and"
165920,171440," hot reloading being disabled so our project allows hot reloading essentially when you modify the code"
171440,176000," it can automatically pick it up without reciting the application it's useful for creative process when"
176000,180800," you work on something visual uh when we're doing something technical it's usually not needed because"
180800,186080," it adds additional complexity for the build so i just like tend to disable it so one of the things we"
186080,190560," can do with our build system is to say for example i want to build for windows instead of linux because"
190560,198240," who uses linux in 2023 am i right so we configured the build and now we can uh just build this entire thing"
198240,204960," and as you can see it actually build it we can then uh look inside of the build folder and there you go we"
204960,211520," have a uh mutualizer.exe uh which is an actual windows windows executable right so let me actually prove"
211520,218320," that to you so as you can see it's a pe32 executable for microsoft windows so that's what it is so it also"
218320,224640," can build uh for postex for linux right but right now it is a little bit broken all right so let me actually"
224640,233680," try to do postex uh so the library that we're using uh it's using it's expecting slightly different uh standard"
233680,240240," libc library right and this is because it was built on a different machine right so it was not built"
240240,250800," on our machine and this is and this is why i think what we have to do is to build raylib as part of the"
250800,260560," compilation of mutualizer itself right so as of right now we are depending on these uh binary compiled binary"
260560,266240," library libraries that we downloaded from the official repo of raylib and since i have a"
266240,273840," very strange environment like i have a very old libc uh this raylib um thing doesn't really work for me"
273840,279600," so it would be more reliable if we just shipped the source code of raylib with the source code of"
279600,286000," mutualizer and actually build it together so that way we can configure the build of raylib however we want"
286000,293600," right so and it's actually perfect in my opinion um right and uh to do that we'll need to extend"
293600,299200," our node build system to actually be able to build uh this entire library so and this is the major"
299200,305840," challenge i would say this is the major challenge that we'll try to overcome uh today but but for now"
305840,311120," we can build just a windows version so there's nothing special about that so it's actually quick to do that"
312160,318080," there you go and we can even try to run the the windows version just to see how the measure looks"
318080,324160," like uh so there you go uh it's gonna take some time because it's uh we are running through wine right"
324160,331120," there we go so this is how it looks like to be fair it's all like indistinguishable from um from linux"
331120,336480," version if you run it through wine because we're not using any native ui or anything like that right we're"
336480,341280," drawing all of the ui ourselves like i cannot distinguish whether it's a windows version of linux"
341280,347920," or linux version it's like they really look the same to me that's kind of fun actually uh and what"
347920,353280," you're supposed to do you're supposed to provide some music in here so we have uh some music here so"
353280,360960," let's actually put pilot red sun there we go so this is what it's doing right so one of the things we"
360960,367440," added recently is that we added uh micro microphone support uh right so now i can speak and it also"
367440,372800," picks it up and it also works on windows by the way it also works on windows which is actually kind of"
372800,379120," interesting and to be fair on windows it works even better because there is no like a humming noise"
379120,383760," uh on linux we had some sort of a humming noise in here on windows is just like i mean not on windows but"
383760,388080," online uh it's not present in here so i can just beatbox how much i want"
388080,396400," right and it just works fine so that's pretty cool and then you can continue listening to the music"
396400,405200," it should drag and drop in there so uh yesu yesu yesu so that's basically what we have so far"
405200,412320," and uh yeah the the goal of today's stream is to actually build array leap from source code as part of"
412320,420160," the build of the entire project right and that will require uh actually calling several clang commands"
420160,425040," and then maybe not even clang commands because we're going to be also building for windows and also"
425040,431040," building ray leap from scratch this could be it could be a very expensive uh operation so we'll need to"
431040,437200," learn how to cache the results of the build so yeah i think it's going to be interesting i think it's kind"
437200,442720," of an interesting sort of a challenge to uh to take all right"
442720,451280," so first thing we need to do we need to download the source code of ray leap so let's go ahead and do"
451280,459120," that so i go to ray send five and uh the next thing we're going to do we're going to download the source code"
459120,464160," i'm not i haven't decided um how exactly i'm going to ship ray leap is it going to be sub module"
464160,472320," uh or we're going to just commit the entire thing the problem with ray leap is that it comes with a lot"
472320,479680," of stuff that we don't really need so we may want to actually strip off this stuff that is not needed"
482320,483600," so let's go ahead and do that"
483600,492720," so it's kind of strange actually when you're just downloading the source code"
492720,500560," via wget it doesn't really have a ray leap prefix or anything like that it's just a version.zip"
501360,512640," but if you click on it it does have a prefix ray leap what's up with that i read like how does it even"
512640,518720," work like why is it like that github like why does it work like that does anybody know"
518720,526960," submodulate well i really don't like submodules to be fair uh right because they introduce a lot of"
526960,533280," problems and as already said again ray leap uh comes with a lot of stuff that we don't really care"
533280,539680," about so that that's the problem right so i don't want to make it part of the of my source code uh it"
539680,545840," doesn't really make any sense to be fair it doesn't really make any sense uh and what does it download"
545840,553440," why does it take so much time to download through wgit is that is some sort of like a ddos protection"
553440,560000," thingy it could be actually ddos protection thingy so anyway i'm gonna actually take it from from here"
560000,568720," so this is going to be ready and uh landing actually put it in here so let's unzip"
568720,576080," and uh there we go so there's a lot of things in here there is like a several build systems"
576080,582800," uh there is c make there is a make files um i'm not sure if there is a separate make files oh"
582800,590000," i think there was some mig files in src there we go so there's some make files in src and there we go"
590000,595760," so there's also build.zig i don't know why people put build.zig like everywhere it's like a build system"
595760,601760," from a completely different language uh i do not understand that what's the point of that but anyway uh"
601760,606000," it's yet yet another movement that is going to die out like in five years or something like that"
606000,612800," so um yeah essentially what we need in here we need some uh all of these c modules right so we need"
612800,618320," some sort of like all of these c modules so let's actually try to do ls and we're going to grab uh with"
618320,626400," dot c and i wonder if i can actually nah it actually gives us more than than i need it so what if i say okay"
626400,634400," um we we have to end with dot c uh well it doesn't yeah okay so it doesn't exclude rc things right so"
634400,639840," i probably have to escape this stuff okay so i suppose these are all the files that we need to compile"
639840,648320," somehow right so these are all the files and uh so let me actually grab the list of these entire things"
648320,655120," and i'm going to literally copy paste it into knob knob.c uh i'm going to literally copy paste it to"
655120,664480," knob.c and put it like that so uh let's actually make it some sort of like a global array right so this"
664480,673120," is going to be uh something like ray lib src right so this is our ray lib src uh maybe we're going to even"
673120,681040," make it static so and let's introduce a function something like build ray lib and of course this"
681040,686560," function may fail so that's why it's going to be boolean and uh we have a notion of the configuration"
686560,691600," right so configuration usually contains the target and hot reloading exactly the things i was talking about"
691600,701920," at the um at the beginning of the of the stream right so uh now we're gonna accept that configuration"
701920,710480," and let's actually focus specifically on um i suppose linux right so let's actually try to build it for the"
710480,720240," linux target so if config targets not equal target postex right so we don't really have a linux target we just"
720240,726560," have postex target right so hopefully a majority of the things that we do on linux will also work on mac os"
726560,731840," uh hopefully we'll see actually so and if it's not equal of course we're going to just fail the entire"
731840,737760," build but it would be nice to also tell the user like why exactly it has failed uh right so this is"
737760,747920," going to be no blog knob error and uh then we're going to say okay only posix build is supported for now"
749040,756640," there we go uh so in here we probably want to return true so and essentially what we want to do we"
756640,763120," probably want to iterate through each individual module and just compile it right just compile it so"
763120,769760," we may actually probably want to start with just compiling one single module right let's just try to"
769760,775360," compile it as it is so let's just try to compile it so first thing we need to do we need to create a"
775360,780000," command right command right command is an abstraction that allows you to construct command lines"
780000,787040," and run them like external commands and stuff stuff like that uh right so nob cmd append so what"
787040,792560," you're doing you're just appending the arguments right so i want to run clang uh so and then"
792560,799840," when i run clang i like to enable a lot of different like flags warnings um extra warnings and stuff like that"
800480,809200," uh right so it can be w all w extra uh and uh so also include the debug information i think debug"
809200,819600," information is actually very very useful thing so and then we can just provide the the source code like so"
821040,828800," so we probably will need to provide some things like uh math library maybe dl and stuff like that but"
828800,833200," since we're compiling like a single translation unit i don't think it's needed to provide all of that"
833200,840000," right now uh it could be provided later at the linking stage right so at the linking stage uh and there"
840000,846080," we go so you basically constructed command uh that you can just run it uh you can actually you have two"
846080,851600," options how to run it you can run it synchronously or you can run it asynchronously when you run it"
851600,858240," synchronously uh this entire call is going to block right so and it will return you true or false"
858240,863760," depending on where the command has failed uh and if it failed you can just return false so i could have"
863760,871040," just like returned uh this like that but i plan to actually add more stuff after this command so i don't"
871040,877200," think it makes that much sense to actually you know compress the source code right so it's actually like"
877200,882640," keep it like this uh and there is an option to do asynchronous command and this is actually kind of"
882640,889120," interesting in case of an asynchronous command you don't get a true or false you get a process process id"
889120,896640," right and essentially after that it doesn't block right so you just run the process and you continue"
896640,903200," execute it and the process is running in parallel and once you are ready to basically wait until the"
903200,909600," process is done you can do proc wait and only this thing will actually block until the process has"
909600,914320," finished right so and this thing will return either true or false and you can do something like this"
914320,921600," but between these calls uh right you can do additional work which is going to run in parallel"
922640,929040," with cmd so that way for example if you're compiling several translation units you can actually run them"
929040,934800," asynchronously like you can just um you know initiate the asynchronous completion of all of them"
934800,940240," and then at the end you can just wait on all of them right so that way you sort of like running"
940240,944960," all of that stuff in parallel and you naturally have this parallel builds you basically decide how"
944960,949200," exactly you want to run commands either synchronously or asynchronously and it's just up to you"
949200,955680," and you can build more higher level primitives on top of these mechanisms right you may you may see that"
955680,962880," these are very low level mechanisms but you can for instance i don't know make a function that accepts"
962880,969600," array of commands and does all that parallel scheduling automatically maybe it uh this entire thing will"
969600,976400," accept the amount of threats to allocate so this thing is never gonna execute more than like three process"
976400,980880," simultaneously or something like that you can build stuff on top of this thing even though it's low"
980880,985600," level it's actually a good thing because then you can build your own abstraction on top of it"
985600,992880," right and if the abstraction is good we may even include it in in the build system itself uh right"
992880,1000080," g8 yeah exactly i'm actually thinking about creating like an abstraction uh which accepts array of"
1000080,1007920," commands and this number four minus j and does the the thing that make does right so your job is going"
1007920,1012960," to be just part the command line arguments extract this thing and just pass it to that function and"
1012960,1019120," it's going to work like like me essentially so that's that's basically the idea that's sort of like the end"
1019120,1026880," game uh right so it'll be kind of interesting to actually write that primitive uh so uh essentially"
1026880,1033520," you yeah you would have to take the array of commands split them into chunks and the size of the chunk is"
1033520,1039040," the number of j right a number of the threads and you basically run them simultaneously and you wait on"
1039040,1044480," them then you take the next chunk run it simultaneously wait on them next chunk and so on and so forth so"
1044480,1049920," basically you can implement that by splitting the array of commands into chunks um that's a very"
1049920,1058720," interesting exercise actually that's a very interesting exercise so anyway in our case we don't really"
1058720,1063600," plan to do anything fancy we just want to run this entire thing synchronously right so this is going"
1063600,1072880," to be something like this um okay so let's go ahead and run this entire thing inside of the of the build"
1072880,1079760," command right so for instance we can do build raylib we provide the configuration and if building the"
1079760,1086320," configuration has failed we just return one so and let's see what is going to happen uh right so as you"
1086320,1093280," can see we're first building raylib and uh at the end i hope that build raylib is not going to rebuild"
1093280,1099600," uh the entire raylib every time it's going to cache its result but we're not trying to jump into that"
1099600,1104560," right away we're starting off like very in a very simple way we're just trying to compile a single"
1104560,1109840," compilation unit so that's basically the idea in here so this is going to be no build and let's see"
1109840,1118080," how it's going to go uh right so cmd so run sync doesn't accept cmd by pointer so it actually accepts"
1118080,1123520," it by value and there we go so only posix build is uh supported for now oh yeah this is because it"
1123520,1129680," configures the tag at win32 so let's actually fix it uh so this is going to be posix there we go so"
1129680,1135600," now it is posix and if i try to build this entire thing uh okay so oh yeah all right"
1135600,1149440," obviously there is no rcore.c at the root of the project it is inside of raylib raylib the version src"
1149440,1157600," and this is where it is located okay so yeah that's a little bit uh oopsie doopsie and uh potentially"
1157600,1162880," even a fucky wacky of course so this is what we should have done instead uh we need to provide the"
1162880,1171040," full path so that also means that we'll have to yeah we'll have to construct the path correctly in here"
1172320,1177600," so yeah we'll see how it goes so let's try to do that one more time uh holy"
1177600,1184720," oh there's a warning comparison of integers of different signs"
1184720,1196960," really you you you have these kind of warnings in your project so uh gl internal format is unsigned"
1196960,1208480," and you compare it to minus one oh so i suppose uh this function in case of an error sets all of these"
1208480,1215040," things into one sets all of the bits of this thing to one and the easiest way to compare it is just to"
1215040,1218800," minus one to do minus one that's an interesting actually"
1220960,1227520," so it may look funny for um actually less experienced developers like you have unsigned"
1227520,1232800," integer and you're comparing it to minus one and even the compiler uh complains about that right"
1232800,1239520," even the compiler complains about that but i mean if you know how minus one looks like two's complement"
1239520,1244800," how the two's complement of minus one looks like it's actually all once and this is sort of like the"
1244800,1248720," indication of the error and the easiest way to compare it is just like to do it like that"
1249360,1257920," um it does make sense and i suppose ray san uh does not build ray leap with a lot of warnings"
1257920,1264640," so that's probably the case i like to build my project with a ton of warnings i always do w all w extra"
1264640,1270560," uh but i suppose ray san is actually super experienced developer like i don't know how much experience he"
1270560,1277520," has in software development but judging from his code he's really fucking experienced like really"
1277520,1283040," fucking experienced like an old school like very cool developer and i really like highly respect him"
1283040,1288160," so i suppose he probably disables all the warnings because of these kind of situations because they're"
1288160,1295360," kind of annoying so they stay on on his way since i'm a less experienced developer i usually like to"
1295360,1299440," enable all the warnings and stuff like that so i don't know it's just like a preference"
1300240,1305840," so i suppose specifically for array leap we probably don't want to enable shit ton of warnings because"
1305840,1310800," it's going to be very annoying but i still want to enable the uh the debug information because i think"
1310800,1315040," debug information is very useful especially for open source projects right so if you build an open"
1315040,1321280," source project even if you ship something there is no reason to not uh provide the debug information"
1321280,1328560," right so why not the the hard drives are big enough in 2023 so they can hold um you know all of your"
1328560,1335200," debug information and plus with the debug information you may potentially generate more interesting reports"
1335200,1341280," in case something fails on the user site right and since it's open source you have nothing to hide"
1341280,1347120," so why not just provide as much as possible to help improve your software you know what i'm talking about"
1347120,1357920," uh anyways so uh we have some other stuff uh right so non-void function does not return a value"
1357920,1363600," that is very interesting so oh i see"
1363600,1371200," yeah because i do remember that inside of ray leap there is this macros that define what"
1371200,1378640," is the current platform like a platform web uh platform desktop uh platform android rpi drm and"
1378640,1383520," stuff like that we don't have any platform specified because we're building everything from scratch"
1383520,1392400," so i presume the this platform macro is set up by the build system that is actually a little bit scary"
1392400,1400480," right so who knows how many of such macros there is in in the project like i can do like a very dumb"
1401120,1409200," dumb hack right so i can do a very dumb hack for instance just do d platform desktop but how many"
1409200,1413600," of such things i have to provide and if i don't provide something like what kind of problems i'm"
1413600,1420960," going to encounter i don't know but maybe let's just try to solve problems as we encounter them right"
1420960,1425520," so i suppose we don't have this platform desktop let's just provide and see where else is going to"
1425520,1431040," break right so because that's how you do things that's how you explore things uh you just try to break"
1431040,1436560," break it and fix one specific thing try to run it again fix the next thing and so on and so forth"
1436560,1442400," until it works right so there's no other we have not come up with a better way to develop software"
1442400,1446640," people may claim that you know ai and stuff like that but that's the best way to develop software"
1446640,1450960," that's how we've been doing we have been doing that for half of a century actually more than half of a"
1450960,1460960," century right so very slow very steady process um so will be there will be any shortcuts in the future"
1460960,1466560," uh in this specific case and i don't think so but anyway um so let's continue"
1467760,1476080," holy shizzo uh so we have implicit declaration of glfw uh does it include glfw"
1476080,1484400," oh by the way i remember that ray leap ray leap actually comes"
1484400,1491920," like billy harrington with its own glfw so in the source code uh there is an external folder and it"
1491920,1497600," contains a shed ton of different like small third party dependencies even though those uh these are"
1497600,1503200," third party dependencies they are very very small right so they are usually self-contained and what's"
1503200,1510560," interesting is that ray leap comes with its own glfw so the entirety of the glfw source code is like"
1510560,1519440," literally in here which kind of hints that if we want to build ray leap we'll probably have to build glfw as well"
1519440,1530160," i can see why people are using cmake and stuff like that but i mean we're trying to make a rival"
1530160,1536320," to cmake so fuck cmake so and if you really want to you know make something good you have to suffer"
1536880,1546800," good shit comes out of this suffering no pain no game right imagine if the cmake developer were trying"
1546800,1553600," to make cmake and then they saw the clusterfuck of auto config builds and they thought no that's too"
1553600,1560000," hard we can't do that and they never made cmake they would never make cmake because they would look"
1560000,1570480," at the auto config and would get scared away so yeah no pain no game about us so let's go uh anyway so"
1570480,1579280," there's a really maybe we can actually just maybe we can just actually provide uh the uh the include"
1579280,1585120," path to here uh all right so if you take a look at where exactly does it fail right so it fails in here"
1585120,1594640," and then does it include glfw so where do we have includes uh okay so do you have okay so it expects"
1594640,1601440," um at the root of the include folder to have glfw folder all capitalized right so all capitalized"
1601440,1607600," uh so and here it is so here is this specific thing so maybe we can just take this entire path"
1608400,1613680," take this entire path and literally just add it as an equal path maybe that will fix something who"
1613680,1623360," freaking knows i don't know so this is gonna be this choice uh there we go and a boom uh there we go"
1623360,1627840," so let me let me see if it's going to fix uh the problem"
1631680,1633440," this is just build this trend"
1633440,1642480," well i mean building a single translation unit is actually the easiest thing right so it's linking"
1642480,1648560," several translation and this is where the shit hits the fan because uh then the linker tries to resolve"
1648560,1652960," unresolved dependency and it turns out you have to link with a ton of other libraries"
1652960,1658400," just compile it like that it's super easy uh to be fair let's actually go ahead and disable the"
1659600,1664480," the build of the visualizer itself right so let's just focus on building only ready"
1664480,1669760," uh let's not try to build that only ready build only ready uh"
1669760,1677120," man it feels so freaking good i love that i don't even have to rebuild my build system it rebuilds itself"
1677120,1684000," literally it's just like i'm doing build configuration but i'm doing that in c i'm never"
1684000,1689360," stopping programming in c it's c all the way you know what i'm talking about right"
1689360,1695840," so even the build system is c it's just like yeah that's that's how it's supposed to be"
1695840,1704400," so yeah i'm using the proper programming language for building uh okay so we managed to create this"
1704400,1712640," thing so we basically run this uh command line and there we go so we have an object file our core dot o"
1714080,1720960," uh to be fair i don't really want to have these intermediate artifacts of the build right in the"
1720960,1727520," in the root of the source code that doesn't make any freaking sense let's actually put all of them into"
1727520,1734000," the build folder and to be fair like even putting them in the build folder is kind of too much what if we"
1734000,1740480," had like a separate really folder in here and this is where all of the artifacts of the really build will"
1740480,1748080," go so that's a cool idea actually so let's for now remove this into i think and before you can actually"
1748080,1753920," put anything into that folder you need to create that folder right so i suppose the first thing we have"
1753920,1760880," to do we have to do nob make dear if not exists it's simple as that actually with nob if you want to"
1760880,1767440," create a folder we have a function right and uh it creates a new folder if it doesn't exist so we do build"
1767440,1773520," array lib and of course this entire thing may fail so you have to check if it failed just return false"
1774080,1780640," there we go so we created a folder that's pretty good and uh now we can quite easily say uh so we"
1780640,1788880," really have to say something like cmd append cmd all right and we have to basically redirect all of that"
1788880,1798160," stuff into array lib r core dot all right so we're gonna remove this entire thing and if i try to run"
1798160,1803600," this entire thing and as you can see it actually logs uh when it creates a new folder as you can see"
1803600,1811520," it created a directory build ready and then uh when it compiled it's set o to build really our core dot o"
1811520,1818400," so all of the artifacts now go into this specific folder so there we go so here's our core and when"
1818400,1823920," we're going to be actually archiving all the object files into the into the static library it's probably"
1823920,1828160," also going to go there right so we keep all of these intermediate things in a separate build folder so"
1828160,1833360," it's super easy to just remove all of them i can quite easily remove all of that it's no big"
1833360,1840880," deal so and if i reconfigure uh my entire build and just build it one more time uh it's it all appears"
1840880,1846480," again right so here i have a build configuration here's ready so uh the build system actually recreates"
1846480,1852320," all of that it's like a proper almost like a proper build system it's almost like a proper build system"
1854800,1864400," uh uh i'm a build dot bad build sh guy how cute how cute how cute and your argument is that you don't"
1864400,1872320," want to have too many dependencies for building the project right so shell and cmd is the only thing you need"
1872320,1878240," how about how about how about how about not having even shell to build your project"
1878240,1887440," my build system has less dependency than yours seriously it literally has"
1887440,1897200," less dependencies than yours because it's a c program so your build system needs shell and c compiler my build"
1897200,1906720," system needs a c compiler that's it it doesn't need shell because you just bootstrap the build system with"
1906720,1918320," a c compiler and that executable does everything else it literally has factually less dependency than"
1918320,1922000," your build system your build system is way more complicated than mine"
1922000,1931600," it's not finished though right also just a disclaimer don't take me too seriously right so it"
1931600,1937680," this is a this project is half research half joke right i'm still not sure if that's a good idea"
1937680,1947440," right but but it's an interesting idea isn't it right so all the jokers jokes aside isn't it an"
1947440,1952320," interesting idea to have a self-contained build system for c projects that doesn't depend on anything"
1952320,1959920," but the c compiler right because if you think about it c projects build for c and c plus projects is"
1959920,1966080," extremely over complicated for some reason uh you need a more additional language just to build c"
1966080,1974480," like why do i need this weird scripting language that looks like this right let me show you how this uh how"
1974480,1982240," it looks like so i'm gonna go to raylib uh c make like what is this even like why do i have to program"
1982240,1988720," in this weird programming language what the is this like why else all of a sudden i should accept"
1988720,1994640," parameters like what the is going on if i need a turing complete programming language"
1994640,2001440," well i already have one it's called c if you need a turing complete programming language to configure uh"
2001440,2006080," your build the logic of your build you already have language for that it's just like it doesn't make"
2006080,2009440," any sense to me right"
2009440,2020240," and people like you do understand that uh linux kernel is written in c"
2020240,2028080," so if you think that c is not suitable for configuring the builds freaking linux kernel is written in c it's"
2028080,2033280," probably the most complicated piece of software on planet earth the the level of complexity people"
2033280,2037440," have to manage in this language and you think that language is incapable of managing this level of"
2037440,2048240," complexity please that's not even funny people manage enormous level of complexity in c enormous things"
2048240,2053920," like engine x linux kernel so much complexity and you need a separate language for that"
2053920,2059280," really that's really not even funny you know what i'm talking about"
2059280,2066000," curl yeah another good example by the way curl is it's like the level of complexity in curl is enormous"
2066000,2071280," like people managed to somehow manage it i don't know how they do that they don't need a separate language for that"
2072240,2080000," um so just saying like but all of that is theoretical right so i'm not making any claims i'm just like"
2080000,2083840," you know thinking this is sort of like a um thought experiment"
2083840,2091680," another good example is ff unpack right yes"
2092720,2099440," so people has done pretty impressive shit in c so i'm pretty sure c can manage building itself"
2099440,2103680," like come on um so yeah"
2103680,2108720," what i was doing"
2108720,2117600," sometimes chat debates me into ranting and i forget what the i was doing um we were building this thing"
2117600,2125200," okay that that's cool uh so i suppose now what we want to do we want to build all of these modules"
2125200,2129920," right so we have all of these modules in here we want to build all of them uh so that means we"
2129920,2134400," probably want to do this kind of thing in a loop right so we're going to iterate through all of the"
2134400,2140480," um all the modules right so um there is a function in knob which is called knob array"
2141440,2149120," len i'm pretty sure it accepts a statically defined uh array uh ray lip src and gives you the size of"
2149120,2154320," that array right it's a very simple macro actually like people write this kind of macro all the time"
2154320,2159120," uh right it just takes the size of the array and divides it by the size of the element right so the"
2159120,2163520," size of the array has to be known at compile time for for that thing to work and that's basically what"
2163520,2169920," what it is that's basically it's nothing particularly special uh all right so and then we can do ray"
2169920,2176320," deep src and uh there we go so the next thing we need to do we need to construct these two paths"
2176320,2183280," right we need to construct these two paths um that's a little bit the pain in the ass so what we'll"
2183280,2188080," have to do we'll probably have to create two sort of like a string builders right so we're going"
2188080,2193360," to have a string builder and of course it comes from knob so let's say we're going to have an input"
2193360,2199040," path uh so so it's actually this is going to be input path and this is going to be output path"
2199040,2204880," so we're going to zero initialize all of this entire stuff uh and then we're going to just like"
2204880,2213520," literally construct uh those things right so let's do an knob sb append sister so we're appending"
2213520,2222640," into the input path um the prefix to src folder inside of the array deep so we just append that specific prefix"
2224080,2235200," then we append the array lib src i and then uh we need to append a null at the end of this entire thing"
2235200,2242080," to turn it into a new terminator so that that's how it's going to go uh then later we can quite easily"
2242080,2249520," just use input path uh items there we go so that's how we construct that we can construct over that"
2249520,2256880," so and we need to do the same thing for output right so we're going to do the same thing for output"
2256880,2264800," uh but the output is located in a slightly different folder right it's in a slightly different folder so"
2264800,2271520," let's actually put it in here uh and there will this is the output um oh they actually have different"
2272080,2281200," extensions right so the input is a c extension and the output is oh you know what maybe in raylib src"
2281200,2286640," what we're going to store we're going to actually store the names of the modules ready modules"
2286640,2291280," and essentially these are just the names of the modules right so these are just the names of the"
2291280,2299040," modules and uh here we're going to just append dot c but here we're going to just append dot all there"
2299040,2306240," we go right so uh so the only thing we need is the name of the module so this is the modules and this"
2306240,2311120," is the modules as well uh right the compiler is going to tell me if i made any mistakes in here"
2311120,2317600," so i don't really worry about mistakes too much so this is going to be items there we go so we got"
2317600,2326560," something like this uh right so but this is kind of dangerous to just try to compile it because just"
2326560,2333520," appending things into cmd and into the string builder it allocates the memory right so we need to think about"
2333520,2339840," memory management a little bit so essentially we can probably define all of these things at the top"
2339840,2349680," of the of the function right and now when i'm about to do input path what i'm going to do"
2349680,2355920," essentially i'm going to set its count to zero so essentially how the input path works when you append"
2355920,2362000," stuff into input path if it doesn't fit that stuff it allocates a little bit more memory so it fits there"
2362000,2366240," right you append more it allocates more if it's neat so it's sort of like a growing thing"
2366240,2373200," so you can sort of reset the counter of the string builder to zero and essentially when you append it"
2373200,2378080," again it's going to just reuse the same memory it's already allocated it's not going to reallocate it again"
2378080,2385200," so and that way we can sort of like cleaning up uh the string builder on each iteration without really"
2385200,2390240," deallocating memory or anything like that and then we can just deallocate that memory at the end of the"
2390240,2397920," entire function right so we can do a knob sb3 so this is going to be input path and then uh output path"
2397920,2404000," so it's going to preallocate as much memory as needed and it's going to just stay um as it is so the same"
2404000,2412160," goes for cmd cmd is as much of the um dynamic array as the string builder so the same paradigm works with cmd"
2412160,2418240," two right so you can just reuse cmd several times right so you set it to zero and then you just like"
2418240,2423520," do it like that and at the end we can just do knob cmd free and deallocate all of this stuff in here"
2423520,2430480," so there could be some problems in case of an error for example the command has failed so we do return so"
2430480,2437120," we never reach uh this uh free thing we never reach this three thing so for these kind of situations i"
2437120,2444240," have a uh solution like i have a result variable and at the end like initially i want it to be true right"
2444240,2451440," so initially uh by default this operation never fails it succeeds and i just return result so then for this"
2451440,2459520," specific section i define a defer label right and when something fails when something fails essentially"
2459520,2468000," i say okay the result becomes false the result is false and we just go to defer and i use these two lines"
2468000,2474720," instead of return like every time i want to return in case of an error from the function i just do that"
2475680,2482480," i just do result equal false and just jump there that way i always deallocate the memory no matter"
2482480,2488320," what so the structure of the code stays the same the structure of the code i didn't have to restructure"
2488320,2495360," my code too much it's still if something bad happens return uh but i always ensure that all the necessary"
2495360,2502800," stuff is always delegated so it kind of works similar to defer in go right so essentially this is roughly"
2502800,2509920," what go compiler will just generate for you probably this is my hypothesis uh right but in c we don't"
2509920,2514160," really have that feature so that's why we have to kind of manually generate something that the go compiler"
2514160,2522640," generates for us uh so that's basically how it works uh so and uh yeah every time you need to return"
2522640,2529840," in case of an error you just do that so and this pattern is so much repetitive that i took these two lines"
2530480,2538560," i took these two lines and put them into a macro right i put it into a macro i also wrapped it in do"
2538560,2545120," while so people keep asking me what is do while i keep explaining what is do while but this is needed so"
2545120,2552160," the two statements right so these two lines are two statements but when this macro is expanded they need"
2552160,2558560," to act like a single statement the easiest way to make two lines act like a single statement is actually"
2558560,2564880," wrap them in this blog right you can google up actually if you google up c macro do while you will"
2564880,2570480," instantly find a lot of articles a lot of questions on stackable flow and very thorough explanation of what"
2570480,2578560," that means so the goal of this macro is to make two statements act like one the easiest way to do that"
2578560,2583760," in a standard compliant c without any extensions without any compiler extensions is to wrap it and"
2583760,2592160," do while zero that's it as simple as that so anyway so uh this is such a common pattern that i just"
2592160,2598400," like uh wrapped it in the macro and now what i can do instead of these two things i can do knob return defer"
2598400,2605920," false and it literally looks like return not only um we preserve this structure of the code"
2606560,2612240," it's basically the same code right it's just like we use a different keyword for return"
2612240,2619120," right so essentially it's a different kind of return like it's it's it's the same code as"
2619120,2626000," we defer or without the defer the only exception is that we have to manually uh put all of the deferred code"
2626000,2632720," at the end but it's kind of minor inconvenience it's kind of a minor inconvenience uh right there you go"
2632720,2636960," so and now every time you return out of this function you can be sure that all the memory"
2636960,2640720," that is allocated in here is deallocated automatically so"
2643360,2653040," uh so yes so yes so yes so yes so so yeah that should be basically it and that means we should"
2653040,2658960," be able to just go ahead and compile all of the uh raylib modules our core our audio"
2658960,2664080," okay so there is a couple of warnings in here but let's wait until we all right"
2671120,2674880," we just build all of the all of the objects"
2674880,2679680," there we go here are all the object files"
2679680,2691920," would be nice to detect any accidental return before the defer would be nice to have a proper deferring"
2691920,2702960," like if we had the luxury of having some sort of very easy preprocessor on top of the language uh"
2702960,2707520," i'm not talking about c preprocessor but more powerful preprocessor that can actually do additional"
2707520,2713680," detection why not just have a proper defer then you know what i'm talking about right it's not the"
2713680,2719360," problem that we're trying to solve it's like i don't like this approach i'm doing this approach not"
2719360,2724000," because it's somehow very cool approach and holy everyone should do that it sucks"
2724000,2730720," the fact that i have to do it like that sucks because c is that's the reason why i'm"
2730720,2737760," doing that it sucks and c is right it would be better if we just had defer like and go"
2737760,2745040," and in that case i would be happy right i we don't need half half s solutions right so if we can have a"
2745040,2752240," solution let's just have like a proper solution uh no i'm talking about you know i'm talking about"
2753120,2761120," yeah you know what i'm talking about minor for in the anyways so uh all right so i suppose the only"
2761120,2771040," thing that is left in here is to turn this bunch of o's into a and by a i mean the static library right"
2771040,2776400," so have you guys noticed that um the static libraries so we have a static library for linux here"
2777120,2784960," they are dot a and this is because they are archives so the static library um is essentially"
2784960,2793360," like zipped o files so what the uh unix developers came up with a like long time ago is just like"
2793360,2801520," instead of like shipping several o files they just zip them so and i wonder if i can uh basically do r"
2801520,2809200," uh extract yeah there we go if you just use r and extract so here are all of the o files so this is a"
2809200,2813920," really from the official source this is not the ready that we build it's from the official source and it"
2813920,2819200," contains all the object files that we build by the way so what we have to do we have to kind of reverse"
2819200,2826160," the uh the process but the problem is that i don't know how to to use that so uh you create this"
2826160,2834320," archives with the command line utility called r um so it's to create archives but i'm not sure if anyone"
2834320,2842240," uses in 2023 except for static libraries right these days people just use star or zip or seven zip i feel"
2842240,2849120," like r ended up in a really weird niche where it's only used for it's like specifically static libraries"
2849920,2857040," it's kind of a weird niche but it somehow ended up there so sometimes shit happens right so it used"
2857040,2863760," to be an inner copy utility now it's a utility for creating static uh static libraries to be fair"
2863760,2871680," i don't know how to do that uh r creates uh library from all object files right so you have to provide"
2871680,2876720," some sort of like a flex in there how to use linux r command to create static libraries okay so let's"
2876720,2885280," actually find holy that's a huge thumbnail huge ass thumbnail gcc we're almost there i can feel it there"
2885280,2893040," you go so this is what you have to do so i'm going to just copy paste this entire thing uh and uh where"
2893040,2902960," is the knob.c so this is the command that we have to call in here so um i can do cmd count equal to zero and"
2902960,2911360," can just do knob cmd append cmdr then i have to provide these things i don't really know what"
2911360,2916640," they mean but whatever and the next thing i have to provide i have to provide the name of the library"
2916640,2924480," so i suppose i'll keep it in the same folder as the rest of the objects right so this is going to be there"
2924480,2932080," and then lib raylib.a there we go so and then we have to provide object files so that means we need to"
2932080,2938560," organize yet another loop right so we'll need to organize yet another loop we're going to be iterating"
2938560,2949280," all the arraylib modules so here are raylib modules and as we iterate them so i suppose we'll need to"
2950880,2958560," yeah we need to construct all files but all files this time actually are input uh input paths so what"
2958560,2967200," i'm going to do is do uh input path set to zero then this is going to be build raylib"
2967200,2978240," then this thing then all and then null and what we can do is simply oh this one is tricky"
2979440,2988800," we actually have to retain the data in input path dot count for longer than single iteration so but"
2988800,2994560," we are overriding it over and over again so this is not going to work i think i have a solution for"
2994560,3004240," that uh in node.h there is a function temp str dupe uh right which basically duplicates uh which basically"
3004240,3010960," duplicates the string so essentially we can do input path items right input path items"
3010960,3020000," and that basically allocates memory in a temporary allocator and just puts that thing there just puts"
3020000,3029760," that thing there and that string is going to live for as long as you not run tmp reset right so essentially"
3030720,3035680," um as soon as you do tmp reset everything you allocated in that temporary allocator uh is going"
3035680,3042240," to be wiped out right it is going to be wiped out so and it's actually very you know familiar concept for"
3042240,3047440," people who watch my streams right so i suppose i learned that concept for the first time from jai"
3047440,3053280," right so at least that's the first time i saw that concept but if i understand correctly that kind of"
3053280,3060480," concept of temporary allocator uh was a thing for game developers for quite some time and it's actually"
3060480,3067520," very useful not only for game developments right it's just like generally useful um all right so and this"
3067520,3073760," is what we're going to use in this specific case so i'm going to do nope cmd append uh cmd i'm going to"
3073760,3080240," just append this entire thing uh and after that what we have to do we have to just run uh this command"
3080960,3088000," and that's gonna be it i suppose that is going to be it minor throwing the minor throwing this so we"
3088000,3095360," are rebuilding ready we are rebuilding array leap so there's some warnings i really like i don't know"
3095360,3104000," what the fuck are those warnings so const char star to parameter just out okay that's fine okay so file"
3104560,3113680," file name is what it is const char okay so it is const char but this function accepts char star uh and"
3113680,3117760," it's something from third party dependency okay so i'm going to just try to search it in here"
3117760,3126720," uh right so yeah why does it accept char not by constant pointer so and this is called not created by"
3127360,3134480," ray san right so it's a third party dependency so let's take a look like does this thing modify path"
3134480,3141760," in any way it doesn't it doesn't modify path in any way but they just decided to"
3141760,3145440," not post const because const meh i suppose"
3145440,3152720," but i mean at least for the documentation purposes that would be nice right um okay"
3154960,3162960," uh c developers i swear to god god damn c developers uh anyways so i suppose yeah did we manage to"
3162960,3168800," actually build uh the entire thing i got distracted i got distracted by the warning so let's actually see"
3168800,3174480," if we manage to build anything so we'll have to wait a little bit more we have to wait a little bit more"
3175760,3184480," um okay so we're just building all the o files i'm building all the o files okay so the r command"
3184480,3195040," succeeded hopefully so let's actually see if it um if it created the oh there we go so we just created the"
3195040,3201920," static lip thingy but i mean it's not that hard right it's it's not that hard to create something like this"
3201920,3208480," because um the real shit happens when you try to link this library with your or with your project"
3208480,3214320," and you find out that you also have to link with a lot of other stuff like jlfw for instance so i'm"
3214320,3221040," pretty sure we'll have to build jlw uh from scratch as well so we already spent like one hour we'll be able"
3221040,3227040," to ping jlw we'll see right so i think we will be able to just copy paste a little bit of the code that"
3227040,3234480," we already developed so i think that should be fine so you know what we can do now we can go into uh build"
3234480,3244400," mutualizer and we can go to the build to the postex builds built without hot reloading and just try to link"
3244400,3251360," it with our raylib rather than the one that comes from ray san i think that's going to be interesting"
3251360,3258480," so essentially we're going to use the includes from uh raylib source code uh right so do we have stuff in"
3258480,3267440," here so do we have a sort of like include thingy so is there any includes okay so let me let me find where"
3268160,3277840," the file name raylib.h is located so raylib.h where is it located okay it's located right in src so i"
3277840,3285920," suppose there is no include folder so what i can do is just like use src and for linking the lib we're"
3285920,3294320," going to use build raylib right exactly where we build all of that and let's just go ahead and try to"
3294320,3302080," build the whole thing and see if it's going to go oh we have to rebuild can we speed up the build of"
3302080,3311280," raylib like ideally we probably want to um ideally we probably want to cache the entire build you know"
3311280,3315280," what i'm talking about like cache the entire build but it's going to take some time i don't really know"
3315280,3322080," how exactly i want to do that uh so we probably want to speed it up the way we can speed up by the way"
3322640,3326720," the way we can speed that up is doing that in parallel"
3326720,3334640," chat yeah so remember how at the beginning of the stream uh i said that you have two options to run"
3334640,3343040," the command cmd run synchronously yeah there we go here it is uh uh so we are running this thing"
3343040,3347680," synchronously what if we create separate thread on each individual object file"
3349680,3353040," that's actually very interesting so let me see so what if we had"
3353040,3360640," we need a structure for dynamic array of procs right so procs let's let's literally call it procs"
3360640,3370560," so this is going to proc items uh count capacity uh and this is where we're going to have the procs"
3372320,3378960," cool and now look uh instead of running it synchronously we have to run it as asynchronously"
3378960,3384320," uh and we're going to put it like this so this is going to be proc but the thing about proc by the"
3384320,3392160," way is that it may fail it still may fail so and essentially what we have to do is uh check whether"
3392160,3400800," it's invalid proc or not so proc um i think i think it's something like this just a second knob uh invalid"
3400800,3407440," yeah invalid proc so as you can see the different it's different depending on the uh on the platform"
3407440,3411360," right so on windows it's going to be just new because it's a handle and handle if i remember"
3411360,3416960," correctly just like some sort of a pointer or not but maybe maybe it's a number uh but i mean pointer"
3416960,3422960," is a number so who keeps and on linux on postex specifically we use minus one because zero could"
3422960,3430880," be a valid process well i mean technically technically it couldn't be not so even even the"
3430880,3435600," you need process well what's the ideal we need process i don't think i remember it's usually one"
3435600,3445680," isn't it right so the init process is usually one so there should there could be no process with id zero"
3445680,3448560," why the do i have this like that then"
3448560,3455440," so i could have just like said okay invalid process is always zero"
3456800,3459600," damn i'm dumb anyway"
3459600,3467760," oh and on windows okay so that's actually very cool on windows the invalid handle value is minus one as"
3467760,3473760," well okay i guess i'm in it but i mean it's a this entire thing is not finished right this entire"
3473760,3479280," thing is not finished so yeah we can change it in the future so that means i don't have to worry about"
3479280,3482400," it uh yep anyway"
3482400,3490640," so let me let me see so but that doesn't really change anything to be fair right so the code that"
3490640,3494160," uses this entire stuff is not going to change right if it's an invalid procedure"
3497680,3508160," to be fair to be fair what if we manage to run uh what if we manage to run uh several processes but"
3508160,3515600," then failed uh halfway through how do we handle this kind of situation how do we handle this kind of"
3515600,3525200," situation uh i think yeah essentially what we can do we can not care whether this entire thing was"
3525200,3534000," successful or not we can simply not care uh what we're gonna do we're gonna just append knob da append"
3534000,3541200," uh what is it yeah procs proc we just append all of these things in here"
3541200,3546720," and we're gonna iterate through all of the procs that we managed to run in here so"
3546720,3553760," and we have to keep in mind that procs may contain invalid uh ids right so some of the procs could be"
3553760,3558560," invalid so that's the thing uh we're gonna be iterating through all of these procs in here"
3558560,3563600," uh so this is gonna be count plus plus i and we're gonna simply wait uh on them"
3563600,3573520," same view i think it's proc wait so procs items i so and of course waiting can fail waiting can actually"
3573520,3582560," fail and in that case we just do return false to indicate that something went wrong so that means if since"
3582560,3591040," since some of these processes can be invalid uh not proc wait should handle invalid ids"
3591040,3595040," it should handle invalid ids and how is it going to handle the invalid ids"
3595040,3604400," that's an interesting question um it should probably return false and log that the id was invalid or"
3604400,3609120," something i think that's a reasonable thing to to do in that specific case but i do not remember if it actually"
3609120,3617600," handles that it doesn't look at that it doesn't handle that uh right so on windows it straight up just"
3617600,3624000," tries to wait for the process to finish on linux it also just tries to wait so one of the things we can"
3624000,3634000," do in here so is if proc is equal knob invalid proc we just return false simply return false and um do we"
3634000,3641040," use different here we don't use different here i'm gonna just log uh something knob error"
3642560,3647440," uh right uh try it um can can we just"
3647440,3655600," it's hard to say i feel like if an invalid proc ended up in here"
3655600,3663760," the reason of process being invalid already locked somewhere right because how do we create a thing so"
3663760,3673040," run asynchronously uh right so this is how we create run asynchronously uh when we return false we always"
3673040,3680480," yeah we always log something something is always locked and because of that i feel like additional"
3680480,3687040," logging is not particularly needed here right so the only thing we have to just do is return false or"
3687040,3695040," whatever um right and to be fair returning false out of this thing right away is kind of a"
3695040,3702480," useless thing to do we need to go through all of them and make sure all of them um finished executing"
3702480,3709120," that's what we need to do so because of that what i'm thinking is that um we can have something like this"
3709120,3723040," failed uh maybe success true and essentially just do something like that success equals success and yeah"
3723040,3729040," there we go so essentially if even if there are some things that are invalid in there even if there"
3729040,3735520," are some things that are invalid in here i think it will work right and then if this thing didn't succeed"
3736080,3743680," only then uh we return out of that i think that's the most reasonable way to handle all of that right"
3743680,3748960," so we run all the processes uh as much as we can and then we wait for all of them even something"
3748960,3754000," failed and here if something failed only then we return all of that okay let's see if it's going to"
3754000,3761600," speed up the ex the build over adip it doesn't even compile so it's a knob proc okay i'm really sorry"
3762240,3771600," uh so it's a knob procs and what else uh well oh it's not inside of here this one is just procs then"
3771600,3779680," all right okay it ran all of them simultaneously and"
3785280,3793760," okay that seems all right i suppose so and it still has a little bit of a problem with dl open so"
3793760,3800720," maybe this is because i'm doing static builds uh so let me try to not do this static build where is"
3800720,3806640," uh post six okay so here's the post let's not do static for now let's just do a regular one"
3807360,3812240," uh let's rebuild everything so yeah we are building each individual unit in a separate thread"
3812240,3827040," uh so and everything seems to be working fine wait a second why why didn't i have to link with jlfw"
3827040,3836960," like so does this thing work wait wait wait um i don't understand um"
3836960,3841360," uh so where is the pcm"
3841360,3850080," okay so there's music let's put some pilot reds on it works"
3851200,3863120," look at that"
3863120,3876480," that's actually so cool where is the where is the humming noise remember when we first try first time"
3876480,3879920," try to do that there was some sort of humming noise it went away i didn't fix anything"
3879920,3882720," that's actually weird"
3882720,3898480," so you know what's interesting is that when i'm speaking when i'm speaking look at these frequencies"
3898480,3902400," guess what these frequencies are responsible for"
3905840,3911680," when i'm speaking when i'm speaking when i'm speaking it's so funny that you can literally see when i'm saying s"
3911680,3914000," ass"
3914000,3916560," ass"
3916560,3919520," ass"
3919520,3924160," that's actually funny so"
3924160,3934080," all right uh that's a mystery"
3935840,3940480," how does this shit work excuse me at which point"
3940480,3943680," does it what does it do"
3956560,3957680," no fucking way"
3957680,3961760," no fuck don't fucking tell"
3961760,3964880," really"
3964880,3972640," i need to fucking see that r"
3972640,3973200," glfw"
3973200,3983440," it fucking includes the entirety of glfw holy shit this is such a five head move"
3985680,3992320," i didn't have to build glfw separately because glfw is literally included in raylib in its"
3992320,3999280," entirety on the level of a source code the entirety of glfw literally included in raylib"
3999280,4002480," holy fuck rayson like"
4002480,4006320," i didn't fucking expect that like i would"
4008080,4009200," that solves"
4009200,4013280," that solves like a whole class of problem of dependencies"
4013280,4020800," because like i was even fucking expecting that i will have to deal with this bullshit but"
4020800,4025600," yeah holy fuck wait so to build"
4029600,4036800," to build raylib to build raylib what you have to do you just have to build a bunch of its modules"
4036800,4040000," just like that you just compile its"
4040000,4046400," eight modules and you just link them together and that is it that's the entirety of the build"
4046960,4058800," yet yet the raylib includes shut ton of different build tools c make zig make file like holy"
4058800,4063600," fucking shit but yet the actual build is that simple"
4063600,4067280," i think i know why"
4069840,4077360," because raysan is not only very experienced developer is actually actually very wise person"
4077360,4087520," is actually very wise person he knows that explaining that to an average programmer is pointless"
4088640,4093920," he knows that explaining that you don't need c make zig or anything it's pointless to even talk to them"
4093920,4099920," let's just let's just let them do their thing okay here's all of your toys yeah yeah"
4099920,4106560," contribute c make yeah zig yeah contribute all yeah yeah yeah just just do whatever you like to do guys"
4106560,4112160," whatever you like to do but the actual build is that fucking simple oh man"
4113920,4120800," i wish i wish i was that based holy fucking shit because i like i'm very intolerant to the to to"
4120800,4126640," bullshit and stuff like that but he just embraced the bullshit like yeah yeah whatever whatever guys you"
4126640,4132880," do you you do you guys oh i absolutely love that"
4138000,4138880," i'm a huge fan"
4138880,4148160," that's so that's so cool i i love that it's just like so funny"
4148160,4154160," yeah just let people cook let's just let people do their thing"
4154160,4158960," man i have a thing or two to learn from raysan i swear to god"
4158960,4167920," uh that's that it that's it i guess that's it so we also need to do a windows build actually"
4168640,4177680," we need to do a windows build so but i suspect the windows build is as straightforward as linux build"
4177680,4187360," so in that case we can just include only like the source code uh so what's the size of the of raylib"
4187360,4196080," let me see uh so that's that's a huge one so but we don't really need everything in here so can we have"
4196080,4201120," like an only source code so what's gonna be the source code that that's a huge difference well"
4201120,4208080," so yeah i feel like we will only need to include the source code and even"
4208080,4214080," with the source code i don't think everything is needed here except maybe raylib icon"
4214080,4221760," do we really need raylib icon and i suppose it's only for like dll it says raylib dll uh i don't plan to"
4221760,4229760," have dll on windows except for the purpose of hot reloading so we'll see we'll see so the only thing"
4229760,4235360," we need is c files in here and all of the externals all of the external externals here are important"
4235920,4242080," and that's basically it and that's basically it so let me let me see"
4249040,4252640," people are making already allegations that i'm funded by big raylib"
4252640,4263920," so i mean it's a genuinely good piece of software right it is in fact a genuinely"
4263920,4270000," good piece of software i'm not being funded by big raylib or anything like that i don't get anything from"
4270000,4279600," what i do actually uh i get a little bit but don't tell it so i have a check check the donate command"
4279600,4287120," but don't tell it just check the domain command okay all right so um yeah"
4287120,4296000," what we need to do we need to make a small break because i ran out of t i ran out of t uh"
4296000,4302080," and uh then we need to do a windows build right we need to do a window so let's go ahead and do that"
4302080,4309920," um all right let's try to build that choice for windows as well how about that so how we're going"
4309920,4317920," to do that uh we already accept the configuration uh of the build in the build raylib right as you can"
4317920,4324320," see here the configuration and we already know uh the platform for which we're building stuff so now"
4324320,4330080," we can just get rid of this check which checks that only postex platform is allowed and essentially what"
4330080,4336560," we can try to do um i i suppose the only difference that we're going to have is the compiler because we're"
4336560,4343520," cross-compiling with mingw uh so essentially what we can do in here we can just do a switch on the config"
4343520,4351920," target right so this is going to be config target and if the target is um posix right in case of a posix"
4351920,4360160," so we're going to simply uh do the clang uh right so this has to be break otherwise if it's windows"
4360160,4367680," win32 somebody told me in the in the discord that i'm calling my target win32 but i'm actually building for"
4367680,4377360," win36 um 64 um for win64 so this is something that i'll have to fix uh but i'm too lazy to do it right"
4377360,4391840," now so the compiler that we have to call is called x86 64 w64 mingw32 gcc"
4394880,4403840," i still can't get over this naming like holy shit anyway and uh if it's default we're going to say"
4403840,4412480," this is unreachable all right so this is unreachable there we go so yeah let's go ahead and just try to"
4412480,4417680," do that i'm gonna take a look at the configuration i'm going to set the configuration so i'm going to set"
4417680,4425840," it to uh win32 right so the the target is win32 and we're going to try to build this thing now as you"
4425840,4432880," can see we're building everything in here right so and we're using that weird compiler so far it seems to"
4432880,4441040," be working uh right so x80 where is it x86 yeah there we go so here it is here it is"
4441040,4448000," uh all right and we okay we managed to build it wait"
4448000,4452160," it just freaking worked"
4454640,4463280," it just freaking worked so we can just compile raylib from scratch from source code and it will just"
4463280,4466320," work and we can just ship the source code with the source code of radio"
4466320,4471360," this is based this is the most based library i've ever seen in my entire life"
4471360,4477600," right so yeah we don't need any of that stuff like just to remove all of this stuff"
4477920,4483200," so why we can build it from scratch ourselves it's not that big of a deal so we only need"
4483200,4489200," source code source code is is the only thing you need source code is the only thing you need"
4489200,4501600," so but in the main build in the build of the executable uh x86 64 we're not really using"
4501600,4507440," the source code the the really from source code we're still using that binary thing so we have to update"
4507440,4518640," it uh so let me find uh this thing so this is windows where is possex so in the possex we're using this"
4518640,4521520," as the include path right so this is the include path"
4521520,4532000," and the library path the library path leads to the build right it leads to the build"
4536240,4540400," you know what there is a little bit of a problem"
4540400,4549040," we put all of these things into the same place regardless of the target platform"
4549040,4554160," so that raises the question is this file targeting windows or linux"
4554160,4565680," i don't know so and because we're using midgw the libraries in for windows look the same as the look for"
4565680,4570720," for linux so that's kind of a problem in here i have a feeling that depending on the platform"
4570720,4579440," we may want to like separate this into like possex right so here we can have possex and then we can have"
4579440,4586880," win32 uh and stuff like that but to be fair maybe that separation has to be made like on a higher level"
4587440,4595120," right on even a higher level right so maybe like possex and like all of that stuff all of this stuff goes"
4595120,4603040," here all of this stuff goes here and then uh win32 all of that stuff goes here right so maybe that's how"
4603040,4607920," it has to be separated and this is like a global build which defines the current target and this is"
4607920,4614640," one of the targets that's a very interesting approach i think that's a very interesting approach"
4614640,4624000," but i think i'm not yeah i'm not really sure how exactly i'm going to be approaching that so but like"
4624000,4631360," global uh folder for different sort of targets i think it does make sense i think it does make sense but"
4631360,4637360," it will require more refactoring than i want to do on the stream right now so maybe for now"
4637360,4644080," we're going to just leave it as it is so as i already said there is a little bit of a problem"
4644080,4650160," there is a little bit of a problem rebuilding the whole project became extremely slower like look at that"
4651680,4658560," we have to build like the entirety of rally before we can build mutualizer and if i make any changes uh"
4658560,4661440," to test them i have to rebuild ray deep over and over again"
4661440,4672400," that's that's not bueno that is not bueno we want to be able to cache the build of rally"
4672400,4680160," uh and um so interestingly enough we already have a mechanism to do that believe it or not"
4680960,4686400," we already have a mechanism to do that so essentially uh this is the source code of the"
4686400,4694800," build tool if i modify something in here so i would say uh log and i say hello world"
4694800,4703600," like so and let's actually log it as an info and then i'm gonna basically exit out of this entire thing"
4703600,4709600," and if i try to do knob build it automatically rebuilds the entire thing"
4710160,4717040," if i run it again it doesn't rebuild anything it only rebuilds when this thing is modified"
4717040,4722640," how does it know that it was modified"
4722640,4734000," how does it know that it uses a very interesting function um so"
4735520,4743280," there is a function knob go rebuild yourself right and we call this macro it's not a function it's macro"
4743280,4748880," we call this function at the top of the build right so this is the first thing that is executed"
4748880,4754400," this is the first thing that is executed and what it does it takes the name of the source code the"
4754400,4760880," current file it literally takes the current file and the path to the binary so which is basically the"
4760880,4767600," the zeroes element of the arc v so it takes the binary and the source code from which that binary was compiled"
4767600,4773920," that's very important two things source code and the corresponding binary and then it calls a very"
4773920,4781040," interesting function is path one modified after path two and path one is the source code in binary path in"
4781040,4789680," the second path two is a binary path essentially if the time stamp of source is bigger than the time"
4789680,4797280," source time step of binary path that means the source path was modified after binary path and that's the"
4797280,4807280," the indication to recompile the entire script furthermore this is literally how make file knows when to"
4807280,4813600," recompile translation means so if you ever used make file you probably noticed that it only tries to"
4813600,4820480," recompile the things that you modified and it somehow knows what you modify so in make file uh there is the"
4820480,4826960," following paradigm so make file is a sequence of instructions so you supply the target the thing"
4826960,4835760," that you want to compile and a list of dependencies for that target so you say that to create this file"
4835760,4844640," you need this this and this and then you have a sequence of commands sequence of commands like a command that"
4844640,4854000," uses these dependencies this that uses these dependencies to produce the target so that's"
4854000,4862880," basically the paradigm of make file what make file does it literally does call a similar function it checks"
4862880,4871840," is the one of the dependencies modified after the target and if it does it just calls this command if"
4871840,4877440," not it never calls this command that's literally how make file works i'm pretty sure that's literally"
4877440,4884640," how majority of the build system works but that's the magic that they do that's the magic um"
4884640,4891440," source path may not be correct if some user moves the executable"
4891440,4896320," yes so and the same shit can happen with make file the same shit can happen with cmake"
4897600,4903920," so it's a this approach is a good enough approximation of knowing that something is"
4903920,4907920," modified we're not trying to be super precise we're not computing the hashes or anything like that it's"
4907920,4914080," just like the ratio between the quality of this approach and the price of this approach is actually quite"
4914080,4920640," good right it's not perfect but it's super easy to implement so it's so fucking easy we can even forgive"
4920640,4934080," it to be imperfect so um maybe modern build tools actually do some extra stuff i don't really know"
4934080,4941040," but the old build tools like make file i'm pretty sure ninja also do they do something similar right"
4942240,4948800," they do something similar uh so and that means we already have a mechanism to uh to check for this"
4948800,4955520," kind of stuff and we can use it right so in our case uh what's the source code and what's the the"
4955520,4961360," binary path we can actually quite easy to find out so essentially yeah"
4963680,4971760," we already have input path and output path path so we have a source and the dependency right so we can"
4971760,4986560," just take input path items and output path items and if only then do that so maybe we can yeah we can do"
4986560,4994480," something like this uh and we actually append it to yeah we can actually do that asynchronously yeah"
4994480,4999040," i think that should work actually i think that should work so also"
4999040,5011600," yeah i'm gonna know how to indent that super quick uh all right so this is works but this works only when"
5011600,5019200," we're compiling all files out of c files right we may actually do a similar thing for uh final"
5019200,5026720," libc but maybe not maybe constructing like a final libc is such a uh lightweight operation that we don't"
5026720,5031440," really want to cache it maybe we want to only cache this specific thing yeah that sounds reasonable"
5031440,5036960," actually what if we cache only this thing oh and i don't remember if this function handles um"
5038240,5045520," non-existing files um so i think it doesn't i think it literally doesn't we need to read the"
5045520,5053680," implementation of this thing right so yeah yeah okay so if it does if the file doesn't exist it will"
5053680,5061680," return an error okay there is three possible outcomes of this function uh zero which is false one if true"
5062240,5069840," and minus one when something bad happens when the file doesn't exist so that means we want to"
5069840,5076960," actually rebuild when it's true and it doesn't exist"
5076960,5083840," that is perfect that is accidentally that will work actually"
5086160,5096560," because minus ones is truthy right we want to rebuild in case of true and when there is an error"
5096560,5101680," in case of true it's one in case of an error it's minus one and minus one is truthy so it works perfectly"
5101680,5109760," for checking if you want to rebuild uh error equals success exactly error equals success operation failed"
5109760,5116800," successfully uh like i didn't mean to be like that but it just worked out uh that's actually perfect"
5116800,5124320," so in case of an error i think it will still log an error yeah it will still log an error but maybe"
5124320,5130000," that's fine okay let's let's try to see uh if it's going to work or not so i'm going to just try to be"
5130000,5136080," listen to i think oh of course i did this full bar stuff uh right so this is going to do that let's"
5136080,5144800," remove this and uh okay this just worked it didn't rebuild a single thing in here"
5144800,5154000," so the only thing it rebuilds it rebuilds the um the a file out of the o files but that's a very"
5154000,5159760," lightweight operation so i don't see any point in caching it we could cache it sure so but"
5159760,5164640," the cache like caching it would require iterating through all of the o files and checking whether"
5164640,5169520," we need to rebuild and stuff like that i don't think it's worth it right so this operation could"
5169520,5175360," be done like several times i think that's fine but building all files is something that we do"
5175360,5179840," want to cache so let's actually see if it works correctly if we remove the build uh right so i'm"
5179840,5185200," going to do the config and after that i'm going to try to build this entire thing okay so we are"
5185200,5189520," rebuilding all these things and as already said um this thing says could not"
5189520,5196480," stat no such file or directory and this is a little bit concerning even though it works accidentally"
5196480,5202240," all of that works accidentally it still produces very scary log messages that the user may not like"
5202240,5206800," and personally i don't like i do not like that either right even though these messages are okay"
5206800,5213760," they just look a bit scary they just look a bit scared uh so this thing compiled and the cool thing"
5213760,5216800," is that if i try to run it one more time it didn't rebuild the ray leap"
5216800,5226480," that's just perfect right so we already have the mechanism similar to make files we can cache the"
5226480,5232720," the artifact that we build but but we can cache them selectively right we can cache them selectively"
5232720,5239040," which is something good in my opinion right because the problem with make file is just caches everything"
5239040,5244640," literally everything when even when it's not really needed and even when it can be harmful because it"
5244640,5251280," may cache things and you may try modifies thing and it's not going to modify so really the build of"
5251280,5256880," ray leap is something that you really want a hundred percent cache because in majority of the cases while i'm"
5256880,5262560," developing mutualizer i don't plan to modify really i just want to compile it once and forget about it"
5262560,5270160," right so i may compile it once in a while but generally i do not plan to recompile it all the time"
5270160,5278640," so yeah and being able to selectively say okay cache that but do not cache that is actually very cool"
5278640,5284560," it is actually very cool i think i think it's i think i like it right i already like this thing"
5284560,5292080," better than simi well i mean that was not very high bar but anyway um so yeah"
5292080,5300960," what i want to do so we need to do something about the logging the logging is scary the logging is scary"
5300960,5308800," and uh moreover i put new lines in logs in here which is not needed which created these ugly empty lines"
5308800,5313680," that you may have noticed uh in the previous build i mean i already fixed it so you probably won't be able"
5313680,5318880," to notice but whatever so what we're going to want to do in this specific case we can make it a warning"
5318880,5329760," we could make it a warning sure um it's not that big of a deal is it going to make it better is it"
5329760,5337120," going to make it better uh it didn't really oh okay so we didn't rebuild it so let me try to maybe touch"
5338560,5345520," see to sort of emulate that it's modified uh yeah there we go so now it is warning"
5345520,5350320," but even though it is warning it's still a little bit scary could not stat"
5350320,5354240," no such file or directory so i feel like"
5354240,5362960," not logging that stuff at all is way better i think not logging that stuff at all is way better"
5364080,5371040," uh what i'm thinking uh what i'm thinking we need to rename this we need to change the purpose of this"
5371040,5379920," entire function um this function should not tell you where the path one is modified after path two"
5380560,5384400," this function should tell you whether a file needs to be rebuilt"
5384400,5398240," needs rebuild needs rebuild and uh here we have so this is the source one so i don't quite remember"
5398240,5402080," which is the first one which is the target and which is the dependency for some reason"
5402800,5413920," so okay so okay so this is the this is the input path so path one is the input and path two is the output"
5413920,5423600," so maybe i want to do something like this query place path one input path boom and path two"
5425120,5434640," path two is going to be output path boom right and essentially in case of some file not existing"
5434640,5442640," it's always going to return true but we have to be 100 sure that uh the the failure of opening"
5442640,5448160," the file is because the file does not exist maybe the file is actually a directory but i mean"
5449600,5457840," i already know right does it always return you fail when it doesn't exist right what kind of errors stat"
5457840,5463200," may return what kind of other like errors it may return so let's actually find out so this is going to"
5463200,5471760," be stat uh two right so this is a stat two uh and what kind of errors so you may not have a permission"
5471760,5481200," access so maybe the file descriptor is wrong uh yeah and i suppose no entry a component path does not"
5481200,5490960," exist uh-huh so we want to say true only in case of non-existing file in case of the rest of the problems"
5490960,5495760," we want to say yeah there was some sort of a problem so you probably want to do something about that"
5499040,5507200," so how can we uh how can we approach that we can essentially"
5507200,5521920," say if this thing failed error no equal to no entry just return one just return one um and in case"
5521920,5528720," like if it's something else log that as an error and the same goes here right so essentially"
5529040,5535680," in case of a no entry we just don't log that error at all right we just don't log that error at all"
5535680,5540240," this is an expected behavior for the function that checks whether something needs to be revealed"
5540240,5546240," we're not just comparing times we changed the semantic of the function now it checks for the rebuild"
5546240,5552800," and the lack of a file is something uh is one of the conditions that you when you want to rebuild"
5553600,5558640," so in case of the windows in case of with the windows it's a little bit more complicated"
5558640,5568720," um so let me take a look create file right so uh create file can you just give me okay create file"
5568720,5577520," uh maybe i should use the a version of the windows api because there i heard that there's two versions of"
5577520,5583680," windows api the a and w so the white characters and the ascii characters and the fact that i'm using"
5583680,5589360," this kind of thing is kind of dangerous because the version actually depends on how you compile or"
5589360,5599280," something like that um right so create a and i suppose in case of an error i'm sorry for flash banging you"
5599280,5606080," so create always um all right so the functions last error set uh already exists"
5606080,5619520," so is there any list of of of errors that may happen in case of this stuff so create a file generic with"
5619520,5628480," open existing uh open existing and i'm pretty sure aha that's what i'm talking about open the file device"
5628480,5637360," only if it exists aha so error file not found that's perfect actually so if get last error equal to that"
5637360,5642880," return it's kind of a similar situation it's kind of a similar situation on windows like the code is"
5642880,5650240," literally symmetrical uh the code is literally symmetrical so yeah that's that's good i like that"
5652080,5659760," so let me uh try to rebuild this entire stuff so it does not complain i'm going to just remove the ray"
5659760,5666480," leap and try to rebuild it from scratch one more time and uh see what is going to happen so oh yeah it"
5666480,5674480," i didn't get that didn't rebuild everything so just seconds i need to do touch"
5674480,5679920," hopefully that will rebuild that huh"
5679920,5689360," that didn't help no search file or directory so the stat didn't return that what's that returned actually"
5689360,5695040," actually did i use a wrong uh i think i used the wrong thing"
5695040,5698800," i attached the wrong file yeah thank you"
5698800,5707920," yeah i'm already getting tired so oh now we're talking okay so we have an error that i renamed the"
5707920,5714320," function but i forgot to rename it everywhere uh so this function already called different i can query"
5714320,5725120," replace properly replace that with knob needs rebuild boom boom might as well just align everything like"
5725120,5733840," this and inside of the knob.c i also want to do a thing like this yeah knob needs rebuild so this is the"
5733840,5743600," input and this is the output uh-huh but that didn't solve the problem all right so let's try to do that one"
5743600,5750000," one more time and you can see everything's fine that's pretty pollers that's very very pollers i think"
5750000,5754720," uh and one of the things we can try to do"
5754720,5762640," we can try to maybe modify the permissions uh so what if i do core minus r"
5762640,5767040," okay so i removed the read permissions"
5769040,5775760," is it gonna uh yeah i think stat is not going to work if you don't have a read permissions"
5775760,5780880," i think stat is not going to work so let's find out so what i want to see is that if there is"
5780880,5786480," an a different error why it cannot open it it should report that right so it should report that in this"
5786480,5795200," specific case uh okay oh we didn't care actually all right it's only r that failed okay apparently you"
5795200,5800160," can start a thing even if you don't have a read permission on that thing which i guess makes"
5800160,5808400," sense okay it makes sense sure um i don't know how to test that to be fair so in which case stat may fail"
5808960,5821360," so bad address too many symbolic link search permission is denied for one of the directories in the path"
5822400,5828960," um no memory component of the path prefix is not the directory there's not that many things that may"
5828960,5837200," happen in here right so access for one of the directors in the path prefix so essentially"
5837200,5848160," yeah we can deny the permission in build all right that's one of the things we can do um right so we"
5848160,5854000," can do ch mod minus r so we can't read that folder i can't even open it as you can see permission denied"
5854000,5859120," so and let's see if i can build this thing afterwards um"
5859120,5861600," yeah"
5861600,5874560," nah can't really test it properly uh there is e perm there is e perm sure but where it is in documentation"
5874560,5882320," where it is in documentation uh i don't see e perm in the condition so it's not something that may happen"
5882320,5890560," okay so can i now delete this entire thing uh okay permission i can't even delete this anymore right"
5890560,5900480," uh so let me let me see okay i will probably have to use the root but can i do rf build because i own this"
5900480,5905520," thing uh i can't do that okay"
5905520,5905760," okay"
5905760,5915840," so i suppose uh i suppose the only thing that is left to test is windows right so let's try to"
5915840,5921440," test the windows win32 and uh let's go ahead and build the entire thing"
5927040,5931280," so it's going to take some time windows is a little bit uh slower for whatever reason maybe"
5931280,5937280," because it's um i wouldn't say emulated because wine is not an emulator but i mean we're not using wine"
5937280,5943760," in here so it's just mean gw slower for whatever reason uh okay and now i can try to reboot one more"
5943760,5952240," time and it worked so that thing works even on windows perfect that's absolutely perfect i'm actually super"
5952240,5958960," happy so uh like all of the dependencies now come with uh the source code of mutualizer and the"
5958960,5965360," dupe process actually handles all of that and we're not depending on it like a separate third-party tool"
5965360,5970640," or anything like that and it's just like yeah um to be fair half of that achievement is actually"
5970640,5979040," ready to be ready to be structured in a way where it is possible and that is super cool that is super cool"
5979040,5988400," so yeah uh i think this is going to be the last uh knob string that we do in a scope of mutualizer"
5988400,5994000," because i think i got the build system to the point where i'm happy with it soon i'm gonna make a"
5995040,6001440," basically commit that removes this sh scripts i also need to test how all that works on real windows"
6001440,6009280," and possibly with microsoft visual studio building that with microsoft visual studio is going to be"
6009280,6018960," super fun yeah because we could utilize the legendary piece of code by jonathan blow do you guys know what i'm"
6018960,6027520," talking about do we have people who know what i'm talking about right so basically find msvc path"
6027520,6040320," i think maybe maybe google knows yeah microsoft craziness uh can i do microsoft craziness"
6042640,6049280," crazy yeah jonathan blows c++ code for finding microsoft visual studio so essentially what this"
6049280,6058560," piece of code does um so it essentially goes through the registers and stuff like that and like tries to"
6058560,6065680," find the installation of microsoft visual studio and gives you the path the bin pattern the the compiler"
6065680,6071520," path and the linker path i think um right so and that's the code this is how much code you need to"
6071520,6074720," write to find microsoft visual studio in c at least"
6074720,6080320," so for anyone who's interested i'm going to actually put it in here so"
6080320,6089600," so you because of that usually what people do they use the environment batch script right so they use"
6089600,6094720," an iron batch script so microsoft visual studio comes with a patch script that just just starts cmd"
6094720,6100640," and within that cmd you have just cl available for you and linker and stuff like that uh but that is that"
6100640,6110320," fucking sucks for um for the usability that sucks for the usability and so that's why something like"
6110320,6118800," this is a little bit better um right so i think i'm gonna put that stuff to uh to the description for"
6118800,6127440," anyone who's interested so yeah so it's gonna be in the description as well uh and that would be fun i think"
6127440,6136160," i think jai uh i think jai uh i think jai has a similar function i think it does right so i remember"
6136160,6147600," seeing it i remember seeing it seeing it in build cpp right when you build cpp and you are on windows one of the things we do"
6147600,6156400," uh um microsoft i don't remember so cl.exe okay so that's one of the things we do"
6156400,6164240," find visual studio in a ridiculously ridiculous garbage way right this is a function from the standard"
6164240,6170320," library of jai this is a function from a standard library of jai so let me we can even try to find the"
6170320,6174000," implementation of this thing right so"
6174000,6181200," so it's basically i suppose it's basically that code"
6181200,6188720," but uh ported to jai okay so window resources uh so it's using this com"
6188720,6194800," api that i absolutely despise but yeah it's a little bit easy to implement something like that in jai because"
6194800,6200240," you literally have defer uh right so you literally have defer so it's a little bit easier to manage the"
6200240,6208640," resources and stuff like that but yeah it's doing some stuff yeah okay there's different versions of"
6208640,6213280," microsoft visual studio that you may have we iterating through all of the versions that we want to find"
6213280,6218640," and we're looking like a register keys and stuff like that holy it's actually it's actually kind"
6218640,6227680," of small so how many just 108 lines and here well in c it's actually bigger but maybe here we use some"
6227680,6235120," functions that make it shorter i don't really know to be fair i don't really know but yeah this one is"
6235120,6242400," shorter i'm not sure if i can what if i just try to port it to c but to be fair i'm not sure what's the"
6242400,6247520," license of this code yeah so that could be a problem right so what's the license of this code"
6247520,6252720," like i don't really know so maybe i'm not allowed to to use that specific code this one is a little"
6252720,6258560," bit easier to use because it's under mit i think john blow explicitly said that this is mit yeah this is"
6258560,6266480," right i'll think about that because that definitely simplifies the ux of your tool that is supposed to"
6266480,6273920," build things right so you don't want the user of the tool to just do extra steps do some extra steps"
6273920,6276960," outside of the build tool otherwise what's the point of having build tool"
6276960,6281600," you know what i'm talking about that's right all right so that's it for today"
6281600,6288400," thanks everyone who's watching right now i really appreciate it have a good one and i see all on the"
6288400,6292720," next recreational programming session with azosian so the next time we're going to probably work on"
6293360,6298240," mutualizer we're going to implement more epic features because finally we have an epic build"
6298240,6304000," uh right we don't depend on some hell scripts and also especially we don't depend on some"
6304000,6310320," third-party build tools right we create our own chat build tool how about that there there there"
6310320,6313360," all right so bye bye love you"
